/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package asposeslidescloud

import (
	"testing"
)

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method
*/
func TestAlignShapes(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)
    e := initializeTest("AlignShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid name
*/
func TestAlignShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "AlignShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("AlignShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid slideIndex
*/
func TestAlignShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "AlignShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("AlignShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid alignmentType
*/
func TestAlignShapesInvalidAlignmentType(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testalignmentType, "AlignShapes", "alignmentType", "string")
    if (invalidValue == nil) {
        var nullValue string
        testalignmentType = nullValue
    } else {
        testalignmentType, _ = invalidValue.(string)
    }

    e := initializeTest("AlignShapes", "alignmentType", testalignmentType)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "alignmentType", testalignmentType, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid alignToSlide
*/
func TestAlignShapesInvalidAlignToSlide(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)
    testalignToSlide = new(bool)

    invalidValue := invalidizeTestParamValue(testalignToSlide, "AlignShapes", "alignToSlide", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testalignToSlide = nullValue
    } else {
        *testalignToSlide, _ = invalidValue.(bool)
    }

    e := initializeTest("AlignShapes", "alignToSlide", testalignToSlide)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "alignToSlide", testalignToSlide, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid shapes
*/
func TestAlignShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "AlignShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("AlignShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid password
*/
func TestAlignShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "AlignShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("AlignShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid folder
*/
func TestAlignShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "AlignShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("AlignShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.AlignShapes method with invalid storage
*/
func TestAlignShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("AlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("AlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("AlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("AlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("AlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("AlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("AlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("AlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "AlignShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("AlignShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "AlignShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method
*/
func TestConvert(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)
    e := initializeTest("Convert", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid document
*/
func TestConvertInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testdocument, "Convert", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("Convert", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid format
*/
func TestConvertInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testformat, "Convert", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("Convert", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid password
*/
func TestConvertInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testpassword, "Convert", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("Convert", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid storage
*/
func TestConvertInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(teststorage, "Convert", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("Convert", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid fontsFolder
*/
func TestConvertInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "Convert", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("Convert", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.Convert method with invalid slides
*/
func TestConvertInvalidSlides(t *testing.T) {
    testdocument, _ := createTestParamValue("Convert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("Convert", "format", "string").(string)
    testpassword, _ := createTestParamValue("Convert", "password", "string").(string)
    teststorage, _ := createTestParamValue("Convert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Convert", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("Convert", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testslides, "Convert", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("Convert", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Convert", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method
*/
func TestConvertAndSave(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)
    e := initializeTest("ConvertAndSave", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid document
*/
func TestConvertAndSaveInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testdocument, "ConvertAndSave", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("ConvertAndSave", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid format
*/
func TestConvertAndSaveInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testformat, "ConvertAndSave", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("ConvertAndSave", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid outPath
*/
func TestConvertAndSaveInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testoutPath, "ConvertAndSave", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("ConvertAndSave", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid password
*/
func TestConvertAndSaveInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testpassword, "ConvertAndSave", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ConvertAndSave", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid storage
*/
func TestConvertAndSaveInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(teststorage, "ConvertAndSave", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ConvertAndSave", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid fontsFolder
*/
func TestConvertAndSaveInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "ConvertAndSave", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("ConvertAndSave", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.ConvertAndSave method with invalid slides
*/
func TestConvertAndSaveInvalidSlides(t *testing.T) {
    testdocument, _ := createTestParamValue("ConvertAndSave", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("ConvertAndSave", "format", "string").(string)
    testoutPath, _ := createTestParamValue("ConvertAndSave", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("ConvertAndSave", "password", "string").(string)
    teststorage, _ := createTestParamValue("ConvertAndSave", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("ConvertAndSave", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("ConvertAndSave", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testslides, "ConvertAndSave", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("ConvertAndSave", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ConvertAndSave", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method
*/
func TestCopyFile(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)
    e := initializeTest("CopyFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid srcPath
*/
func TestCopyFileInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "CopyFile", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid destPath
*/
func TestCopyFileInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "CopyFile", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid srcStorageName
*/
func TestCopyFileInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "CopyFile", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid destStorageName
*/
func TestCopyFileInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "CopyFile", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid versionId
*/
func TestCopyFileInvalidVersionId(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "CopyFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method
*/
func TestCopyFolder(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)
    e := initializeTest("CopyFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid srcPath
*/
func TestCopyFolderInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "CopyFolder", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid destPath
*/
func TestCopyFolderInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "CopyFolder", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid srcStorageName
*/
func TestCopyFolderInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "CopyFolder", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid destStorageName
*/
func TestCopyFolderInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "CopyFolder", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method
*/
func TestCopyLayoutSlide(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)
    e := initializeTest("CopyLayoutSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid name
*/
func TestCopyLayoutSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CopyLayoutSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid cloneFrom
*/
func TestCopyLayoutSlideInvalidCloneFrom(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFrom, "CopyLayoutSlide", "cloneFrom", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFrom = nullValue
    } else {
        testcloneFrom, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "cloneFrom", testcloneFrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "cloneFrom", testcloneFrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid cloneFromPosition
*/
func TestCopyLayoutSlideInvalidCloneFromPosition(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPosition, "CopyLayoutSlide", "cloneFromPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcloneFromPosition = nullValue
    } else {
        testcloneFromPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("CopyLayoutSlide", "cloneFromPosition", testcloneFromPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "cloneFromPosition", testcloneFromPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid cloneFromPassword
*/
func TestCopyLayoutSlideInvalidCloneFromPassword(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPassword, "CopyLayoutSlide", "cloneFromPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromPassword = nullValue
    } else {
        testcloneFromPassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "cloneFromPassword", testcloneFromPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "cloneFromPassword", testcloneFromPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid cloneFromStorage
*/
func TestCopyLayoutSlideInvalidCloneFromStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromStorage, "CopyLayoutSlide", "cloneFromStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromStorage = nullValue
    } else {
        testcloneFromStorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "cloneFromStorage", testcloneFromStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "cloneFromStorage", testcloneFromStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid password
*/
func TestCopyLayoutSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CopyLayoutSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid folder
*/
func TestCopyLayoutSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CopyLayoutSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.CopyLayoutSlide method with invalid storage
*/
func TestCopyLayoutSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopyLayoutSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyLayoutSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyLayoutSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyLayoutSlide", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopyLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CopyLayoutSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopyLayoutSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyLayoutSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method
*/
func TestCopyMasterSlide(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)
    e := initializeTest("CopyMasterSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid name
*/
func TestCopyMasterSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CopyMasterSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid cloneFrom
*/
func TestCopyMasterSlideInvalidCloneFrom(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFrom, "CopyMasterSlide", "cloneFrom", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFrom = nullValue
    } else {
        testcloneFrom, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "cloneFrom", testcloneFrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "cloneFrom", testcloneFrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid cloneFromPosition
*/
func TestCopyMasterSlideInvalidCloneFromPosition(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPosition, "CopyMasterSlide", "cloneFromPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcloneFromPosition = nullValue
    } else {
        testcloneFromPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("CopyMasterSlide", "cloneFromPosition", testcloneFromPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "cloneFromPosition", testcloneFromPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid cloneFromPassword
*/
func TestCopyMasterSlideInvalidCloneFromPassword(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPassword, "CopyMasterSlide", "cloneFromPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromPassword = nullValue
    } else {
        testcloneFromPassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "cloneFromPassword", testcloneFromPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "cloneFromPassword", testcloneFromPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid cloneFromStorage
*/
func TestCopyMasterSlideInvalidCloneFromStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromStorage, "CopyMasterSlide", "cloneFromStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromStorage = nullValue
    } else {
        testcloneFromStorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "cloneFromStorage", testcloneFromStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "cloneFromStorage", testcloneFromStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid applyToAll
*/
func TestCopyMasterSlideInvalidApplyToAll(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)
    testapplyToAll = new(bool)

    invalidValue := invalidizeTestParamValue(testapplyToAll, "CopyMasterSlide", "applyToAll", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testapplyToAll = nullValue
    } else {
        *testapplyToAll, _ = invalidValue.(bool)
    }

    e := initializeTest("CopyMasterSlide", "applyToAll", testapplyToAll)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "applyToAll", testapplyToAll, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid password
*/
func TestCopyMasterSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CopyMasterSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid folder
*/
func TestCopyMasterSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CopyMasterSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.CopyMasterSlide method with invalid storage
*/
func TestCopyMasterSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopyMasterSlide", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("CopyMasterSlide", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("CopyMasterSlide", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("CopyMasterSlide", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("CopyMasterSlide", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("CopyMasterSlide", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("CopyMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopyMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopyMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CopyMasterSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopyMasterSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyMasterSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method
*/
func TestCopySlide(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)
    e := initializeTest("CopySlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid name
*/
func TestCopySlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CopySlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid slideToCopy
*/
func TestCopySlideInvalidSlideToCopy(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideToCopy, "CopySlide", "slideToCopy", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideToCopy = nullValue
    } else {
        testslideToCopy, _ = invalidValue.(int32)
    }

    e := initializeTest("CopySlide", "slideToCopy", testslideToCopy)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "slideToCopy", testslideToCopy, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid position
*/
func TestCopySlideInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CopySlide", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CopySlide", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid source
*/
func TestCopySlideInvalidSource(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsource, "CopySlide", "source", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsource = nullValue
    } else {
        testsource, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "source", testsource)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "source", testsource, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid sourcePassword
*/
func TestCopySlideInvalidSourcePassword(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePassword, "CopySlide", "sourcePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePassword = nullValue
    } else {
        testsourcePassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "sourcePassword", testsourcePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "sourcePassword", testsourcePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid sourceStorage
*/
func TestCopySlideInvalidSourceStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourceStorage, "CopySlide", "sourceStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourceStorage = nullValue
    } else {
        testsourceStorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "sourceStorage", testsourceStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "sourceStorage", testsourceStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid password
*/
func TestCopySlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CopySlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid folder
*/
func TestCopySlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CopySlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.CopySlide method with invalid storage
*/
func TestCopySlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CopySlide", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("CopySlide", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("CopySlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("CopySlide", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("CopySlide", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CopySlide", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CopySlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CopySlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CopySlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CopySlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CopySlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopySlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method
*/
func TestCreateAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)
    e := initializeTest("CreateAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid name
*/
func TestCreateAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid slideIndex
*/
func TestCreateAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid effect
*/
func TestCreateAnimationEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "CreateAnimationEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("CreateAnimationEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid password
*/
func TestCreateAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid folder
*/
func TestCreateAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.CreateAnimationEffect method with invalid storage
*/
func TestCreateAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method
*/
func TestCreateAnimationInteractiveSequence(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)
    e := initializeTest("CreateAnimationInteractiveSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid name
*/
func TestCreateAnimationInteractiveSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateAnimationInteractiveSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid slideIndex
*/
func TestCreateAnimationInteractiveSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateAnimationInteractiveSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid sequence
*/
func TestCreateAnimationInteractiveSequenceInvalidSequence(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequence, "CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence")
    if (invalidValue == nil) {
        testsequence = nil
    } else {
        testsequence, _ = invalidValue.(IInteractiveSequence)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "sequence", testsequence)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "sequence", testsequence, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid password
*/
func TestCreateAnimationInteractiveSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateAnimationInteractiveSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid folder
*/
func TestCreateAnimationInteractiveSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateAnimationInteractiveSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.CreateAnimationInteractiveSequence method with invalid storage
*/
func TestCreateAnimationInteractiveSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("CreateAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateAnimationInteractiveSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method
*/
func TestCreateAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid name
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid effect
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "CreateAnimationInteractiveSequenceEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid password
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.CreateAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestCreateAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method
*/
func TestCreateChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)
    e := initializeTest("CreateChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid name
*/
func TestCreateChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid slideIndex
*/
func TestCreateChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid shapeIndex
*/
func TestCreateChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid category
*/
func TestCreateChartCategoryInvalidCategory(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategory, "CreateChartCategory", "category", "ChartCategory")
    if (invalidValue == nil) {
        testcategory = nil
    } else {
        testcategory, _ = invalidValue.(IChartCategory)
    }

    e := initializeTest("CreateChartCategory", "category", testcategory)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "category", testcategory, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid password
*/
func TestCreateChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid folder
*/
func TestCreateChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.CreateChartCategory method with invalid storage
*/
func TestCreateChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("CreateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("CreateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method
*/
func TestCreateChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)
    e := initializeTest("CreateChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid name
*/
func TestCreateChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid slideIndex
*/
func TestCreateChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid shapeIndex
*/
func TestCreateChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid seriesIndex
*/
func TestCreateChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "CreateChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid dataPoint
*/
func TestCreateChartDataPointInvalidDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdataPoint, "CreateChartDataPoint", "dataPoint", "DataPoint")
    if (invalidValue == nil) {
        testdataPoint = nil
    } else {
        testdataPoint, _ = invalidValue.(IDataPoint)
    }

    e := initializeTest("CreateChartDataPoint", "dataPoint", testdataPoint)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "dataPoint", testdataPoint, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid password
*/
func TestCreateChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid folder
*/
func TestCreateChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.CreateChartDataPoint method with invalid storage
*/
func TestCreateChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("CreateChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("CreateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("CreateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method
*/
func TestCreateChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)
    e := initializeTest("CreateChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid name
*/
func TestCreateChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid slideIndex
*/
func TestCreateChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid shapeIndex
*/
func TestCreateChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid series
*/
func TestCreateChartSeriesInvalidSeries(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseries, "CreateChartSeries", "series", "Series")
    if (invalidValue == nil) {
        testseries = nil
    } else {
        testseries, _ = invalidValue.(ISeries)
    }

    e := initializeTest("CreateChartSeries", "series", testseries)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "series", testseries, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid password
*/
func TestCreateChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid folder
*/
func TestCreateChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.CreateChartSeries method with invalid storage
*/
func TestCreateChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("CreateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("CreateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method
*/
func TestCreateComment(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)
    e := initializeTest("CreateComment", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid name
*/
func TestCreateCommentInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateComment", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateComment", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid slideIndex
*/
func TestCreateCommentInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateComment", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateComment", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid dto
*/
func TestCreateCommentInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateComment", "dto", "SlideComment")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(ISlideComment)
    }

    e := initializeTest("CreateComment", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid password
*/
func TestCreateCommentInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateComment", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateComment", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid folder
*/
func TestCreateCommentInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateComment", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateComment", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateComment method with invalid storage
*/
func TestCreateCommentInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateComment", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateComment", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateComment", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateComment", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateComment", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateComment", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateComment", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateComment", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateComment(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateComment", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateCommentOnline method
*/
func TestCreateCommentOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateCommentOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("CreateCommentOnline", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateCommentOnline", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateCommentOnline", "password", "string").(string)
    e := initializeTest("CreateCommentOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.CreateCommentOnline(testdocument, testslideIndex, testdto, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateCommentOnline method with invalid document
*/
func TestCreateCommentOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateCommentOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("CreateCommentOnline", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateCommentOnline", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateCommentOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "CreateCommentOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreateCommentOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateCommentOnline(testdocument, testslideIndex, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateCommentOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateCommentOnline method with invalid slideIndex
*/
func TestCreateCommentOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateCommentOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("CreateCommentOnline", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateCommentOnline", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateCommentOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateCommentOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateCommentOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateCommentOnline(testdocument, testslideIndex, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateCommentOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateCommentOnline method with invalid dto
*/
func TestCreateCommentOnlineInvalidDto(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateCommentOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("CreateCommentOnline", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateCommentOnline", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateCommentOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateCommentOnline", "dto", "SlideComment")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(ISlideComment)
    }

    e := initializeTest("CreateCommentOnline", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateCommentOnline(testdocument, testslideIndex, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateCommentOnline", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds the comment on the slide.
   Test for SlidesApi.CreateCommentOnline method with invalid password
*/
func TestCreateCommentOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateCommentOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("CreateCommentOnline", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateCommentOnline", "dto", "SlideComment").(ISlideComment)
    testpassword, _ := createTestParamValue("CreateCommentOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateCommentOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateCommentOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateCommentOnline(testdocument, testslideIndex, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateCommentOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method
*/
func TestCreateFolder(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)
    e := initializeTest("CreateFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateFolder(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method with invalid path
*/
func TestCreateFolderInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "CreateFolder", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("CreateFolder", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateFolder(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateFolder", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method with invalid storageName
*/
func TestCreateFolderInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "CreateFolder", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CreateFolder", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateFolder(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateFolder", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method
*/
func TestCreateImageWatermark(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)
    e := initializeTest("CreateImageWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid name
*/
func TestCreateImageWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateImageWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateImageWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid image
*/
func TestCreateImageWatermarkInvalidImage(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testimage, "CreateImageWatermark", "image", "[]byte")
    if (invalidValue == nil) {
        testimage = nil
    } else {
        testimage, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreateImageWatermark", "image", testimage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "image", testimage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid pictureFrame
*/
func TestCreateImageWatermarkInvalidPictureFrame(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpictureFrame, "CreateImageWatermark", "pictureFrame", "PictureFrame")
    if (invalidValue == nil) {
        testpictureFrame = nil
    } else {
        testpictureFrame, _ = invalidValue.(IPictureFrame)
    }

    e := initializeTest("CreateImageWatermark", "pictureFrame", testpictureFrame)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "pictureFrame", testpictureFrame, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid password
*/
func TestCreateImageWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateImageWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateImageWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid folder
*/
func TestCreateImageWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateImageWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateImageWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermark method with invalid storage
*/
func TestCreateImageWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("CreateImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateImageWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateImageWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermarkOnline method
*/
func TestCreateImageWatermarkOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("CreateImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermarkOnline", "password", "string").(string)
    e := initializeTest("CreateImageWatermarkOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermarkOnline method with invalid document
*/
func TestCreateImageWatermarkOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("CreateImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "CreateImageWatermarkOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreateImageWatermarkOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermarkOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermarkOnline method with invalid image
*/
func TestCreateImageWatermarkOnlineInvalidImage(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("CreateImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testimage, "CreateImageWatermarkOnline", "image", "[]byte")
    if (invalidValue == nil) {
        testimage = nil
    } else {
        testimage, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreateImageWatermarkOnline", "image", testimage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermarkOnline", "image", testimage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermarkOnline method with invalid pictureFrame
*/
func TestCreateImageWatermarkOnlineInvalidPictureFrame(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("CreateImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpictureFrame, "CreateImageWatermarkOnline", "pictureFrame", "PictureFrame")
    if (invalidValue == nil) {
        testpictureFrame = nil
    } else {
        testpictureFrame, _ = invalidValue.(IPictureFrame)
    }

    e := initializeTest("CreateImageWatermarkOnline", "pictureFrame", testpictureFrame)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermarkOnline", "pictureFrame", testpictureFrame, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateImageWatermarkOnline method with invalid password
*/
func TestCreateImageWatermarkOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("CreateImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("CreateImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("CreateImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateImageWatermarkOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateImageWatermarkOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateImageWatermarkOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method
*/
func TestCreateNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)
    e := initializeTest("CreateNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid name
*/
func TestCreateNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid slideIndex
*/
func TestCreateNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid dto
*/
func TestCreateNotesSlideInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateNotesSlide", "dto", "NotesSlide")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlide)
    }

    e := initializeTest("CreateNotesSlide", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid password
*/
func TestCreateNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid folder
*/
func TestCreateNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.CreateNotesSlide method with invalid storage
*/
func TestCreateNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("CreateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method
*/
func TestCreateNotesSlideParagraph(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)
    e := initializeTest("CreateNotesSlideParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid name
*/
func TestCreateNotesSlideParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateNotesSlideParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid slideIndex
*/
func TestCreateNotesSlideParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateNotesSlideParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid shapeIndex
*/
func TestCreateNotesSlideParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateNotesSlideParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid dto
*/
func TestCreateNotesSlideParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateNotesSlideParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("CreateNotesSlideParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid position
*/
func TestCreateNotesSlideParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateNotesSlideParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid password
*/
func TestCreateNotesSlideParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateNotesSlideParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid folder
*/
func TestCreateNotesSlideParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateNotesSlideParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateNotesSlideParagraph method with invalid storage
*/
func TestCreateNotesSlideParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateNotesSlideParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method
*/
func TestCreateNotesSlidePortion(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)
    e := initializeTest("CreateNotesSlidePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid name
*/
func TestCreateNotesSlidePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateNotesSlidePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlidePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid slideIndex
*/
func TestCreateNotesSlidePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateNotesSlidePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlidePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid shapeIndex
*/
func TestCreateNotesSlidePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateNotesSlidePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlidePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid paragraphIndex
*/
func TestCreateNotesSlidePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "CreateNotesSlidePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlidePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid dto
*/
func TestCreateNotesSlidePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateNotesSlidePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("CreateNotesSlidePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid position
*/
func TestCreateNotesSlidePortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateNotesSlidePortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlidePortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid password
*/
func TestCreateNotesSlidePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateNotesSlidePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlidePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid folder
*/
func TestCreateNotesSlidePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateNotesSlidePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlidePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreateNotesSlidePortion method with invalid storage
*/
func TestCreateNotesSlidePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlidePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlidePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateNotesSlidePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlidePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlidePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method
*/
func TestCreateNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)
    e := initializeTest("CreateNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid name
*/
func TestCreateNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid slideIndex
*/
func TestCreateNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid dto
*/
func TestCreateNotesSlideShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateNotesSlideShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("CreateNotesSlideShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid shapeToClone
*/
func TestCreateNotesSlideShapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "CreateNotesSlideShape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideShape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid position
*/
func TestCreateNotesSlideShapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateNotesSlideShape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateNotesSlideShape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid password
*/
func TestCreateNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid folder
*/
func TestCreateNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateNotesSlideShape method with invalid storage
*/
func TestCreateNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateNotesSlideShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateNotesSlideShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateNotesSlideShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method
*/
func TestCreateParagraph(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)
    e := initializeTest("CreateParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid name
*/
func TestCreateParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid slideIndex
*/
func TestCreateParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid shapeIndex
*/
func TestCreateParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid dto
*/
func TestCreateParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("CreateParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid position
*/
func TestCreateParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid password
*/
func TestCreateParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid folder
*/
func TestCreateParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.CreateParagraph method with invalid storage
*/
func TestCreateParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreateParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method
*/
func TestCreatePortion(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)
    e := initializeTest("CreatePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid name
*/
func TestCreatePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreatePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid slideIndex
*/
func TestCreatePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreatePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreatePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid shapeIndex
*/
func TestCreatePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreatePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreatePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid paragraphIndex
*/
func TestCreatePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "CreatePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreatePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid dto
*/
func TestCreatePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreatePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("CreatePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid position
*/
func TestCreatePortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreatePortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreatePortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid password
*/
func TestCreatePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreatePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid folder
*/
func TestCreatePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreatePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.CreatePortion method with invalid storage
*/
func TestCreatePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("CreatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreatePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreatePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreatePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreatePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method
*/
func TestCreatePresentation(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)
    e := initializeTest("CreatePresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid name
*/
func TestCreatePresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreatePresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid data
*/
func TestCreatePresentationInvalidData(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdata, "CreatePresentation", "data", "[]byte")
    if (invalidValue == nil) {
        testdata = nil
    } else {
        testdata, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreatePresentation", "data", testdata)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "data", testdata, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid inputPassword
*/
func TestCreatePresentationInvalidInputPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testinputPassword, "CreatePresentation", "inputPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testinputPassword = nullValue
    } else {
        testinputPassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentation", "inputPassword", testinputPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "inputPassword", testinputPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid password
*/
func TestCreatePresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreatePresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid folder
*/
func TestCreatePresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreatePresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentation method with invalid storage
*/
func TestCreatePresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentation", "name", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentation", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("CreatePresentation", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreatePresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method
*/
func TestCreatePresentationFromSource(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)
    e := initializeTest("CreatePresentationFromSource", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid name
*/
func TestCreatePresentationFromSourceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreatePresentationFromSource", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid sourcePath
*/
func TestCreatePresentationFromSourceInvalidSourcePath(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePath, "CreatePresentationFromSource", "sourcePath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePath = nullValue
    } else {
        testsourcePath, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "sourcePath", testsourcePath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "sourcePath", testsourcePath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid sourcePassword
*/
func TestCreatePresentationFromSourceInvalidSourcePassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePassword, "CreatePresentationFromSource", "sourcePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePassword = nullValue
    } else {
        testsourcePassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "sourcePassword", testsourcePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "sourcePassword", testsourcePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid sourceStorage
*/
func TestCreatePresentationFromSourceInvalidSourceStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourceStorage, "CreatePresentationFromSource", "sourceStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourceStorage = nullValue
    } else {
        testsourceStorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "sourceStorage", testsourceStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "sourceStorage", testsourceStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid password
*/
func TestCreatePresentationFromSourceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreatePresentationFromSource", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid folder
*/
func TestCreatePresentationFromSourceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreatePresentationFromSource", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.CreatePresentationFromSource method with invalid storage
*/
func TestCreatePresentationFromSourceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("CreatePresentationFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("CreatePresentationFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("CreatePresentationFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("CreatePresentationFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreatePresentationFromSource", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromSource", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromSource", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method
*/
func TestCreatePresentationFromTemplate(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)
    e := initializeTest("CreatePresentationFromTemplate", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid name
*/
func TestCreatePresentationFromTemplateInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreatePresentationFromTemplate", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid templatePath
*/
func TestCreatePresentationFromTemplateInvalidTemplatePath(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplatePath, "CreatePresentationFromTemplate", "templatePath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplatePath = nullValue
    } else {
        testtemplatePath, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "templatePath", testtemplatePath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "templatePath", testtemplatePath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid data
*/
func TestCreatePresentationFromTemplateInvalidData(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdata, "CreatePresentationFromTemplate", "data", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdata = nullValue
    } else {
        testdata, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "data", testdata)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "data", testdata, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid templatePassword
*/
func TestCreatePresentationFromTemplateInvalidTemplatePassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplatePassword, "CreatePresentationFromTemplate", "templatePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplatePassword = nullValue
    } else {
        testtemplatePassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "templatePassword", testtemplatePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "templatePassword", testtemplatePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid templateStorage
*/
func TestCreatePresentationFromTemplateInvalidTemplateStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplateStorage, "CreatePresentationFromTemplate", "templateStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplateStorage = nullValue
    } else {
        testtemplateStorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "templateStorage", testtemplateStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "templateStorage", testtemplateStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid isImageDataEmbedded
*/
func TestCreatePresentationFromTemplateInvalidIsImageDataEmbedded(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)
    testisImageDataEmbedded = new(bool)

    invalidValue := invalidizeTestParamValue(testisImageDataEmbedded, "CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testisImageDataEmbedded = nullValue
    } else {
        *testisImageDataEmbedded, _ = invalidValue.(bool)
    }

    e := initializeTest("CreatePresentationFromTemplate", "isImageDataEmbedded", testisImageDataEmbedded)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "isImageDataEmbedded", testisImageDataEmbedded, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid password
*/
func TestCreatePresentationFromTemplateInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreatePresentationFromTemplate", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid folder
*/
func TestCreatePresentationFromTemplateInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreatePresentationFromTemplate", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.CreatePresentationFromTemplate method with invalid storage
*/
func TestCreatePresentationFromTemplateInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreatePresentationFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("CreatePresentationFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("CreatePresentationFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("CreatePresentationFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("CreatePresentationFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("CreatePresentationFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreatePresentationFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreatePresentationFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreatePresentationFromTemplate", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreatePresentationFromTemplate", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreatePresentationFromTemplate", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method
*/
func TestCreateSection(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)
    e := initializeTest("CreateSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid name
*/
func TestCreateSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid sectionName
*/
func TestCreateSectionInvalidSectionName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionName, "CreateSection", "sectionName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsectionName = nullValue
    } else {
        testsectionName, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSection", "sectionName", testsectionName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "sectionName", testsectionName, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid slideIndex
*/
func TestCreateSectionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateSection", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSection", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid password
*/
func TestCreateSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid folder
*/
func TestCreateSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.CreateSection method with invalid storage
*/
func TestCreateSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("CreateSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("CreateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method
*/
func TestCreateShape(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)
    e := initializeTest("CreateShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid name
*/
func TestCreateShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid slideIndex
*/
func TestCreateShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid dto
*/
func TestCreateShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("CreateShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid shapeToClone
*/
func TestCreateShapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "CreateShape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateShape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid position
*/
func TestCreateShapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateShape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateShape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid password
*/
func TestCreateShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid folder
*/
func TestCreateShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.CreateShape method with invalid storage
*/
func TestCreateShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method
*/
func TestCreateSlide(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)
    e := initializeTest("CreateSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid name
*/
func TestCreateSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid layoutAlias
*/
func TestCreateSlideInvalidLayoutAlias(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testlayoutAlias, "CreateSlide", "layoutAlias", "string")
    if (invalidValue == nil) {
        var nullValue string
        testlayoutAlias = nullValue
    } else {
        testlayoutAlias, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSlide", "layoutAlias", testlayoutAlias)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "layoutAlias", testlayoutAlias, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid position
*/
func TestCreateSlideInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateSlide", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSlide", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid password
*/
func TestCreateSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid folder
*/
func TestCreateSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.CreateSlide method with invalid storage
*/
func TestCreateSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateSlide", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("CreateSlide", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSlide", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method
*/
func TestCreateSubshape(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)
    e := initializeTest("CreateSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid name
*/
func TestCreateSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid slideIndex
*/
func TestCreateSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid path
*/
func TestCreateSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "CreateSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid dto
*/
func TestCreateSubshapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateSubshape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("CreateSubshape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid shapeToClone
*/
func TestCreateSubshapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "CreateSubshape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid position
*/
func TestCreateSubshapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateSubshape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid password
*/
func TestCreateSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid folder
*/
func TestCreateSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.CreateSubshape method with invalid storage
*/
func TestCreateSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("CreateSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("CreateSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method
*/
func TestCreateSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("CreateSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid name
*/
func TestCreateSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid slideIndex
*/
func TestCreateSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid path
*/
func TestCreateSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "CreateSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid shapeIndex
*/
func TestCreateSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid dto
*/
func TestCreateSubshapeParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateSubshapeParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("CreateSubshapeParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid position
*/
func TestCreateSubshapeParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateSubshapeParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapeParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid password
*/
func TestCreateSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid folder
*/
func TestCreateSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapeParagraph method with invalid storage
*/
func TestCreateSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method
*/
func TestCreateSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)
    e := initializeTest("CreateSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid name
*/
func TestCreateSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid slideIndex
*/
func TestCreateSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "CreateSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid path
*/
func TestCreateSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "CreateSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid shapeIndex
*/
func TestCreateSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "CreateSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid paragraphIndex
*/
func TestCreateSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "CreateSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid dto
*/
func TestCreateSubshapePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "CreateSubshapePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("CreateSubshapePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid position
*/
func TestCreateSubshapePortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "CreateSubshapePortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("CreateSubshapePortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid password
*/
func TestCreateSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid folder
*/
func TestCreateSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.CreateSubshapePortion method with invalid storage
*/
func TestCreateSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("CreateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("CreateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("CreateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("CreateSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("CreateSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("CreateSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("CreateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method
*/
func TestCreateWatermark(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)
    e := initializeTest("CreateWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid name
*/
func TestCreateWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "CreateWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid shape
*/
func TestCreateWatermarkInvalidShape(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshape, "CreateWatermark", "shape", "Shape")
    if (invalidValue == nil) {
        testshape = nil
    } else {
        testshape, _ = invalidValue.(IShape)
    }

    e := initializeTest("CreateWatermark", "shape", testshape)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "shape", testshape, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid fontHeight
*/
func TestCreateWatermarkInvalidFontHeight(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)
    testfontHeight = new(float64)

    invalidValue := invalidizeTestParamValue(testfontHeight, "CreateWatermark", "fontHeight", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testfontHeight = nullValue
    } else {
        *testfontHeight, _ = invalidValue.(float64)
    }

    e := initializeTest("CreateWatermark", "fontHeight", testfontHeight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "fontHeight", testfontHeight, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid text
*/
func TestCreateWatermarkInvalidText(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtext, "CreateWatermark", "text", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtext = nullValue
    } else {
        testtext, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "text", testtext)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "text", testtext, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid fontName
*/
func TestCreateWatermarkInvalidFontName(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontName, "CreateWatermark", "fontName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontName = nullValue
    } else {
        testfontName, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "fontName", testfontName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "fontName", testfontName, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid fontColor
*/
func TestCreateWatermarkInvalidFontColor(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontColor, "CreateWatermark", "fontColor", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontColor = nullValue
    } else {
        testfontColor, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "fontColor", testfontColor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "fontColor", testfontColor, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid password
*/
func TestCreateWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid folder
*/
func TestCreateWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "CreateWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermark method with invalid storage
*/
func TestCreateWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("CreateWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("CreateWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("CreateWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("CreateWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "CreateWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method
*/
func TestCreateWatermarkOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)
    e := initializeTest("CreateWatermarkOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid document
*/
func TestCreateWatermarkOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "CreateWatermarkOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("CreateWatermarkOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid shape
*/
func TestCreateWatermarkOnlineInvalidShape(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testshape, "CreateWatermarkOnline", "shape", "Shape")
    if (invalidValue == nil) {
        testshape = nil
    } else {
        testshape, _ = invalidValue.(IShape)
    }

    e := initializeTest("CreateWatermarkOnline", "shape", testshape)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "shape", testshape, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid fontHeight
*/
func TestCreateWatermarkOnlineInvalidFontHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)
    testfontHeight = new(float64)

    invalidValue := invalidizeTestParamValue(testfontHeight, "CreateWatermarkOnline", "fontHeight", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testfontHeight = nullValue
    } else {
        *testfontHeight, _ = invalidValue.(float64)
    }

    e := initializeTest("CreateWatermarkOnline", "fontHeight", testfontHeight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "fontHeight", testfontHeight, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid text
*/
func TestCreateWatermarkOnlineInvalidText(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testtext, "CreateWatermarkOnline", "text", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtext = nullValue
    } else {
        testtext, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermarkOnline", "text", testtext)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "text", testtext, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid fontName
*/
func TestCreateWatermarkOnlineInvalidFontName(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontName, "CreateWatermarkOnline", "fontName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontName = nullValue
    } else {
        testfontName, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermarkOnline", "fontName", testfontName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "fontName", testfontName, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid fontColor
*/
func TestCreateWatermarkOnlineInvalidFontColor(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontColor, "CreateWatermarkOnline", "fontColor", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontColor = nullValue
    } else {
        testfontColor, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermarkOnline", "fontColor", testfontColor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "fontColor", testfontColor, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.CreateWatermarkOnline method with invalid password
*/
func TestCreateWatermarkOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("CreateWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("CreateWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("CreateWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("CreateWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("CreateWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("CreateWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("CreateWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "CreateWatermarkOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("CreateWatermarkOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateWatermarkOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method
*/
func TestDeleteAnimation(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)
    e := initializeTest("DeleteAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method with invalid name
*/
func TestDeleteAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method with invalid slideIndex
*/
func TestDeleteAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method with invalid password
*/
func TestDeleteAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method with invalid folder
*/
func TestDeleteAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteAnimation method with invalid storage
*/
func TestDeleteAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method
*/
func TestDeleteAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)
    e := initializeTest("DeleteAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid name
*/
func TestDeleteAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid slideIndex
*/
func TestDeleteAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid effectIndex
*/
func TestDeleteAnimationEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "DeleteAnimationEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid password
*/
func TestDeleteAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid folder
*/
func TestDeleteAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteAnimationEffect method with invalid storage
*/
func TestDeleteAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method
*/
func TestDeleteAnimationInteractiveSequence(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)
    e := initializeTest("DeleteAnimationInteractiveSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid name
*/
func TestDeleteAnimationInteractiveSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimationInteractiveSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid slideIndex
*/
func TestDeleteAnimationInteractiveSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimationInteractiveSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid sequenceIndex
*/
func TestDeleteAnimationInteractiveSequenceInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "DeleteAnimationInteractiveSequence", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid password
*/
func TestDeleteAnimationInteractiveSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimationInteractiveSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid folder
*/
func TestDeleteAnimationInteractiveSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimationInteractiveSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequence method with invalid storage
*/
func TestDeleteAnimationInteractiveSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimationInteractiveSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method
*/
func TestDeleteAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid name
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid effectIndex
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid password
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestDeleteAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method
*/
func TestDeleteAnimationInteractiveSequences(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)
    e := initializeTest("DeleteAnimationInteractiveSequences", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method with invalid name
*/
func TestDeleteAnimationInteractiveSequencesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimationInteractiveSequences", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequences", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequences", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method with invalid slideIndex
*/
func TestDeleteAnimationInteractiveSequencesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimationInteractiveSequences", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationInteractiveSequences", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequences", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method with invalid password
*/
func TestDeleteAnimationInteractiveSequencesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimationInteractiveSequences", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequences", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequences", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method with invalid folder
*/
func TestDeleteAnimationInteractiveSequencesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimationInteractiveSequences", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequences", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequences", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteAnimationInteractiveSequences method with invalid storage
*/
func TestDeleteAnimationInteractiveSequencesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimationInteractiveSequences", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationInteractiveSequences", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationInteractiveSequences", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method
*/
func TestDeleteAnimationMainSequence(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)
    e := initializeTest("DeleteAnimationMainSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method with invalid name
*/
func TestDeleteAnimationMainSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteAnimationMainSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationMainSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationMainSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method with invalid slideIndex
*/
func TestDeleteAnimationMainSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteAnimationMainSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteAnimationMainSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationMainSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method with invalid password
*/
func TestDeleteAnimationMainSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteAnimationMainSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationMainSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationMainSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method with invalid folder
*/
func TestDeleteAnimationMainSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteAnimationMainSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationMainSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationMainSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteAnimationMainSequence method with invalid storage
*/
func TestDeleteAnimationMainSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteAnimationMainSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteAnimationMainSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteAnimationMainSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method
*/
func TestDeleteBackground(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)
    e := initializeTest("DeleteBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method with invalid name
*/
func TestDeleteBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method with invalid slideIndex
*/
func TestDeleteBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method with invalid password
*/
func TestDeleteBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method with invalid folder
*/
func TestDeleteBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteBackground method with invalid storage
*/
func TestDeleteBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method
*/
func TestDeleteChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)
    e := initializeTest("DeleteChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid name
*/
func TestDeleteChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid slideIndex
*/
func TestDeleteChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid shapeIndex
*/
func TestDeleteChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid categoryIndex
*/
func TestDeleteChartCategoryInvalidCategoryIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategoryIndex, "DeleteChartCategory", "categoryIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcategoryIndex = nullValue
    } else {
        testcategoryIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "categoryIndex", testcategoryIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "categoryIndex", testcategoryIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid password
*/
func TestDeleteChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid folder
*/
func TestDeleteChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid storage
*/
func TestDeleteChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method
*/
func TestDeleteChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)
    e := initializeTest("DeleteChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid name
*/
func TestDeleteChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid slideIndex
*/
func TestDeleteChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid shapeIndex
*/
func TestDeleteChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid seriesIndex
*/
func TestDeleteChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "DeleteChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid pointIndex
*/
func TestDeleteChartDataPointInvalidPointIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpointIndex, "DeleteChartDataPoint", "pointIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testpointIndex = nullValue
    } else {
        testpointIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "pointIndex", testpointIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "pointIndex", testpointIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid password
*/
func TestDeleteChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid folder
*/
func TestDeleteChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid storage
*/
func TestDeleteChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method
*/
func TestDeleteChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)
    e := initializeTest("DeleteChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid name
*/
func TestDeleteChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid slideIndex
*/
func TestDeleteChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid shapeIndex
*/
func TestDeleteChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid seriesIndex
*/
func TestDeleteChartSeriesInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "DeleteChartSeries", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid password
*/
func TestDeleteChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid folder
*/
func TestDeleteChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid storage
*/
func TestDeleteChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method
*/
func TestDeleteComments(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)
    e := initializeTest("DeleteComments", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method with invalid name
*/
func TestDeleteCommentsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteComments", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteComments", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteComments", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method with invalid author
*/
func TestDeleteCommentsInvalidAuthor(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testauthor, "DeleteComments", "author", "string")
    if (invalidValue == nil) {
        var nullValue string
        testauthor = nullValue
    } else {
        testauthor, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteComments", "author", testauthor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteComments", "author", testauthor, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method with invalid password
*/
func TestDeleteCommentsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteComments", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteComments", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteComments", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method with invalid folder
*/
func TestDeleteCommentsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteComments", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteComments", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteComments", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteComments method with invalid storage
*/
func TestDeleteCommentsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteComments", "name", "string").(string)
    testauthor, _ := createTestParamValue("DeleteComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteComments", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteComments", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteComments(testname, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteComments", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteCommentsOnline method
*/
func TestDeleteCommentsOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteCommentsOnline", "document", "[]byte").([]byte)
    testauthor, _ := createTestParamValue("DeleteCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteCommentsOnline", "password", "string").(string)
    e := initializeTest("DeleteCommentsOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteCommentsOnline(testdocument, testauthor, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteCommentsOnline method with invalid document
*/
func TestDeleteCommentsOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteCommentsOnline", "document", "[]byte").([]byte)
    testauthor, _ := createTestParamValue("DeleteCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DeleteCommentsOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DeleteCommentsOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteCommentsOnline(testdocument, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteCommentsOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteCommentsOnline method with invalid author
*/
func TestDeleteCommentsOnlineInvalidAuthor(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteCommentsOnline", "document", "[]byte").([]byte)
    testauthor, _ := createTestParamValue("DeleteCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testauthor, "DeleteCommentsOnline", "author", "string")
    if (invalidValue == nil) {
        var nullValue string
        testauthor = nullValue
    } else {
        testauthor, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteCommentsOnline", "author", testauthor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteCommentsOnline(testdocument, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteCommentsOnline", "author", testauthor, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteCommentsOnline method with invalid password
*/
func TestDeleteCommentsOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteCommentsOnline", "document", "[]byte").([]byte)
    testauthor, _ := createTestParamValue("DeleteCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteCommentsOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteCommentsOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteCommentsOnline(testdocument, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteCommentsOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteDocumentProperties method
*/
func TestDeleteDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperties", "storage", "string").(string)
    e := initializeTest("DeleteDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteDocumentProperties method with invalid name
*/
func TestDeleteDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteDocumentProperties method with invalid password
*/
func TestDeleteDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteDocumentProperties method with invalid folder
*/
func TestDeleteDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteDocumentProperties method with invalid storage
*/
func TestDeleteDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method
*/
func TestDeleteDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)
    e := initializeTest("DeleteDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method with invalid name
*/
func TestDeleteDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method with invalid propertyName
*/
func TestDeleteDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "DeleteDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method with invalid password
*/
func TestDeleteDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method with invalid folder
*/
func TestDeleteDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteDocumentProperty method with invalid storage
*/
func TestDeleteDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method
*/
func TestDeleteFile(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)
    e := initializeTest("DeleteFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid path
*/
func TestDeleteFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid storageName
*/
func TestDeleteFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "DeleteFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid versionId
*/
func TestDeleteFileInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "DeleteFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method
*/
func TestDeleteFolder(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }
    e := initializeTest("DeleteFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid path
*/
func TestDeleteFolderInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }

    invalidValue := invalidizeTestParamValue(testpath, "DeleteFolder", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFolder", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid storageName
*/
func TestDeleteFolderInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }

    invalidValue := invalidizeTestParamValue(teststorageName, "DeleteFolder", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFolder", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid recursive
*/
func TestDeleteFolderInvalidRecursive(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }
    testrecursive = new(bool)

    invalidValue := invalidizeTestParamValue(testrecursive, "DeleteFolder", "recursive", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testrecursive = nullValue
    } else {
        *testrecursive, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteFolder", "recursive", testrecursive)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "recursive", testrecursive, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method
*/
func TestDeleteNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid name
*/
func TestDeleteNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid slideIndex
*/
func TestDeleteNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid password
*/
func TestDeleteNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid folder
*/
func TestDeleteNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid storage
*/
func TestDeleteNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method
*/
func TestDeleteNotesSlideParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid name
*/
func TestDeleteNotesSlideParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid slideIndex
*/
func TestDeleteNotesSlideParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid shapeIndex
*/
func TestDeleteNotesSlideParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid paragraphIndex
*/
func TestDeleteNotesSlideParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlideParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid password
*/
func TestDeleteNotesSlideParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid folder
*/
func TestDeleteNotesSlideParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid storage
*/
func TestDeleteNotesSlideParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method
*/
func TestDeleteNotesSlideParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid name
*/
func TestDeleteNotesSlideParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid slideIndex
*/
func TestDeleteNotesSlideParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid shapeIndex
*/
func TestDeleteNotesSlideParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid paragraphs
*/
func TestDeleteNotesSlideParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteNotesSlideParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid password
*/
func TestDeleteNotesSlideParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid folder
*/
func TestDeleteNotesSlideParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid storage
*/
func TestDeleteNotesSlideParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method
*/
func TestDeleteNotesSlidePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlidePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid name
*/
func TestDeleteNotesSlidePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlidePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid slideIndex
*/
func TestDeleteNotesSlidePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlidePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid shapeIndex
*/
func TestDeleteNotesSlidePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlidePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid paragraphIndex
*/
func TestDeleteNotesSlidePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlidePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid portionIndex
*/
func TestDeleteNotesSlidePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeleteNotesSlidePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid password
*/
func TestDeleteNotesSlidePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlidePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid folder
*/
func TestDeleteNotesSlidePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlidePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid storage
*/
func TestDeleteNotesSlidePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlidePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method
*/
func TestDeleteNotesSlidePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlidePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid name
*/
func TestDeleteNotesSlidePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlidePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid slideIndex
*/
func TestDeleteNotesSlidePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlidePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid shapeIndex
*/
func TestDeleteNotesSlidePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlidePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid paragraphIndex
*/
func TestDeleteNotesSlidePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlidePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid portions
*/
func TestDeleteNotesSlidePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeleteNotesSlidePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid password
*/
func TestDeleteNotesSlidePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlidePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid folder
*/
func TestDeleteNotesSlidePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlidePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid storage
*/
func TestDeleteNotesSlidePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlidePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method
*/
func TestDeleteNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid name
*/
func TestDeleteNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid slideIndex
*/
func TestDeleteNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid shapeIndex
*/
func TestDeleteNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid password
*/
func TestDeleteNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid folder
*/
func TestDeleteNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid storage
*/
func TestDeleteNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method
*/
func TestDeleteNotesSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid name
*/
func TestDeleteNotesSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid slideIndex
*/
func TestDeleteNotesSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid shapes
*/
func TestDeleteNotesSlideShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteNotesSlideShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlideShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid password
*/
func TestDeleteNotesSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid folder
*/
func TestDeleteNotesSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid storage
*/
func TestDeleteNotesSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method
*/
func TestDeleteParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)
    e := initializeTest("DeleteParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid name
*/
func TestDeleteParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid slideIndex
*/
func TestDeleteParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid shapeIndex
*/
func TestDeleteParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid paragraphIndex
*/
func TestDeleteParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid password
*/
func TestDeleteParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid folder
*/
func TestDeleteParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid storage
*/
func TestDeleteParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method
*/
func TestDeleteParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid name
*/
func TestDeleteParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid slideIndex
*/
func TestDeleteParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid shapeIndex
*/
func TestDeleteParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid paragraphs
*/
func TestDeleteParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid password
*/
func TestDeleteParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid folder
*/
func TestDeleteParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid storage
*/
func TestDeleteParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method
*/
func TestDeletePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)
    e := initializeTest("DeletePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid name
*/
func TestDeletePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeletePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid slideIndex
*/
func TestDeletePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeletePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid shapeIndex
*/
func TestDeletePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeletePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid paragraphIndex
*/
func TestDeletePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeletePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid portionIndex
*/
func TestDeletePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeletePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid password
*/
func TestDeletePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeletePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid folder
*/
func TestDeletePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeletePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid storage
*/
func TestDeletePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeletePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method
*/
func TestDeletePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)
    e := initializeTest("DeletePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid name
*/
func TestDeletePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeletePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid slideIndex
*/
func TestDeletePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeletePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid shapeIndex
*/
func TestDeletePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeletePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid paragraphIndex
*/
func TestDeletePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeletePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid portions
*/
func TestDeletePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeletePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeletePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid password
*/
func TestDeletePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeletePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid folder
*/
func TestDeletePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeletePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid storage
*/
func TestDeletePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeletePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtection method
*/
func TestDeleteProtection(t *testing.T) {
    testname, _ := createTestParamValue("DeleteProtection", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteProtection", "storage", "string").(string)
    e := initializeTest("DeleteProtection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtection method with invalid name
*/
func TestDeleteProtectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteProtection", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteProtection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteProtection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtection method with invalid password
*/
func TestDeleteProtectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteProtection", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteProtection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteProtection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtection method with invalid folder
*/
func TestDeleteProtectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteProtection", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteProtection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteProtection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtection method with invalid storage
*/
func TestDeleteProtectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteProtection", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteProtection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteProtection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtectionOnline method
*/
func TestDeleteProtectionOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteProtectionOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteProtectionOnline", "password", "string").(string)
    e := initializeTest("DeleteProtectionOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtectionOnline method with invalid document
*/
func TestDeleteProtectionOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteProtectionOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteProtectionOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DeleteProtectionOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DeleteProtectionOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtectionOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteProtectionOnline method with invalid password
*/
func TestDeleteProtectionOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteProtectionOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteProtectionOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteProtectionOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteProtectionOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteProtectionOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method
*/
func TestDeleteSection(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)
    e := initializeTest("DeleteSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid name
*/
func TestDeleteSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid sectionIndex
*/
func TestDeleteSectionInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "DeleteSection", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSection", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid withSlides
*/
func TestDeleteSectionInvalidWithSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)
    testwithSlides = new(bool)

    invalidValue := invalidizeTestParamValue(testwithSlides, "DeleteSection", "withSlides", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithSlides = nullValue
    } else {
        *testwithSlides, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteSection", "withSlides", testwithSlides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "withSlides", testwithSlides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid password
*/
func TestDeleteSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid folder
*/
func TestDeleteSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid storage
*/
func TestDeleteSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method
*/
func TestDeleteSections(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)
    e := initializeTest("DeleteSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid name
*/
func TestDeleteSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid sections
*/
func TestDeleteSectionsInvalidSections(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsections, "DeleteSections", "sections", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testsections = nullValue
    } else {
        testsections, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSections", "sections", testsections)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "sections", testsections, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid withSlides
*/
func TestDeleteSectionsInvalidWithSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)
    testwithSlides = new(bool)

    invalidValue := invalidizeTestParamValue(testwithSlides, "DeleteSections", "withSlides", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithSlides = nullValue
    } else {
        *testwithSlides, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteSections", "withSlides", testwithSlides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "withSlides", testwithSlides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid password
*/
func TestDeleteSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid folder
*/
func TestDeleteSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid storage
*/
func TestDeleteSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method
*/
func TestDeleteShape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)
    e := initializeTest("DeleteShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid name
*/
func TestDeleteShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid slideIndex
*/
func TestDeleteShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid shapeIndex
*/
func TestDeleteShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid password
*/
func TestDeleteShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid folder
*/
func TestDeleteShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteShape method with invalid storage
*/
func TestDeleteShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method
*/
func TestDeleteShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)
    e := initializeTest("DeleteShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid name
*/
func TestDeleteShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid slideIndex
*/
func TestDeleteShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid shapes
*/
func TestDeleteShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid password
*/
func TestDeleteShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid folder
*/
func TestDeleteShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteShapes method with invalid storage
*/
func TestDeleteShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method
*/
func TestDeleteSlide(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)
    e := initializeTest("DeleteSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method with invalid name
*/
func TestDeleteSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method with invalid slideIndex
*/
func TestDeleteSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method with invalid password
*/
func TestDeleteSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method with invalid folder
*/
func TestDeleteSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlide method with invalid storage
*/
func TestDeleteSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method
*/
func TestDeleteSlideComments(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)
    e := initializeTest("DeleteSlideComments", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid name
*/
func TestDeleteSlideCommentsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideComments", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideComments", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid slideIndex
*/
func TestDeleteSlideCommentsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideComments", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideComments", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid author
*/
func TestDeleteSlideCommentsInvalidAuthor(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testauthor, "DeleteSlideComments", "author", "string")
    if (invalidValue == nil) {
        var nullValue string
        testauthor = nullValue
    } else {
        testauthor, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideComments", "author", testauthor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "author", testauthor, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid password
*/
func TestDeleteSlideCommentsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideComments", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideComments", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid folder
*/
func TestDeleteSlideCommentsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideComments", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideComments", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
   Test for SlidesApi.DeleteSlideComments method with invalid storage
*/
func TestDeleteSlideCommentsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideComments", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideComments", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideComments", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideComments", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideComments(testname, testslideIndex, testauthor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideComments", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
   Test for SlidesApi.DeleteSlideCommentsOnline method
*/
func TestDeleteSlideCommentsOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlideCommentsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DeleteSlideCommentsOnline", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideCommentsOnline", "password", "string").(string)
    e := initializeTest("DeleteSlideCommentsOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteSlideCommentsOnline(testdocument, testslideIndex, testauthor, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
   Test for SlidesApi.DeleteSlideCommentsOnline method with invalid document
*/
func TestDeleteSlideCommentsOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlideCommentsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DeleteSlideCommentsOnline", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DeleteSlideCommentsOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DeleteSlideCommentsOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideCommentsOnline(testdocument, testslideIndex, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideCommentsOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
   Test for SlidesApi.DeleteSlideCommentsOnline method with invalid slideIndex
*/
func TestDeleteSlideCommentsOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlideCommentsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DeleteSlideCommentsOnline", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideCommentsOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideCommentsOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideCommentsOnline(testdocument, testslideIndex, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideCommentsOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
   Test for SlidesApi.DeleteSlideCommentsOnline method with invalid author
*/
func TestDeleteSlideCommentsOnlineInvalidAuthor(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlideCommentsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DeleteSlideCommentsOnline", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testauthor, "DeleteSlideCommentsOnline", "author", "string")
    if (invalidValue == nil) {
        var nullValue string
        testauthor = nullValue
    } else {
        testauthor, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideCommentsOnline", "author", testauthor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideCommentsOnline(testdocument, testslideIndex, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideCommentsOnline", "author", testauthor, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
   Test for SlidesApi.DeleteSlideCommentsOnline method with invalid password
*/
func TestDeleteSlideCommentsOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlideCommentsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DeleteSlideCommentsOnline", "slideIndex", "int32").(int32)
    testauthor, _ := createTestParamValue("DeleteSlideCommentsOnline", "author", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlideCommentsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideCommentsOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideCommentsOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlideCommentsOnline(testdocument, testslideIndex, testauthor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideCommentsOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method
*/
func TestDeleteSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)
    e := initializeTest("DeleteSlides", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method with invalid name
*/
func TestDeleteSlidesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlides", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlides", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlides", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method with invalid slides
*/
func TestDeleteSlidesInvalidSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslides, "DeleteSlides", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSlides", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlides", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method with invalid password
*/
func TestDeleteSlidesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlides", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlides", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlides", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method with invalid folder
*/
func TestDeleteSlidesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlides", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlides", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlides", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlides method with invalid storage
*/
func TestDeleteSlidesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlides", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlides", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlides", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlides", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlides", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method
*/
func TestDeleteSubshape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)
    e := initializeTest("DeleteSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid name
*/
func TestDeleteSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid slideIndex
*/
func TestDeleteSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid path
*/
func TestDeleteSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid shapeIndex
*/
func TestDeleteSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid password
*/
func TestDeleteSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid folder
*/
func TestDeleteSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshape method with invalid storage
*/
func TestDeleteSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method
*/
func TestDeleteSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("DeleteSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid name
*/
func TestDeleteSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid slideIndex
*/
func TestDeleteSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid path
*/
func TestDeleteSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid shapeIndex
*/
func TestDeleteSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid paragraphIndex
*/
func TestDeleteSubshapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid password
*/
func TestDeleteSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid folder
*/
func TestDeleteSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid storage
*/
func TestDeleteSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method
*/
func TestDeleteSubshapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteSubshapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid name
*/
func TestDeleteSubshapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid slideIndex
*/
func TestDeleteSubshapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid path
*/
func TestDeleteSubshapeParagraphsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapeParagraphs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid shapeIndex
*/
func TestDeleteSubshapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid paragraphs
*/
func TestDeleteSubshapeParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteSubshapeParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid password
*/
func TestDeleteSubshapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid folder
*/
func TestDeleteSubshapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid storage
*/
func TestDeleteSubshapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method
*/
func TestDeleteSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)
    e := initializeTest("DeleteSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid name
*/
func TestDeleteSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid slideIndex
*/
func TestDeleteSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid path
*/
func TestDeleteSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid shapeIndex
*/
func TestDeleteSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid paragraphIndex
*/
func TestDeleteSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid portionIndex
*/
func TestDeleteSubshapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeleteSubshapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid password
*/
func TestDeleteSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid folder
*/
func TestDeleteSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid storage
*/
func TestDeleteSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method
*/
func TestDeleteSubshapePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)
    e := initializeTest("DeleteSubshapePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid name
*/
func TestDeleteSubshapePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid slideIndex
*/
func TestDeleteSubshapePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid path
*/
func TestDeleteSubshapePortionsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapePortions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid shapeIndex
*/
func TestDeleteSubshapePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid paragraphIndex
*/
func TestDeleteSubshapePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid portions
*/
func TestDeleteSubshapePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeleteSubshapePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSubshapePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid password
*/
func TestDeleteSubshapePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid folder
*/
func TestDeleteSubshapePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid storage
*/
func TestDeleteSubshapePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method
*/
func TestDeleteSubshapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)
    e := initializeTest("DeleteSubshapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid name
*/
func TestDeleteSubshapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid slideIndex
*/
func TestDeleteSubshapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid path
*/
func TestDeleteSubshapesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapes", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapes", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid shapes
*/
func TestDeleteSubshapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteSubshapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSubshapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid password
*/
func TestDeleteSubshapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid folder
*/
func TestDeleteSubshapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapes method with invalid storage
*/
func TestDeleteSubshapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method
*/
func TestDeleteWatermark(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)
    e := initializeTest("DeleteWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid name
*/
func TestDeleteWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid shapeName
*/
func TestDeleteWatermarkInvalidShapeName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeName, "DeleteWatermark", "shapeName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testshapeName = nullValue
    } else {
        testshapeName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "shapeName", testshapeName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "shapeName", testshapeName, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid password
*/
func TestDeleteWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid folder
*/
func TestDeleteWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid storage
*/
func TestDeleteWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermarkOnline method
*/
func TestDeleteWatermarkOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteWatermarkOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("DeleteWatermarkOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermarkOnline", "password", "string").(string)
    e := initializeTest("DeleteWatermarkOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermarkOnline method with invalid document
*/
func TestDeleteWatermarkOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteWatermarkOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("DeleteWatermarkOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DeleteWatermarkOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DeleteWatermarkOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermarkOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermarkOnline method with invalid shapeName
*/
func TestDeleteWatermarkOnlineInvalidShapeName(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteWatermarkOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("DeleteWatermarkOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeName, "DeleteWatermarkOnline", "shapeName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testshapeName = nullValue
    } else {
        testshapeName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermarkOnline", "shapeName", testshapeName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermarkOnline", "shapeName", testshapeName, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermarkOnline method with invalid password
*/
func TestDeleteWatermarkOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteWatermarkOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("DeleteWatermarkOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteWatermarkOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermarkOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermarkOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method
*/
func TestDownloadFile(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)
    e := initializeTest("DownloadFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid path
*/
func TestDownloadFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DownloadFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid storageName
*/
func TestDownloadFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "DownloadFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid versionId
*/
func TestDownloadFileInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "DownloadFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method
*/
func TestDownloadImage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)
    e := initializeTest("DownloadImage", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid name
*/
func TestDownloadImageInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadImage", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImage", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid index
*/
func TestDownloadImageInvalidIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "DownloadImage", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadImage", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid format
*/
func TestDownloadImageInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadImage", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImage", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid password
*/
func TestDownloadImageInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImage", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImage", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid folder
*/
func TestDownloadImageInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadImage", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImage", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImage method with invalid storage
*/
func TestDownloadImageInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImage", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImage", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImage", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImage", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImage", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImage", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadImage", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImage", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImage", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method
*/
func TestDownloadImageDefaultFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)
    e := initializeTest("DownloadImageDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method with invalid name
*/
func TestDownloadImageDefaultFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadImageDefaultFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageDefaultFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method with invalid index
*/
func TestDownloadImageDefaultFormatInvalidIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "DownloadImageDefaultFormat", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadImageDefaultFormat", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormat", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method with invalid password
*/
func TestDownloadImageDefaultFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImageDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method with invalid folder
*/
func TestDownloadImageDefaultFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadImageDefaultFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageDefaultFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormat method with invalid storage
*/
func TestDownloadImageDefaultFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImageDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImageDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImageDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadImageDefaultFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageDefaultFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormatOnline method
*/
func TestDownloadImageDefaultFormatOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "password", "string").(string)
    e := initializeTest("DownloadImageDefaultFormatOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormatOnline method with invalid document
*/
func TestDownloadImageDefaultFormatOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadImageDefaultFormatOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadImageDefaultFormatOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormatOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormatOnline method with invalid index
*/
func TestDownloadImageDefaultFormatOnlineInvalidIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "DownloadImageDefaultFormatOnline", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadImageDefaultFormatOnline", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormatOnline", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.DownloadImageDefaultFormatOnline method with invalid password
*/
func TestDownloadImageDefaultFormatOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("DownloadImageDefaultFormatOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImageDefaultFormatOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageDefaultFormatOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageDefaultFormatOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImageOnline method
*/
func TestDownloadImageOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageOnline", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImageOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImageOnline", "password", "string").(string)
    e := initializeTest("DownloadImageOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImageOnline method with invalid document
*/
func TestDownloadImageOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageOnline", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImageOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImageOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadImageOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadImageOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImageOnline method with invalid index
*/
func TestDownloadImageOnlineInvalidIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageOnline", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImageOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImageOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "DownloadImageOnline", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadImageOnline", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageOnline", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImageOnline method with invalid format
*/
func TestDownloadImageOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageOnline", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImageOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImageOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadImageOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.DownloadImageOnline method with invalid password
*/
func TestDownloadImageOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImageOnline", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("DownloadImageOnline", "index", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadImageOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImageOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImageOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImageOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImageOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method
*/
func TestDownloadImages(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)
    e := initializeTest("DownloadImages", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method with invalid name
*/
func TestDownloadImagesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadImages", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImages", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImages", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method with invalid format
*/
func TestDownloadImagesInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadImages", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImages", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImages", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method with invalid password
*/
func TestDownloadImagesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImages", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImages", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImages", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method with invalid folder
*/
func TestDownloadImagesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadImages", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImages", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImages", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.DownloadImages method with invalid storage
*/
func TestDownloadImagesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImages", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadImages", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadImages", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImages", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImages", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormat method
*/
func TestDownloadImagesDefaultFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImagesDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImagesDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImagesDefaultFormat", "storage", "string").(string)
    e := initializeTest("DownloadImagesDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormat method with invalid name
*/
func TestDownloadImagesDefaultFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImagesDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImagesDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImagesDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadImagesDefaultFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesDefaultFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormat method with invalid password
*/
func TestDownloadImagesDefaultFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImagesDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImagesDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImagesDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImagesDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormat method with invalid folder
*/
func TestDownloadImagesDefaultFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImagesDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImagesDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImagesDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadImagesDefaultFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesDefaultFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormat method with invalid storage
*/
func TestDownloadImagesDefaultFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadImagesDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadImagesDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadImagesDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadImagesDefaultFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesDefaultFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormatOnline method
*/
func TestDownloadImagesDefaultFormatOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "password", "string").(string)
    e := initializeTest("DownloadImagesDefaultFormatOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormatOnline method with invalid document
*/
func TestDownloadImagesDefaultFormatOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadImagesDefaultFormatOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadImagesDefaultFormatOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormatOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.DownloadImagesDefaultFormatOnline method with invalid password
*/
func TestDownloadImagesDefaultFormatOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DownloadImagesDefaultFormatOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImagesDefaultFormatOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesDefaultFormatOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesDefaultFormatOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.DownloadImagesOnline method
*/
func TestDownloadImagesOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("DownloadImagesOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesOnline", "password", "string").(string)
    e := initializeTest("DownloadImagesOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.DownloadImagesOnline method with invalid document
*/
func TestDownloadImagesOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("DownloadImagesOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadImagesOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadImagesOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.DownloadImagesOnline method with invalid format
*/
func TestDownloadImagesOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("DownloadImagesOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadImagesOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.DownloadImagesOnline method with invalid password
*/
func TestDownloadImagesOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadImagesOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("DownloadImagesOnline", "format", "string").(string)
    testpassword, _ := createTestParamValue("DownloadImagesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadImagesOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadImagesOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadImagesOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method
*/
func TestDownloadNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)
    e := initializeTest("DownloadNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid name
*/
func TestDownloadNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid slideIndex
*/
func TestDownloadNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid format
*/
func TestDownloadNotesSlideInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadNotesSlide", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid width
*/
func TestDownloadNotesSlideInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "DownloadNotesSlide", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlide", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid height
*/
func TestDownloadNotesSlideInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "DownloadNotesSlide", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlide", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid password
*/
func TestDownloadNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid folder
*/
func TestDownloadNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid storage
*/
func TestDownloadNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlide method with invalid fontsFolder
*/
func TestDownloadNotesSlideInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadNotesSlide", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlide", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlide", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method
*/
func TestDownloadNotesSlideOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)
    e := initializeTest("DownloadNotesSlideOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid document
*/
func TestDownloadNotesSlideOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadNotesSlideOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadNotesSlideOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid slideIndex
*/
func TestDownloadNotesSlideOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadNotesSlideOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlideOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid format
*/
func TestDownloadNotesSlideOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadNotesSlideOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid width
*/
func TestDownloadNotesSlideOnlineInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "DownloadNotesSlideOnline", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlideOnline", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid height
*/
func TestDownloadNotesSlideOnlineInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "DownloadNotesSlideOnline", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlideOnline", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid password
*/
func TestDownloadNotesSlideOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadNotesSlideOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.DownloadNotesSlideOnline method with invalid fontsFolder
*/
func TestDownloadNotesSlideOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadNotesSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadNotesSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadNotesSlideOnline", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadNotesSlideOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method
*/
func TestDownloadNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)
    e := initializeTest("DownloadNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid name
*/
func TestDownloadNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid slideIndex
*/
func TestDownloadNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid shapeIndex
*/
func TestDownloadNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DownloadNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid format
*/
func TestDownloadNotesSlideShapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadNotesSlideShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid options
*/
func TestDownloadNotesSlideShapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "DownloadNotesSlideShape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("DownloadNotesSlideShape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid scaleX
*/
func TestDownloadNotesSlideShapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "DownloadNotesSlideShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadNotesSlideShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid scaleY
*/
func TestDownloadNotesSlideShapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "DownloadNotesSlideShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadNotesSlideShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid bounds
*/
func TestDownloadNotesSlideShapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "DownloadNotesSlideShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid password
*/
func TestDownloadNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid folder
*/
func TestDownloadNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid storage
*/
func TestDownloadNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadNotesSlideShape method with invalid fontsFolder
*/
func TestDownloadNotesSlideShapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadNotesSlideShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadNotesSlideShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadNotesSlideShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadNotesSlideShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method
*/
func TestDownloadPresentation(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)
    e := initializeTest("DownloadPresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid name
*/
func TestDownloadPresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testname, "DownloadPresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid format
*/
func TestDownloadPresentationInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadPresentation", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid options
*/
func TestDownloadPresentationInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testoptions, "DownloadPresentation", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("DownloadPresentation", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid password
*/
func TestDownloadPresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadPresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid folder
*/
func TestDownloadPresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadPresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid storage
*/
func TestDownloadPresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadPresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid fontsFolder
*/
func TestDownloadPresentationInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadPresentation", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadPresentation", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.DownloadPresentation method with invalid slides
*/
func TestDownloadPresentationInvalidSlides(t *testing.T) {
    testname, _ := createTestParamValue("DownloadPresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("DownloadPresentation", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadPresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("DownloadPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadPresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadPresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("DownloadPresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testslides, "DownloadPresentation", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("DownloadPresentation", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadPresentation", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method
*/
func TestDownloadShape(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)
    e := initializeTest("DownloadShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid name
*/
func TestDownloadShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid slideIndex
*/
func TestDownloadShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid shapeIndex
*/
func TestDownloadShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DownloadShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid format
*/
func TestDownloadShapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid options
*/
func TestDownloadShapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "DownloadShape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("DownloadShape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid scaleX
*/
func TestDownloadShapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "DownloadShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid scaleY
*/
func TestDownloadShapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "DownloadShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid bounds
*/
func TestDownloadShapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "DownloadShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid password
*/
func TestDownloadShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid folder
*/
func TestDownloadShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid storage
*/
func TestDownloadShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShape method with invalid fontsFolder
*/
func TestDownloadShapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method
*/
func TestDownloadShapeOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)
    e := initializeTest("DownloadShapeOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid document
*/
func TestDownloadShapeOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadShapeOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadShapeOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid slideIndex
*/
func TestDownloadShapeOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadShapeOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadShapeOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid shapeIndex
*/
func TestDownloadShapeOnlineInvalidShapeIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DownloadShapeOnline", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadShapeOnline", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid format
*/
func TestDownloadShapeOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadShapeOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShapeOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid scaleX
*/
func TestDownloadShapeOnlineInvalidScaleX(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "DownloadShapeOnline", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadShapeOnline", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid scaleY
*/
func TestDownloadShapeOnlineInvalidScaleY(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "DownloadShapeOnline", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadShapeOnline", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid bounds
*/
func TestDownloadShapeOnlineInvalidBounds(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "DownloadShapeOnline", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShapeOnline", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid password
*/
func TestDownloadShapeOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadShapeOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShapeOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid storage
*/
func TestDownloadShapeOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadShapeOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShapeOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.DownloadShapeOnline method with invalid fontsFolder
*/
func TestDownloadShapeOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DownloadShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadShapeOnline", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadShapeOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadShapeOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadShapeOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method
*/
func TestDownloadSlide(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)
    e := initializeTest("DownloadSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid name
*/
func TestDownloadSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid slideIndex
*/
func TestDownloadSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid format
*/
func TestDownloadSlideInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadSlide", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid options
*/
func TestDownloadSlideInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "DownloadSlide", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("DownloadSlide", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid width
*/
func TestDownloadSlideInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "DownloadSlide", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlide", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid height
*/
func TestDownloadSlideInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "DownloadSlide", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlide", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid password
*/
func TestDownloadSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid folder
*/
func TestDownloadSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid storage
*/
func TestDownloadSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlide method with invalid fontsFolder
*/
func TestDownloadSlideInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlide", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadSlide", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlide", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlide", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method
*/
func TestDownloadSlideOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)
    e := initializeTest("DownloadSlideOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid document
*/
func TestDownloadSlideOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DownloadSlideOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DownloadSlideOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid slideIndex
*/
func TestDownloadSlideOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadSlideOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlideOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid format
*/
func TestDownloadSlideOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadSlideOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlideOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid width
*/
func TestDownloadSlideOnlineInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "DownloadSlideOnline", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlideOnline", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid height
*/
func TestDownloadSlideOnlineInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "DownloadSlideOnline", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSlideOnline", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid password
*/
func TestDownloadSlideOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadSlideOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlideOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid storage
*/
func TestDownloadSlideOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadSlideOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlideOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.DownloadSlideOnline method with invalid fontsFolder
*/
func TestDownloadSlideOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("DownloadSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("DownloadSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSlideOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("DownloadSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("DownloadSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("DownloadSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadSlideOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSlideOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSlideOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method
*/
func TestDownloadSubshape(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)
    e := initializeTest("DownloadSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid name
*/
func TestDownloadSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DownloadSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid slideIndex
*/
func TestDownloadSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DownloadSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid path
*/
func TestDownloadSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DownloadSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid shapeIndex
*/
func TestDownloadSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DownloadSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DownloadSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid format
*/
func TestDownloadSubshapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "DownloadSubshape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid options
*/
func TestDownloadSubshapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "DownloadSubshape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("DownloadSubshape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid scaleX
*/
func TestDownloadSubshapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "DownloadSubshape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadSubshape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid scaleY
*/
func TestDownloadSubshapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "DownloadSubshape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("DownloadSubshape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid bounds
*/
func TestDownloadSubshapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "DownloadSubshape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid password
*/
func TestDownloadSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DownloadSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid folder
*/
func TestDownloadSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DownloadSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid storage
*/
func TestDownloadSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DownloadSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.DownloadSubshape method with invalid fontsFolder
*/
func TestDownloadSubshapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("DownloadSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DownloadSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DownloadSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DownloadSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("DownloadSubshape", "format", "string").(string)
    testoptions, _ := createTestParamValue("DownloadSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("DownloadSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("DownloadSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("DownloadSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("DownloadSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DownloadSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DownloadSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("DownloadSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "DownloadSubshape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadSubshape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadSubshape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method
*/
func TestGetAnimation(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)
    e := initializeTest("GetAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid name
*/
func TestGetAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid slideIndex
*/
func TestGetAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid shapeIndex
*/
func TestGetAnimationInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)
    testshapeIndex = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetAnimation", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeIndex = nullValue
    } else {
        *testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetAnimation", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid password
*/
func TestGetAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid folder
*/
func TestGetAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetAnimation method with invalid storage
*/
func TestGetAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get API info.
   Test for SlidesApi.GetApiInfo method
*/
func TestGetApiInfo(t *testing.T) {
    e := initializeTest("GetApiInfo", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetApiInfo()
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method
*/
func TestGetBackground(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)
    e := initializeTest("GetBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method with invalid name
*/
func TestGetBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method with invalid slideIndex
*/
func TestGetBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method with invalid password
*/
func TestGetBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method with invalid folder
*/
func TestGetBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetBackground method with invalid storage
*/
func TestGetBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method
*/
func TestGetColorScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)
    e := initializeTest("GetColorScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method with invalid name
*/
func TestGetColorSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetColorScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetColorScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetColorScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method with invalid slideIndex
*/
func TestGetColorSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetColorScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetColorScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetColorScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method with invalid password
*/
func TestGetColorSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetColorScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetColorScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetColorScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method with invalid folder
*/
func TestGetColorSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetColorScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetColorScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetColorScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetColorScheme method with invalid storage
*/
func TestGetColorSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetColorScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetColorScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetColorScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get disc usage
   Test for SlidesApi.GetDiscUsage method
*/
func TestGetDiscUsage(t *testing.T) {
    teststorageName, _ := createTestParamValue("GetDiscUsage", "storageName", "string").(string)
    e := initializeTest("GetDiscUsage", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDiscUsage(teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get disc usage
   Test for SlidesApi.GetDiscUsage method with invalid storageName
*/
func TestGetDiscUsageInvalidStorageName(t *testing.T) {
    teststorageName, _ := createTestParamValue("GetDiscUsage", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetDiscUsage", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetDiscUsage", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDiscUsage(teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDiscUsage", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetDocumentProperties method
*/
func TestGetDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperties", "storage", "string").(string)
    e := initializeTest("GetDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetDocumentProperties method with invalid name
*/
func TestGetDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetDocumentProperties method with invalid password
*/
func TestGetDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetDocumentProperties method with invalid folder
*/
func TestGetDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetDocumentProperties method with invalid storage
*/
func TestGetDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method
*/
func TestGetDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)
    e := initializeTest("GetDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method with invalid name
*/
func TestGetDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method with invalid propertyName
*/
func TestGetDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "GetDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method with invalid password
*/
func TestGetDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method with invalid folder
*/
func TestGetDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetDocumentProperty method with invalid storage
*/
func TestGetDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method
*/
func TestGetFileVersions(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)
    e := initializeTest("GetFileVersions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFileVersions(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method with invalid path
*/
func TestGetFileVersionsInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetFileVersions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetFileVersions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFileVersions(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFileVersions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method with invalid storageName
*/
func TestGetFileVersionsInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetFileVersions", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetFileVersions", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFileVersions(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFileVersions", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method
*/
func TestGetFilesList(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)
    e := initializeTest("GetFilesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFilesList(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method with invalid path
*/
func TestGetFilesListInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetFilesList", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetFilesList", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFilesList(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFilesList", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method with invalid storageName
*/
func TestGetFilesListInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetFilesList", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetFilesList", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFilesList(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFilesList", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method
*/
func TestGetFontScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)
    e := initializeTest("GetFontScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method with invalid name
*/
func TestGetFontSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetFontScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetFontScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFontScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method with invalid slideIndex
*/
func TestGetFontSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetFontScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetFontScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFontScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method with invalid password
*/
func TestGetFontSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetFontScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetFontScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFontScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method with invalid folder
*/
func TestGetFontSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetFontScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetFontScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFontScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetFontScheme method with invalid storage
*/
func TestGetFontSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetFontScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetFontScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFontScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method
*/
func TestGetFormatScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)
    e := initializeTest("GetFormatScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method with invalid name
*/
func TestGetFormatSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetFormatScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetFormatScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFormatScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method with invalid slideIndex
*/
func TestGetFormatSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetFormatScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetFormatScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFormatScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method with invalid password
*/
func TestGetFormatSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetFormatScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetFormatScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFormatScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method with invalid folder
*/
func TestGetFormatSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetFormatScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetFormatScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFormatScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetFormatScheme method with invalid storage
*/
func TestGetFormatSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetFormatScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetFormatScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFormatScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method
*/
func TestGetLayoutSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)
    e := initializeTest("GetLayoutSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid name
*/
func TestGetLayoutSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetLayoutSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid slideIndex
*/
func TestGetLayoutSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetLayoutSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetLayoutSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid password
*/
func TestGetLayoutSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetLayoutSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid folder
*/
func TestGetLayoutSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetLayoutSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid storage
*/
func TestGetLayoutSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetLayoutSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlides method
*/
func TestGetLayoutSlides(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlides", "storage", "string").(string)
    e := initializeTest("GetLayoutSlides", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlides method with invalid name
*/
func TestGetLayoutSlidesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetLayoutSlides", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlides", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlides", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlides method with invalid password
*/
func TestGetLayoutSlidesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetLayoutSlides", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlides", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlides", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlides method with invalid folder
*/
func TestGetLayoutSlidesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetLayoutSlides", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlides", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlides", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlides method with invalid storage
*/
func TestGetLayoutSlidesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetLayoutSlides", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlides", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlides", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method
*/
func TestGetMasterSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)
    e := initializeTest("GetMasterSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid name
*/
func TestGetMasterSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetMasterSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid slideIndex
*/
func TestGetMasterSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetMasterSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetMasterSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid password
*/
func TestGetMasterSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetMasterSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid folder
*/
func TestGetMasterSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetMasterSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid storage
*/
func TestGetMasterSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetMasterSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlides method
*/
func TestGetMasterSlides(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlides", "storage", "string").(string)
    e := initializeTest("GetMasterSlides", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlides method with invalid name
*/
func TestGetMasterSlidesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetMasterSlides", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlides", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlides", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlides method with invalid password
*/
func TestGetMasterSlidesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetMasterSlides", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlides", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlides", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlides method with invalid folder
*/
func TestGetMasterSlidesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetMasterSlides", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlides", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlides", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlides method with invalid storage
*/
func TestGetMasterSlidesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetMasterSlides", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlides", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlides", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method
*/
func TestGetNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)
    e := initializeTest("GetNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid name
*/
func TestGetNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid slideIndex
*/
func TestGetNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid password
*/
func TestGetNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid folder
*/
func TestGetNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid storage
*/
func TestGetNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method
*/
func TestGetNotesSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("GetNotesSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid name
*/
func TestGetNotesSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid slideIndex
*/
func TestGetNotesSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid password
*/
func TestGetNotesSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid folder
*/
func TestGetNotesSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid storage
*/
func TestGetNotesSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlideOnline method
*/
func TestGetNotesSlideOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("GetNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("GetNotesSlideOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideOnline", "password", "string").(string)
    e := initializeTest("GetNotesSlideOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlideOnline method with invalid document
*/
func TestGetNotesSlideOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("GetNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("GetNotesSlideOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "GetNotesSlideOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("GetNotesSlideOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlideOnline method with invalid slideIndex
*/
func TestGetNotesSlideOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("GetNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("GetNotesSlideOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlideOnline method with invalid password
*/
func TestGetNotesSlideOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("GetNotesSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("GetNotesSlideOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method
*/
func TestGetNotesSlideParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)
    e := initializeTest("GetNotesSlideParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid name
*/
func TestGetNotesSlideParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid slideIndex
*/
func TestGetNotesSlideParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid shapeIndex
*/
func TestGetNotesSlideParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid paragraphIndex
*/
func TestGetNotesSlideParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlideParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid password
*/
func TestGetNotesSlideParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid folder
*/
func TestGetNotesSlideParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideParagraph method with invalid storage
*/
func TestGetNotesSlideParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method
*/
func TestGetNotesSlideParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)
    e := initializeTest("GetNotesSlideParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid name
*/
func TestGetNotesSlideParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid slideIndex
*/
func TestGetNotesSlideParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid shapeIndex
*/
func TestGetNotesSlideParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid password
*/
func TestGetNotesSlideParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid folder
*/
func TestGetNotesSlideParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideParagraphs method with invalid storage
*/
func TestGetNotesSlideParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method
*/
func TestGetNotesSlidePortion(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)
    e := initializeTest("GetNotesSlidePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid name
*/
func TestGetNotesSlidePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlidePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid slideIndex
*/
func TestGetNotesSlidePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlidePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid shapeIndex
*/
func TestGetNotesSlidePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlidePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid paragraphIndex
*/
func TestGetNotesSlidePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlidePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid portionIndex
*/
func TestGetNotesSlidePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetNotesSlidePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid password
*/
func TestGetNotesSlidePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlidePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid folder
*/
func TestGetNotesSlidePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlidePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlidePortion method with invalid storage
*/
func TestGetNotesSlidePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlidePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method
*/
func TestGetNotesSlidePortions(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)
    e := initializeTest("GetNotesSlidePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid name
*/
func TestGetNotesSlidePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlidePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid slideIndex
*/
func TestGetNotesSlidePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlidePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid shapeIndex
*/
func TestGetNotesSlidePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlidePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid paragraphIndex
*/
func TestGetNotesSlidePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlidePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlidePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid password
*/
func TestGetNotesSlidePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlidePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid folder
*/
func TestGetNotesSlidePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlidePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlidePortions method with invalid storage
*/
func TestGetNotesSlidePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlidePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlidePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlidePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method
*/
func TestGetNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid name
*/
func TestGetNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid slideIndex
*/
func TestGetNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid shapeIndex
*/
func TestGetNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid password
*/
func TestGetNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid folder
*/
func TestGetNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid storage
*/
func TestGetNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method
*/
func TestGetNotesSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid name
*/
func TestGetNotesSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid slideIndex
*/
func TestGetNotesSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid password
*/
func TestGetNotesSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid folder
*/
func TestGetNotesSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid storage
*/
func TestGetNotesSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method
*/
func TestGetParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)
    e := initializeTest("GetParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid name
*/
func TestGetParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid slideIndex
*/
func TestGetParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid shapeIndex
*/
func TestGetParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid paragraphIndex
*/
func TestGetParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid password
*/
func TestGetParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid folder
*/
func TestGetParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetParagraph method with invalid storage
*/
func TestGetParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method
*/
func TestGetParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)
    e := initializeTest("GetParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid name
*/
func TestGetParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid slideIndex
*/
func TestGetParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid shapeIndex
*/
func TestGetParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid password
*/
func TestGetParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid folder
*/
func TestGetParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetParagraphs method with invalid storage
*/
func TestGetParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method
*/
func TestGetPlaceholder(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)
    e := initializeTest("GetPlaceholder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid name
*/
func TestGetPlaceholderInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPlaceholder", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholder", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid slideIndex
*/
func TestGetPlaceholderInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetPlaceholder", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPlaceholder", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid placeholderIndex
*/
func TestGetPlaceholderInvalidPlaceholderIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testplaceholderIndex, "GetPlaceholder", "placeholderIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testplaceholderIndex = nullValue
    } else {
        testplaceholderIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPlaceholder", "placeholderIndex", testplaceholderIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "placeholderIndex", testplaceholderIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid password
*/
func TestGetPlaceholderInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPlaceholder", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholder", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid folder
*/
func TestGetPlaceholderInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPlaceholder", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholder", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetPlaceholder method with invalid storage
*/
func TestGetPlaceholderInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPlaceholder", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholder", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholder", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method
*/
func TestGetPlaceholders(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)
    e := initializeTest("GetPlaceholders", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method with invalid name
*/
func TestGetPlaceholdersInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPlaceholders", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholders", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholders", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method with invalid slideIndex
*/
func TestGetPlaceholdersInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetPlaceholders", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPlaceholders", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholders", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method with invalid password
*/
func TestGetPlaceholdersInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPlaceholders", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholders", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholders", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method with invalid folder
*/
func TestGetPlaceholdersInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPlaceholders", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholders", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholders", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetPlaceholders method with invalid storage
*/
func TestGetPlaceholdersInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPlaceholders", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPlaceholders", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPlaceholders", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method
*/
func TestGetPortion(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)
    e := initializeTest("GetPortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid name
*/
func TestGetPortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid slideIndex
*/
func TestGetPortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetPortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid shapeIndex
*/
func TestGetPortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetPortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid paragraphIndex
*/
func TestGetPortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetPortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid portionIndex
*/
func TestGetPortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetPortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid password
*/
func TestGetPortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid folder
*/
func TestGetPortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetPortion method with invalid storage
*/
func TestGetPortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method
*/
func TestGetPortions(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)
    e := initializeTest("GetPortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid name
*/
func TestGetPortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid slideIndex
*/
func TestGetPortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetPortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid shapeIndex
*/
func TestGetPortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetPortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid paragraphIndex
*/
func TestGetPortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetPortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetPortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid password
*/
func TestGetPortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid folder
*/
func TestGetPortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetPortions method with invalid storage
*/
func TestGetPortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetPresentation method
*/
func TestGetPresentation(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentation", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentation", "storage", "string").(string)
    e := initializeTest("GetPresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetPresentation method with invalid name
*/
func TestGetPresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentation", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetPresentation method with invalid password
*/
func TestGetPresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentation", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetPresentation method with invalid folder
*/
func TestGetPresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentation", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetPresentation method with invalid storage
*/
func TestGetPresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentation", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetPresentationImages method
*/
func TestGetPresentationImages(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentationImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationImages", "storage", "string").(string)
    e := initializeTest("GetPresentationImages", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetPresentationImages method with invalid name
*/
func TestGetPresentationImagesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentationImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPresentationImages", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationImages", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationImages", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetPresentationImages method with invalid password
*/
func TestGetPresentationImagesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentationImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPresentationImages", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationImages", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationImages", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetPresentationImages method with invalid folder
*/
func TestGetPresentationImagesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentationImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPresentationImages", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationImages", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationImages", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetPresentationImages method with invalid storage
*/
func TestGetPresentationImagesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetPresentationImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPresentationImages", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationImages", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationImages", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method
*/
func TestGetPresentationTextItems(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)
    e := initializeTest("GetPresentationTextItems", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method with invalid name
*/
func TestGetPresentationTextItemsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetPresentationTextItems", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationTextItems", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationTextItems", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method with invalid withEmpty
*/
func TestGetPresentationTextItemsInvalidWithEmpty(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)
    testwithEmpty = new(bool)

    invalidValue := invalidizeTestParamValue(testwithEmpty, "GetPresentationTextItems", "withEmpty", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithEmpty = nullValue
    } else {
        *testwithEmpty, _ = invalidValue.(bool)
    }

    e := initializeTest("GetPresentationTextItems", "withEmpty", testwithEmpty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationTextItems", "withEmpty", testwithEmpty, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method with invalid password
*/
func TestGetPresentationTextItemsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetPresentationTextItems", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationTextItems", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationTextItems", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method with invalid folder
*/
func TestGetPresentationTextItemsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetPresentationTextItems", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationTextItems", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationTextItems", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetPresentationTextItems method with invalid storage
*/
func TestGetPresentationTextItemsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetPresentationTextItems", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetPresentationTextItems", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetPresentationTextItems", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetProtectionProperties method
*/
func TestGetProtectionProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetProtectionProperties", "storage", "string").(string)
    e := initializeTest("GetProtectionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetProtectionProperties method with invalid name
*/
func TestGetProtectionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetProtectionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetProtectionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetProtectionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetProtectionProperties method with invalid password
*/
func TestGetProtectionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetProtectionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetProtectionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetProtectionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetProtectionProperties method with invalid folder
*/
func TestGetProtectionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetProtectionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetProtectionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetProtectionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetProtectionProperties method with invalid storage
*/
func TestGetProtectionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetProtectionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetProtectionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetProtectionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method
*/
func TestGetSections(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)
    e := initializeTest("GetSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid name
*/
func TestGetSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid password
*/
func TestGetSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid folder
*/
func TestGetSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid storage
*/
func TestGetSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method
*/
func TestGetShape(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)
    e := initializeTest("GetShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid name
*/
func TestGetShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid slideIndex
*/
func TestGetShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid shapeIndex
*/
func TestGetShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid password
*/
func TestGetShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid folder
*/
func TestGetShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetShape method with invalid storage
*/
func TestGetShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method
*/
func TestGetShapes(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)
    e := initializeTest("GetShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method with invalid name
*/
func TestGetShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method with invalid slideIndex
*/
func TestGetShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method with invalid password
*/
func TestGetShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method with invalid folder
*/
func TestGetShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetShapes method with invalid storage
*/
func TestGetShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method
*/
func TestGetSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)
    e := initializeTest("GetSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method with invalid name
*/
func TestGetSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method with invalid slideIndex
*/
func TestGetSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method with invalid password
*/
func TestGetSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method with invalid folder
*/
func TestGetSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlide method with invalid storage
*/
func TestGetSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method
*/
func TestGetSlideComments(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)
    e := initializeTest("GetSlideComments", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method with invalid name
*/
func TestGetSlideCommentsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideComments", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideComments", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideComments", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method with invalid slideIndex
*/
func TestGetSlideCommentsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideComments", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideComments", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideComments", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method with invalid password
*/
func TestGetSlideCommentsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideComments", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideComments", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideComments", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method with invalid folder
*/
func TestGetSlideCommentsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideComments", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideComments", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideComments", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlideComments method with invalid storage
*/
func TestGetSlideCommentsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideComments", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideComments", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideComments", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method
*/
func TestGetSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("GetSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid name
*/
func TestGetSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid slideIndex
*/
func TestGetSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid password
*/
func TestGetSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid folder
*/
func TestGetSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid storage
*/
func TestGetSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method
*/
func TestGetSlideImages(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)
    e := initializeTest("GetSlideImages", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method with invalid name
*/
func TestGetSlideImagesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideImages", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideImages", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideImages", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method with invalid slideIndex
*/
func TestGetSlideImagesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideImages", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideImages", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideImages", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method with invalid password
*/
func TestGetSlideImagesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideImages", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideImages", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideImages", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method with invalid folder
*/
func TestGetSlideImagesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideImages", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideImages", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideImages", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlideImages method with invalid storage
*/
func TestGetSlideImagesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideImages", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideImages", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideImages", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlideProperties method
*/
func TestGetSlideProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideProperties", "storage", "string").(string)
    e := initializeTest("GetSlideProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlideProperties method with invalid name
*/
func TestGetSlidePropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlideProperties method with invalid password
*/
func TestGetSlidePropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlideProperties method with invalid folder
*/
func TestGetSlidePropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlideProperties method with invalid storage
*/
func TestGetSlidePropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method
*/
func TestGetSlideTextItems(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)
    e := initializeTest("GetSlideTextItems", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid name
*/
func TestGetSlideTextItemsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideTextItems", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideTextItems", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid slideIndex
*/
func TestGetSlideTextItemsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideTextItems", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideTextItems", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid withEmpty
*/
func TestGetSlideTextItemsInvalidWithEmpty(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)
    testwithEmpty = new(bool)

    invalidValue := invalidizeTestParamValue(testwithEmpty, "GetSlideTextItems", "withEmpty", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithEmpty = nullValue
    } else {
        *testwithEmpty, _ = invalidValue.(bool)
    }

    e := initializeTest("GetSlideTextItems", "withEmpty", testwithEmpty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "withEmpty", testwithEmpty, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid password
*/
func TestGetSlideTextItemsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideTextItems", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideTextItems", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid folder
*/
func TestGetSlideTextItemsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideTextItems", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideTextItems", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlideTextItems method with invalid storage
*/
func TestGetSlideTextItemsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideTextItems", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideTextItems", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideTextItems", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlides method
*/
func TestGetSlides(t *testing.T) {
    testname, _ := createTestParamValue("GetSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlides", "storage", "string").(string)
    e := initializeTest("GetSlides", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlides method with invalid name
*/
func TestGetSlidesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlides", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlides", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlides", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlides method with invalid password
*/
func TestGetSlidesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlides", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlides", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlides", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlides method with invalid folder
*/
func TestGetSlidesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlides", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlides", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlides", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlides method with invalid storage
*/
func TestGetSlidesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlides", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlides", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlides", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlides", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method
*/
func TestGetSubshape(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)
    e := initializeTest("GetSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid name
*/
func TestGetSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid slideIndex
*/
func TestGetSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid path
*/
func TestGetSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid shapeIndex
*/
func TestGetSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid password
*/
func TestGetSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid folder
*/
func TestGetSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSubshape method with invalid storage
*/
func TestGetSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method
*/
func TestGetSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("GetSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid name
*/
func TestGetSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid slideIndex
*/
func TestGetSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid path
*/
func TestGetSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid shapeIndex
*/
func TestGetSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid paragraphIndex
*/
func TestGetSubshapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSubshapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid password
*/
func TestGetSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid folder
*/
func TestGetSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraph method with invalid storage
*/
func TestGetSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method
*/
func TestGetSubshapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)
    e := initializeTest("GetSubshapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid name
*/
func TestGetSubshapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid slideIndex
*/
func TestGetSubshapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid path
*/
func TestGetSubshapeParagraphsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapeParagraphs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid shapeIndex
*/
func TestGetSubshapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid password
*/
func TestGetSubshapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid folder
*/
func TestGetSubshapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphs method with invalid storage
*/
func TestGetSubshapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method
*/
func TestGetSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)
    e := initializeTest("GetSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid name
*/
func TestGetSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid slideIndex
*/
func TestGetSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid path
*/
func TestGetSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid shapeIndex
*/
func TestGetSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid paragraphIndex
*/
func TestGetSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid portionIndex
*/
func TestGetSubshapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetSubshapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid password
*/
func TestGetSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid folder
*/
func TestGetSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortion method with invalid storage
*/
func TestGetSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method
*/
func TestGetSubshapePortions(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)
    e := initializeTest("GetSubshapePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid name
*/
func TestGetSubshapePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid slideIndex
*/
func TestGetSubshapePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid path
*/
func TestGetSubshapePortionsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapePortions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid shapeIndex
*/
func TestGetSubshapePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid paragraphIndex
*/
func TestGetSubshapePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSubshapePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid password
*/
func TestGetSubshapePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid folder
*/
func TestGetSubshapePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapePortions method with invalid storage
*/
func TestGetSubshapePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method
*/
func TestGetSubshapes(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)
    e := initializeTest("GetSubshapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid name
*/
func TestGetSubshapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid slideIndex
*/
func TestGetSubshapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid path
*/
func TestGetSubshapesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapes", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapes", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid password
*/
func TestGetSubshapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid folder
*/
func TestGetSubshapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSubshapes method with invalid storage
*/
func TestGetSubshapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method
*/
func TestGetTheme(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)
    e := initializeTest("GetTheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method with invalid name
*/
func TestGetThemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetTheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetTheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetTheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method with invalid slideIndex
*/
func TestGetThemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetTheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetTheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetTheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method with invalid password
*/
func TestGetThemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetTheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetTheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetTheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method with invalid folder
*/
func TestGetThemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetTheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetTheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetTheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetTheme method with invalid storage
*/
func TestGetThemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetTheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetTheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetTheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetViewProperties method
*/
func TestGetViewProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetViewProperties", "storage", "string").(string)
    e := initializeTest("GetViewProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetViewProperties method with invalid name
*/
func TestGetViewPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetViewProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetViewProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetViewProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetViewProperties method with invalid password
*/
func TestGetViewPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetViewProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetViewProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetViewProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetViewProperties method with invalid folder
*/
func TestGetViewPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetViewProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetViewProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetViewProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetViewProperties method with invalid storage
*/
func TestGetViewPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetViewProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetViewProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetViewProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method
*/
func TestImportFromHtml(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)
    e := initializeTest("ImportFromHtml", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method with invalid name
*/
func TestImportFromHtmlInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "ImportFromHtml", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromHtml", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromHtml", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method with invalid html
*/
func TestImportFromHtmlInvalidHtml(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testhtml, "ImportFromHtml", "html", "string")
    if (invalidValue == nil) {
        var nullValue string
        testhtml = nullValue
    } else {
        testhtml, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromHtml", "html", testhtml)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromHtml", "html", testhtml, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method with invalid password
*/
func TestImportFromHtmlInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ImportFromHtml", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromHtml", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromHtml", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method with invalid folder
*/
func TestImportFromHtmlInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "ImportFromHtml", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromHtml", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromHtml", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.ImportFromHtml method with invalid storage
*/
func TestImportFromHtmlInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("ImportFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("ImportFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "ImportFromHtml", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromHtml", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromHtml", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method
*/
func TestImportFromPdf(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)
    e := initializeTest("ImportFromPdf", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method with invalid name
*/
func TestImportFromPdfInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "ImportFromPdf", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromPdf", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromPdf", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method with invalid pdf
*/
func TestImportFromPdfInvalidPdf(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpdf, "ImportFromPdf", "pdf", "[]byte")
    if (invalidValue == nil) {
        testpdf = nil
    } else {
        testpdf, _ = invalidValue.([]byte)
    }

    e := initializeTest("ImportFromPdf", "pdf", testpdf)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromPdf", "pdf", testpdf, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method with invalid password
*/
func TestImportFromPdfInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ImportFromPdf", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromPdf", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromPdf", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method with invalid folder
*/
func TestImportFromPdfInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "ImportFromPdf", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromPdf", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromPdf", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.ImportFromPdf method with invalid storage
*/
func TestImportFromPdfInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("ImportFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("ImportFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("ImportFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("ImportFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ImportFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "ImportFromPdf", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ImportFromPdf", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ImportFromPdf", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method
*/
func TestMerge(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)
    e := initializeTest("Merge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method with invalid name
*/
func TestMergeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "Merge", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("Merge", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Merge", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method with invalid request
*/
func TestMergeInvalidRequest(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "Merge", "request", "PresentationsMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IPresentationsMergeRequest)
    }

    e := initializeTest("Merge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Merge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method with invalid password
*/
func TestMergeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "Merge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("Merge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Merge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method with invalid folder
*/
func TestMergeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "Merge", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("Merge", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Merge", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.Merge method with invalid storage
*/
func TestMergeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("Merge", "name", "string").(string)
    testrequest, _ := createTestParamValue("Merge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("Merge", "password", "string").(string)
    testfolder, _ := createTestParamValue("Merge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Merge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "Merge", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("Merge", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Merge", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
   Test for SlidesApi.MergeAndSaveOnline method
*/
func TestMergeAndSaveOnline(t *testing.T) {
    testoutPath, _ := createTestParamValue("MergeAndSaveOnline", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("MergeAndSaveOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeAndSaveOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeAndSaveOnline", "storage", "string").(string)
    e := initializeTest("MergeAndSaveOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
   Test for SlidesApi.MergeAndSaveOnline method with invalid outPath
*/
func TestMergeAndSaveOnlineInvalidOutPath(t *testing.T) {
    testoutPath, _ := createTestParamValue("MergeAndSaveOnline", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("MergeAndSaveOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeAndSaveOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeAndSaveOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "MergeAndSaveOnline", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("MergeAndSaveOnline", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeAndSaveOnline", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
   Test for SlidesApi.MergeAndSaveOnline method with invalid files
*/
func TestMergeAndSaveOnlineInvalidFiles(t *testing.T) {
    testoutPath, _ := createTestParamValue("MergeAndSaveOnline", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("MergeAndSaveOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeAndSaveOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeAndSaveOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfiles, "MergeAndSaveOnline", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("MergeAndSaveOnline", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeAndSaveOnline", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
   Test for SlidesApi.MergeAndSaveOnline method with invalid request
*/
func TestMergeAndSaveOnlineInvalidRequest(t *testing.T) {
    testoutPath, _ := createTestParamValue("MergeAndSaveOnline", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("MergeAndSaveOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeAndSaveOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeAndSaveOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "MergeAndSaveOnline", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("MergeAndSaveOnline", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeAndSaveOnline", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
   Test for SlidesApi.MergeAndSaveOnline method with invalid storage
*/
func TestMergeAndSaveOnlineInvalidStorage(t *testing.T) {
    testoutPath, _ := createTestParamValue("MergeAndSaveOnline", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("MergeAndSaveOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeAndSaveOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeAndSaveOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "MergeAndSaveOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("MergeAndSaveOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeAndSaveOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.MergeOnline method
*/
func TestMergeOnline(t *testing.T) {
    testfiles, _ := createTestParamValue("MergeOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeOnline", "storage", "string").(string)
    e := initializeTest("MergeOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.MergeOnline(testfiles, testrequest, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.MergeOnline method with invalid files
*/
func TestMergeOnlineInvalidFiles(t *testing.T) {
    testfiles, _ := createTestParamValue("MergeOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfiles, "MergeOnline", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("MergeOnline", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeOnline", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.MergeOnline method with invalid request
*/
func TestMergeOnlineInvalidRequest(t *testing.T) {
    testfiles, _ := createTestParamValue("MergeOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "MergeOnline", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("MergeOnline", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeOnline", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.MergeOnline method with invalid storage
*/
func TestMergeOnlineInvalidStorage(t *testing.T) {
    testfiles, _ := createTestParamValue("MergeOnline", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("MergeOnline", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    teststorage, _ := createTestParamValue("MergeOnline", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "MergeOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("MergeOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MergeOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method
*/
func TestMoveFile(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)
    e := initializeTest("MoveFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid srcPath
*/
func TestMoveFileInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "MoveFile", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid destPath
*/
func TestMoveFileInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "MoveFile", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid srcStorageName
*/
func TestMoveFileInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "MoveFile", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid destStorageName
*/
func TestMoveFileInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "MoveFile", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid versionId
*/
func TestMoveFileInvalidVersionId(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "MoveFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method
*/
func TestMoveFolder(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)
    e := initializeTest("MoveFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid srcPath
*/
func TestMoveFolderInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "MoveFolder", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid destPath
*/
func TestMoveFolderInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "MoveFolder", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid srcStorageName
*/
func TestMoveFolderInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "MoveFolder", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid destStorageName
*/
func TestMoveFolderInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "MoveFolder", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method
*/
func TestMoveSection(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)
    e := initializeTest("MoveSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid name
*/
func TestMoveSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "MoveSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid sectionIndex
*/
func TestMoveSectionInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "MoveSection", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("MoveSection", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid newPosition
*/
func TestMoveSectionInvalidNewPosition(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPosition, "MoveSection", "newPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testnewPosition = nullValue
    } else {
        testnewPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("MoveSection", "newPosition", testnewPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "newPosition", testnewPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid password
*/
func TestMoveSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "MoveSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid folder
*/
func TestMoveSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "MoveSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.MoveSection method with invalid storage
*/
func TestMoveSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("MoveSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("MoveSection", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSection", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "MoveSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method
*/
func TestMoveSlide(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)
    e := initializeTest("MoveSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid name
*/
func TestMoveSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "MoveSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid slideIndex
*/
func TestMoveSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "MoveSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("MoveSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid newPosition
*/
func TestMoveSlideInvalidNewPosition(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPosition, "MoveSlide", "newPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testnewPosition = nullValue
    } else {
        testnewPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("MoveSlide", "newPosition", testnewPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "newPosition", testnewPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid password
*/
func TestMoveSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "MoveSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid folder
*/
func TestMoveSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "MoveSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.MoveSlide method with invalid storage
*/
func TestMoveSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("MoveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("MoveSlide", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("MoveSlide", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("MoveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("MoveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("MoveSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "MoveSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("MoveSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method
*/
func TestNotesSlideExists(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)
    e := initializeTest("NotesSlideExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method with invalid name
*/
func TestNotesSlideExistsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "NotesSlideExists", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("NotesSlideExists", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExists", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method with invalid slideIndex
*/
func TestNotesSlideExistsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "NotesSlideExists", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("NotesSlideExists", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExists", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method with invalid password
*/
func TestNotesSlideExistsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "NotesSlideExists", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("NotesSlideExists", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExists", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method with invalid folder
*/
func TestNotesSlideExistsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "NotesSlideExists", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("NotesSlideExists", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExists", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExists method with invalid storage
*/
func TestNotesSlideExistsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("NotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("NotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("NotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("NotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "NotesSlideExists", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("NotesSlideExists", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExists", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExistsOnline method
*/
func TestNotesSlideExistsOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("NotesSlideExistsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("NotesSlideExistsOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExistsOnline", "password", "string").(string)
    e := initializeTest("NotesSlideExistsOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExistsOnline method with invalid document
*/
func TestNotesSlideExistsOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("NotesSlideExistsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("NotesSlideExistsOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExistsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "NotesSlideExistsOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("NotesSlideExistsOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExistsOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExistsOnline method with invalid slideIndex
*/
func TestNotesSlideExistsOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("NotesSlideExistsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("NotesSlideExistsOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExistsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "NotesSlideExistsOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("NotesSlideExistsOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExistsOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.NotesSlideExistsOnline method with invalid password
*/
func TestNotesSlideExistsOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("NotesSlideExistsOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("NotesSlideExistsOnline", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("NotesSlideExistsOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "NotesSlideExistsOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("NotesSlideExistsOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "NotesSlideExistsOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method
*/
func TestObjectExists(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)
    e := initializeTest("ObjectExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid path
*/
func TestObjectExistsInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "ObjectExists", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid storageName
*/
func TestObjectExistsInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "ObjectExists", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid versionId
*/
func TestObjectExistsInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "ObjectExists", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method
*/
func TestOrderedMerge(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)
    e := initializeTest("OrderedMerge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method with invalid name
*/
func TestOrderedMergeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "OrderedMerge", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("OrderedMerge", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "OrderedMerge", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method with invalid request
*/
func TestOrderedMergeInvalidRequest(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "OrderedMerge", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("OrderedMerge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "OrderedMerge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method with invalid password
*/
func TestOrderedMergeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "OrderedMerge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("OrderedMerge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "OrderedMerge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method with invalid folder
*/
func TestOrderedMergeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "OrderedMerge", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("OrderedMerge", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "OrderedMerge", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.OrderedMerge method with invalid storage
*/
func TestOrderedMergeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("OrderedMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("OrderedMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("OrderedMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("OrderedMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("OrderedMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "OrderedMerge", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("OrderedMerge", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "OrderedMerge", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.Pipeline method
*/
func TestPipeline(t *testing.T) {
    testpipeline, _ := createTestParamValue("Pipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("Pipeline", "files", "[][]byte").([][]byte)
    e := initializeTest("Pipeline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.Pipeline(testpipeline, testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.Pipeline method with invalid pipeline
*/
func TestPipelineInvalidPipeline(t *testing.T) {
    testpipeline, _ := createTestParamValue("Pipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("Pipeline", "files", "[][]byte").([][]byte)

    invalidValue := invalidizeTestParamValue(testpipeline, "Pipeline", "pipeline", "Pipeline")
    if (invalidValue == nil) {
        testpipeline = nil
    } else {
        testpipeline, _ = invalidValue.(IPipeline)
    }

    e := initializeTest("Pipeline", "pipeline", testpipeline)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Pipeline(testpipeline, testfiles)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Pipeline", "pipeline", testpipeline, int32(statusCode), e)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.Pipeline method with invalid files
*/
func TestPipelineInvalidFiles(t *testing.T) {
    testpipeline, _ := createTestParamValue("Pipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("Pipeline", "files", "[][]byte").([][]byte)

    invalidValue := invalidizeTestParamValue(testfiles, "Pipeline", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("Pipeline", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Pipeline(testpipeline, testfiles)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Pipeline", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method
*/
func TestReorderSlides(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)
    e := initializeTest("ReorderSlides", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid name
*/
func TestReorderSlidesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "ReorderSlides", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("ReorderSlides", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid oldPositions
*/
func TestReorderSlidesInvalidOldPositions(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldPositions, "ReorderSlides", "oldPositions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testoldPositions = nullValue
    } else {
        testoldPositions, _ = invalidValue.([]int32)
    }

    e := initializeTest("ReorderSlides", "oldPositions", testoldPositions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "oldPositions", testoldPositions, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid newPositions
*/
func TestReorderSlidesInvalidNewPositions(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPositions, "ReorderSlides", "newPositions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testnewPositions = nullValue
    } else {
        testnewPositions, _ = invalidValue.([]int32)
    }

    e := initializeTest("ReorderSlides", "newPositions", testnewPositions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "newPositions", testnewPositions, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid password
*/
func TestReorderSlidesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ReorderSlides", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ReorderSlides", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid folder
*/
func TestReorderSlidesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "ReorderSlides", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("ReorderSlides", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.ReorderSlides method with invalid storage
*/
func TestReorderSlidesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("ReorderSlides", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("ReorderSlides", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("ReorderSlides", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("ReorderSlides", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReorderSlides", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReorderSlides", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "ReorderSlides", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ReorderSlides", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReorderSlides", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method
*/
func TestReplacePresentationText(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)
    e := initializeTest("ReplacePresentationText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid name
*/
func TestReplacePresentationTextInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "ReplacePresentationText", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid oldValue
*/
func TestReplacePresentationTextInvalidOldValue(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "ReplacePresentationText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid newValue
*/
func TestReplacePresentationTextInvalidNewValue(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "ReplacePresentationText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid ignoreCase
*/
func TestReplacePresentationTextInvalidIgnoreCase(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "ReplacePresentationText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("ReplacePresentationText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid password
*/
func TestReplacePresentationTextInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ReplacePresentationText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid folder
*/
func TestReplacePresentationTextInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "ReplacePresentationText", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationText method with invalid storage
*/
func TestReplacePresentationTextInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("ReplacePresentationText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("ReplacePresentationText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplacePresentationText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplacePresentationText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "ReplacePresentationText", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationText", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationText", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method
*/
func TestReplacePresentationTextOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)
    e := initializeTest("ReplacePresentationTextOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method with invalid document
*/
func TestReplacePresentationTextOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "ReplacePresentationTextOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("ReplacePresentationTextOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationTextOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method with invalid oldValue
*/
func TestReplacePresentationTextOnlineInvalidOldValue(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "ReplacePresentationTextOnline", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationTextOnline", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationTextOnline", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method with invalid newValue
*/
func TestReplacePresentationTextOnlineInvalidNewValue(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "ReplacePresentationTextOnline", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationTextOnline", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationTextOnline", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method with invalid ignoreCase
*/
func TestReplacePresentationTextOnlineInvalidIgnoreCase(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("ReplacePresentationTextOnline", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationTextOnline", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplacePresentationTextOnline method with invalid password
*/
func TestReplacePresentationTextOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplacePresentationTextOnline", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("ReplacePresentationTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplacePresentationTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplacePresentationTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplacePresentationTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ReplacePresentationTextOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ReplacePresentationTextOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplacePresentationTextOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method
*/
func TestReplaceSlideText(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)
    e := initializeTest("ReplaceSlideText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid name
*/
func TestReplaceSlideTextInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "ReplaceSlideText", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid slideIndex
*/
func TestReplaceSlideTextInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "ReplaceSlideText", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("ReplaceSlideText", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid oldValue
*/
func TestReplaceSlideTextInvalidOldValue(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "ReplaceSlideText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid newValue
*/
func TestReplaceSlideTextInvalidNewValue(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "ReplaceSlideText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid ignoreCase
*/
func TestReplaceSlideTextInvalidIgnoreCase(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "ReplaceSlideText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("ReplaceSlideText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid password
*/
func TestReplaceSlideTextInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ReplaceSlideText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid folder
*/
func TestReplaceSlideTextInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "ReplaceSlideText", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.ReplaceSlideText method with invalid storage
*/
func TestReplaceSlideTextInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("ReplaceSlideText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("ReplaceSlideText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideText", "password", "string").(string)
    testfolder, _ := createTestParamValue("ReplaceSlideText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("ReplaceSlideText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "ReplaceSlideText", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideText", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideText", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method
*/
func TestReplaceSlideTextOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)
    e := initializeTest("ReplaceSlideTextOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid document
*/
func TestReplaceSlideTextOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "ReplaceSlideTextOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("ReplaceSlideTextOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid slideIndex
*/
func TestReplaceSlideTextOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "ReplaceSlideTextOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("ReplaceSlideTextOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid oldValue
*/
func TestReplaceSlideTextOnlineInvalidOldValue(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "ReplaceSlideTextOnline", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideTextOnline", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid newValue
*/
func TestReplaceSlideTextOnlineInvalidNewValue(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "ReplaceSlideTextOnline", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideTextOnline", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid ignoreCase
*/
func TestReplaceSlideTextOnlineInvalidIgnoreCase(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("ReplaceSlideTextOnline", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.ReplaceSlideTextOnline method with invalid password
*/
func TestReplaceSlideTextOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("ReplaceSlideTextOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("ReplaceSlideTextOnline", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("ReplaceSlideTextOnline", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("ReplaceSlideTextOnline", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("ReplaceSlideTextOnline", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("ReplaceSlideTextOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "ReplaceSlideTextOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("ReplaceSlideTextOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ReplaceSlideTextOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method
*/
func TestSaveNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)
    e := initializeTest("SaveNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid name
*/
func TestSaveNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SaveNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid slideIndex
*/
func TestSaveNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid shapeIndex
*/
func TestSaveNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "SaveNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid format
*/
func TestSaveNotesSlideShapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveNotesSlideShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid outPath
*/
func TestSaveNotesSlideShapeInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveNotesSlideShape", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid options
*/
func TestSaveNotesSlideShapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "SaveNotesSlideShape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("SaveNotesSlideShape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid scaleX
*/
func TestSaveNotesSlideShapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "SaveNotesSlideShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveNotesSlideShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid scaleY
*/
func TestSaveNotesSlideShapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "SaveNotesSlideShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveNotesSlideShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid bounds
*/
func TestSaveNotesSlideShapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "SaveNotesSlideShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid password
*/
func TestSaveNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid folder
*/
func TestSaveNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SaveNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid storage
*/
func TestSaveNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveNotesSlideShape method with invalid fontsFolder
*/
func TestSaveNotesSlideShapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveNotesSlideShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveNotesSlideShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveNotesSlideShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveNotesSlideShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveNotesSlideShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveNotesSlideShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveNotesSlideShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveNotesSlideShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveNotesSlideShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveNotesSlideShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveNotesSlideShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveNotesSlideShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method
*/
func TestSavePresentation(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)
    e := initializeTest("SavePresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid name
*/
func TestSavePresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testname, "SavePresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid format
*/
func TestSavePresentationInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testformat, "SavePresentation", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid outPath
*/
func TestSavePresentationInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testoutPath, "SavePresentation", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid options
*/
func TestSavePresentationInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testoptions, "SavePresentation", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("SavePresentation", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid password
*/
func TestSavePresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testpassword, "SavePresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid folder
*/
func TestSavePresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfolder, "SavePresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid storage
*/
func TestSavePresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(teststorage, "SavePresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid fontsFolder
*/
func TestSavePresentationInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SavePresentation", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SavePresentation", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.SavePresentation method with invalid slides
*/
func TestSavePresentationInvalidSlides(t *testing.T) {
    testname, _ := createTestParamValue("SavePresentation", "name", "string").(string)
    testformat, _ := createTestParamValue("SavePresentation", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SavePresentation", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SavePresentation", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("SavePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SavePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SavePresentation", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SavePresentation", "fontsFolder", "string").(string)
    testslides, _ := createTestParamValue("SavePresentation", "slides", "[]int32").([]int32)

    invalidValue := invalidizeTestParamValue(testslides, "SavePresentation", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("SavePresentation", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder, testslides)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SavePresentation", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method
*/
func TestSaveShape(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)
    e := initializeTest("SaveShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid name
*/
func TestSaveShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SaveShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid slideIndex
*/
func TestSaveShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid shapeIndex
*/
func TestSaveShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "SaveShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid format
*/
func TestSaveShapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid outPath
*/
func TestSaveShapeInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveShape", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid options
*/
func TestSaveShapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "SaveShape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("SaveShape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid scaleX
*/
func TestSaveShapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "SaveShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid scaleY
*/
func TestSaveShapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "SaveShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid bounds
*/
func TestSaveShapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "SaveShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid password
*/
func TestSaveShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid folder
*/
func TestSaveShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SaveShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid storage
*/
func TestSaveShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShape method with invalid fontsFolder
*/
func TestSaveShapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveShape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method
*/
func TestSaveShapeOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)
    e := initializeTest("SaveShapeOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid document
*/
func TestSaveShapeOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "SaveShapeOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("SaveShapeOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid slideIndex
*/
func TestSaveShapeOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveShapeOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveShapeOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid shapeIndex
*/
func TestSaveShapeOnlineInvalidShapeIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "SaveShapeOnline", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveShapeOnline", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid format
*/
func TestSaveShapeOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveShapeOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid outPath
*/
func TestSaveShapeOnlineInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveShapeOnline", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid scaleX
*/
func TestSaveShapeOnlineInvalidScaleX(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "SaveShapeOnline", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveShapeOnline", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid scaleY
*/
func TestSaveShapeOnlineInvalidScaleY(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "SaveShapeOnline", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveShapeOnline", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid bounds
*/
func TestSaveShapeOnlineInvalidBounds(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "SaveShapeOnline", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid password
*/
func TestSaveShapeOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveShapeOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid storage
*/
func TestSaveShapeOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveShapeOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveShapeOnline method with invalid fontsFolder
*/
func TestSaveShapeOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveShapeOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveShapeOnline", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("SaveShapeOnline", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveShapeOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveShapeOnline", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveShapeOnline", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveShapeOnline", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveShapeOnline", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveShapeOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveShapeOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveShapeOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveShapeOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveShapeOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveShapeOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method
*/
func TestSaveSlide(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)
    e := initializeTest("SaveSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid name
*/
func TestSaveSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SaveSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid slideIndex
*/
func TestSaveSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid format
*/
func TestSaveSlideInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveSlide", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid outPath
*/
func TestSaveSlideInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveSlide", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid options
*/
func TestSaveSlideInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "SaveSlide", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("SaveSlide", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid width
*/
func TestSaveSlideInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "SaveSlide", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlide", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid height
*/
func TestSaveSlideInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "SaveSlide", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlide", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid password
*/
func TestSaveSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid folder
*/
func TestSaveSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SaveSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid storage
*/
func TestSaveSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlide method with invalid fontsFolder
*/
func TestSaveSlideInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlide", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSlide", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveSlide", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlide", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlide", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method
*/
func TestSaveSlideOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)
    e := initializeTest("SaveSlideOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid document
*/
func TestSaveSlideOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "SaveSlideOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("SaveSlideOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid slideIndex
*/
func TestSaveSlideOnlineInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveSlideOnline", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlideOnline", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid format
*/
func TestSaveSlideOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveSlideOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlideOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid outPath
*/
func TestSaveSlideOnlineInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveSlideOnline", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlideOnline", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid width
*/
func TestSaveSlideOnlineInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "SaveSlideOnline", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlideOnline", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid height
*/
func TestSaveSlideOnlineInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "SaveSlideOnline", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSlideOnline", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid password
*/
func TestSaveSlideOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveSlideOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlideOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid storage
*/
func TestSaveSlideOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveSlideOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlideOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.SaveSlideOnline method with invalid fontsFolder
*/
func TestSaveSlideOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("SaveSlideOnline", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("SaveSlideOnline", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSlideOnline", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSlideOnline", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SaveSlideOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SaveSlideOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("SaveSlideOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SaveSlideOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSlideOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveSlideOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSlideOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSlideOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method
*/
func TestSaveSubshape(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)
    e := initializeTest("SaveSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid name
*/
func TestSaveSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SaveSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid slideIndex
*/
func TestSaveSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SaveSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid path
*/
func TestSaveSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "SaveSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid shapeIndex
*/
func TestSaveSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "SaveSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SaveSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid format
*/
func TestSaveSubshapeInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SaveSubshape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid outPath
*/
func TestSaveSubshapeInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "SaveSubshape", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid options
*/
func TestSaveSubshapeInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "SaveSubshape", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("SaveSubshape", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid scaleX
*/
func TestSaveSubshapeInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "SaveSubshape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveSubshape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid scaleY
*/
func TestSaveSubshapeInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "SaveSubshape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("SaveSubshape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid bounds
*/
func TestSaveSubshapeInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "SaveSubshape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid password
*/
func TestSaveSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SaveSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid folder
*/
func TestSaveSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SaveSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid storage
*/
func TestSaveSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SaveSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.SaveSubshape method with invalid fontsFolder
*/
func TestSaveSubshapeInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("SaveSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SaveSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("SaveSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("SaveSubshape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("SaveSubshape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("SaveSubshape", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("SaveSubshape", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("SaveSubshape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("SaveSubshape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("SaveSubshape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("SaveSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("SaveSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SaveSubshape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SaveSubshape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SaveSubshape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SaveSubshape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SaveSubshape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method
*/
func TestSetAnimation(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)
    e := initializeTest("SetAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid name
*/
func TestSetAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid slideIndex
*/
func TestSetAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SetAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SetAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid animation
*/
func TestSetAnimationInvalidAnimation(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testanimation, "SetAnimation", "animation", "SlideAnimation")
    if (invalidValue == nil) {
        testanimation = nil
    } else {
        testanimation, _ = invalidValue.(ISlideAnimation)
    }

    e := initializeTest("SetAnimation", "animation", testanimation)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "animation", testanimation, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid password
*/
func TestSetAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid folder
*/
func TestSetAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.SetAnimation method with invalid storage
*/
func TestSetAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("SetAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("SetAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method
*/
func TestSetBackground(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)
    e := initializeTest("SetBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid name
*/
func TestSetBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid slideIndex
*/
func TestSetBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SetBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SetBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid background
*/
func TestSetBackgroundInvalidBackground(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testbackground, "SetBackground", "background", "SlideBackground")
    if (invalidValue == nil) {
        testbackground = nil
    } else {
        testbackground, _ = invalidValue.(ISlideBackground)
    }

    e := initializeTest("SetBackground", "background", testbackground)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "background", testbackground, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid password
*/
func TestSetBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid folder
*/
func TestSetBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.SetBackground method with invalid storage
*/
func TestSetBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("SetBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("SetBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method
*/
func TestSetBackgroundColor(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)
    e := initializeTest("SetBackgroundColor", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid name
*/
func TestSetBackgroundColorInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetBackgroundColor", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackgroundColor", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid slideIndex
*/
func TestSetBackgroundColorInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SetBackgroundColor", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SetBackgroundColor", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid color
*/
func TestSetBackgroundColorInvalidColor(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcolor, "SetBackgroundColor", "color", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcolor = nullValue
    } else {
        testcolor, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackgroundColor", "color", testcolor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "color", testcolor, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid password
*/
func TestSetBackgroundColorInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetBackgroundColor", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackgroundColor", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid folder
*/
func TestSetBackgroundColorInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetBackgroundColor", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackgroundColor", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.SetBackgroundColor method with invalid storage
*/
func TestSetBackgroundColorInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("SetBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("SetBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetBackgroundColor", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetBackgroundColor", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetBackgroundColor", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method
*/
func TestSetDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)
    e := initializeTest("SetDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method with invalid name
*/
func TestSetDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method with invalid properties
*/
func TestSetDocumentPropertiesInvalidProperties(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testproperties, "SetDocumentProperties", "properties", "DocumentProperties")
    if (invalidValue == nil) {
        testproperties = nil
    } else {
        testproperties, _ = invalidValue.(IDocumentProperties)
    }

    e := initializeTest("SetDocumentProperties", "properties", testproperties)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperties", "properties", testproperties, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method with invalid password
*/
func TestSetDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method with invalid folder
*/
func TestSetDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.SetDocumentProperties method with invalid storage
*/
func TestSetDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("SetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("SetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method
*/
func TestSetDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)
    e := initializeTest("SetDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid name
*/
func TestSetDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid propertyName
*/
func TestSetDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "SetDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid property
*/
func TestSetDocumentPropertyInvalidProperty(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testproperty, "SetDocumentProperty", "property", "DocumentProperty")
    if (invalidValue == nil) {
        testproperty = nil
    } else {
        testproperty, _ = invalidValue.(IDocumentProperty)
    }

    e := initializeTest("SetDocumentProperty", "property", testproperty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "property", testproperty, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid password
*/
func TestSetDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid folder
*/
func TestSetDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.SetDocumentProperty method with invalid storage
*/
func TestSetDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("SetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("SetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("SetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method
*/
func TestSetNotesSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("SetNotesSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid name
*/
func TestSetNotesSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetNotesSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid slideIndex
*/
func TestSetNotesSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SetNotesSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid dto
*/
func TestSetNotesSlideHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlideHeaderFooter)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid password
*/
func TestSetNotesSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetNotesSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid folder
*/
func TestSetNotesSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetNotesSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.SetNotesSlideHeaderFooter method with invalid storage
*/
func TestSetNotesSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("SetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetNotesSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetNotesSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetNotesSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method
*/
func TestSetPresentationHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)
    e := initializeTest("SetPresentationHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method with invalid name
*/
func TestSetPresentationHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetPresentationHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetPresentationHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetPresentationHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method with invalid dto
*/
func TestSetPresentationHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetPresentationHeaderFooter", "dto", "HeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IHeaderFooter)
    }

    e := initializeTest("SetPresentationHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetPresentationHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method with invalid password
*/
func TestSetPresentationHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetPresentationHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetPresentationHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetPresentationHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method with invalid folder
*/
func TestSetPresentationHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetPresentationHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetPresentationHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetPresentationHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.SetPresentationHeaderFooter method with invalid storage
*/
func TestSetPresentationHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetPresentationHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("SetPresentationHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetPresentationHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetPresentationHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetPresentationHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetPresentationHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetPresentationHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetPresentationHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method
*/
func TestSetProtection(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)
    e := initializeTest("SetProtection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method with invalid name
*/
func TestSetProtectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetProtection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetProtection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method with invalid dto
*/
func TestSetProtectionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetProtection", "dto", "ProtectionProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IProtectionProperties)
    }

    e := initializeTest("SetProtection", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtection", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method with invalid password
*/
func TestSetProtectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetProtection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetProtection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method with invalid folder
*/
func TestSetProtectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetProtection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetProtection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.SetProtection method with invalid storage
*/
func TestSetProtectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetProtection", "name", "string").(string)
    testdto, _ := createTestParamValue("SetProtection", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtection", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetProtection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetProtection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetProtection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetProtection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.SetProtectionOnline method
*/
func TestSetProtectionOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("SetProtectionOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("SetProtectionOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtectionOnline", "password", "string").(string)
    e := initializeTest("SetProtectionOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.SetProtectionOnline method with invalid document
*/
func TestSetProtectionOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("SetProtectionOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("SetProtectionOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtectionOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "SetProtectionOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("SetProtectionOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtectionOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.SetProtectionOnline method with invalid dto
*/
func TestSetProtectionOnlineInvalidDto(t *testing.T) {
    testdocument, _ := createTestParamValue("SetProtectionOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("SetProtectionOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtectionOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetProtectionOnline", "dto", "ProtectionProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IProtectionProperties)
    }

    e := initializeTest("SetProtectionOnline", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtectionOnline", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.SetProtectionOnline method with invalid password
*/
func TestSetProtectionOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("SetProtectionOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("SetProtectionOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("SetProtectionOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetProtectionOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetProtectionOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetProtectionOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method
*/
func TestSetSections(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)
    e := initializeTest("SetSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method with invalid name
*/
func TestSetSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method with invalid sections
*/
func TestSetSectionsInvalidSections(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsections, "SetSections", "sections", "Sections")
    if (invalidValue == nil) {
        testsections = nil
    } else {
        testsections, _ = invalidValue.(ISections)
    }

    e := initializeTest("SetSections", "sections", testsections)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSections", "sections", testsections, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method with invalid password
*/
func TestSetSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method with invalid folder
*/
func TestSetSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.SetSections method with invalid storage
*/
func TestSetSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetSections", "name", "string").(string)
    testsections, _ := createTestParamValue("SetSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("SetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method
*/
func TestSetSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("SetSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid name
*/
func TestSetSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid slideIndex
*/
func TestSetSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "SetSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("SetSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid dto
*/
func TestSetSlideHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetSlideHeaderFooter", "dto", "HeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IHeaderFooter)
    }

    e := initializeTest("SetSlideHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid password
*/
func TestSetSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid folder
*/
func TestSetSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.SetSlideHeaderFooter method with invalid storage
*/
func TestSetSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("SetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("SetSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("SetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method
*/
func TestSetSlideProperties(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)
    e := initializeTest("SetSlideProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method with invalid name
*/
func TestSetSlidePropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetSlideProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method with invalid dto
*/
func TestSetSlidePropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetSlideProperties", "dto", "SlideProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(ISlideProperties)
    }

    e := initializeTest("SetSlideProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method with invalid password
*/
func TestSetSlidePropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetSlideProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method with invalid folder
*/
func TestSetSlidePropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetSlideProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.SetSlideProperties method with invalid storage
*/
func TestSetSlidePropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("SetSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetSlideProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetSlideProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetSlideProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method
*/
func TestSetViewProperties(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)
    e := initializeTest("SetViewProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method with invalid name
*/
func TestSetViewPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "SetViewProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("SetViewProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetViewProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method with invalid dto
*/
func TestSetViewPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "SetViewProperties", "dto", "ViewProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IViewProperties)
    }

    e := initializeTest("SetViewProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetViewProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method with invalid password
*/
func TestSetViewPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SetViewProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SetViewProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetViewProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method with invalid folder
*/
func TestSetViewPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "SetViewProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("SetViewProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetViewProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.SetViewProperties method with invalid storage
*/
func TestSetViewPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("SetViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("SetViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("SetViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("SetViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("SetViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SetViewProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SetViewProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SetViewProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method
*/
func TestSplit(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)
    e := initializeTest("Split", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid name
*/
func TestSplitInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "Split", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid options
*/
func TestSplitInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "Split", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("Split", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid format
*/
func TestSplitInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "Split", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid width
*/
func TestSplitInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "Split", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("Split", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid height
*/
func TestSplitInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "Split", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("Split", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid from
*/
func TestSplitInvalidFrom(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "Split", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("Split", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid to
*/
func TestSplitInvalidTo(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "Split", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("Split", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid destFolder
*/
func TestSplitInvalidDestFolder(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestFolder, "Split", "destFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestFolder = nullValue
    } else {
        testdestFolder, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "destFolder", testdestFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "destFolder", testdestFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid password
*/
func TestSplitInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "Split", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid folder
*/
func TestSplitInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "Split", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid storage
*/
func TestSplitInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "Split", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.Split method with invalid fontsFolder
*/
func TestSplitInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("Split", "name", "string").(string)
    testoptions, _ := createTestParamValue("Split", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("Split", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("Split", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("Split", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("Split", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("Split", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("Split", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("Split", "password", "string").(string)
    testfolder, _ := createTestParamValue("Split", "folder", "string").(string)
    teststorage, _ := createTestParamValue("Split", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("Split", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "Split", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("Split", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "Split", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method
*/
func TestSplitAndSaveOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)
    e := initializeTest("SplitAndSaveOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid document
*/
func TestSplitAndSaveOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "SplitAndSaveOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("SplitAndSaveOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid format
*/
func TestSplitAndSaveOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SplitAndSaveOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SplitAndSaveOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid destFolder
*/
func TestSplitAndSaveOnlineInvalidDestFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestFolder, "SplitAndSaveOnline", "destFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestFolder = nullValue
    } else {
        testdestFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SplitAndSaveOnline", "destFolder", testdestFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "destFolder", testdestFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid width
*/
func TestSplitAndSaveOnlineInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "SplitAndSaveOnline", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitAndSaveOnline", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid height
*/
func TestSplitAndSaveOnlineInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "SplitAndSaveOnline", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitAndSaveOnline", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid from
*/
func TestSplitAndSaveOnlineInvalidFrom(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "SplitAndSaveOnline", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitAndSaveOnline", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid to
*/
func TestSplitAndSaveOnlineInvalidTo(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "SplitAndSaveOnline", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitAndSaveOnline", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid password
*/
func TestSplitAndSaveOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SplitAndSaveOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SplitAndSaveOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid storage
*/
func TestSplitAndSaveOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SplitAndSaveOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SplitAndSaveOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitAndSaveOnline method with invalid fontsFolder
*/
func TestSplitAndSaveOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitAndSaveOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitAndSaveOnline", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("SplitAndSaveOnline", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitAndSaveOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitAndSaveOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitAndSaveOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitAndSaveOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitAndSaveOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitAndSaveOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitAndSaveOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SplitAndSaveOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SplitAndSaveOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitAndSaveOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method
*/
func TestSplitOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)
    e := initializeTest("SplitOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid document
*/
func TestSplitOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "SplitOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("SplitOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid format
*/
func TestSplitOnlineInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "SplitOnline", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("SplitOnline", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid width
*/
func TestSplitOnlineInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "SplitOnline", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitOnline", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid height
*/
func TestSplitOnlineInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "SplitOnline", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitOnline", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid from
*/
func TestSplitOnlineInvalidFrom(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "SplitOnline", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitOnline", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid to
*/
func TestSplitOnlineInvalidTo(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "SplitOnline", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("SplitOnline", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid password
*/
func TestSplitOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "SplitOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("SplitOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid storage
*/
func TestSplitOnlineInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "SplitOnline", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("SplitOnline", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.SplitOnline method with invalid fontsFolder
*/
func TestSplitOnlineInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("SplitOnline", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("SplitOnline", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("SplitOnline", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("SplitOnline", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("SplitOnline", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("SplitOnline", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("SplitOnline", "password", "string").(string)
    teststorage, _ := createTestParamValue("SplitOnline", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("SplitOnline", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "SplitOnline", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("SplitOnline", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "SplitOnline", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if storage exists
   Test for SlidesApi.StorageExists method
*/
func TestStorageExists(t *testing.T) {
    teststorageName, _ := createTestParamValue("StorageExists", "storageName", "string").(string)
    e := initializeTest("StorageExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.StorageExists(teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Check if storage exists
   Test for SlidesApi.StorageExists method with invalid storageName
*/
func TestStorageExistsInvalidStorageName(t *testing.T) {
    teststorageName, _ := createTestParamValue("StorageExists", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "StorageExists", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("StorageExists", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.StorageExists(teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "StorageExists", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method
*/
func TestUpdateAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)
    e := initializeTest("UpdateAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid name
*/
func TestUpdateAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid slideIndex
*/
func TestUpdateAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid effectIndex
*/
func TestUpdateAnimationEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "UpdateAnimationEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateAnimationEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid effect
*/
func TestUpdateAnimationEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "UpdateAnimationEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("UpdateAnimationEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid password
*/
func TestUpdateAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid folder
*/
func TestUpdateAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.UpdateAnimationEffect method with invalid storage
*/
func TestUpdateAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method
*/
func TestUpdateAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid name
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid effectIndex
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid effect
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "UpdateAnimationInteractiveSequenceEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid password
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.UpdateAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestUpdateAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method
*/
func TestUpdateChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)
    e := initializeTest("UpdateChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid name
*/
func TestUpdateChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid slideIndex
*/
func TestUpdateChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid shapeIndex
*/
func TestUpdateChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid categoryIndex
*/
func TestUpdateChartCategoryInvalidCategoryIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategoryIndex, "UpdateChartCategory", "categoryIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcategoryIndex = nullValue
    } else {
        testcategoryIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartCategory", "categoryIndex", testcategoryIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "categoryIndex", testcategoryIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid category
*/
func TestUpdateChartCategoryInvalidCategory(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategory, "UpdateChartCategory", "category", "ChartCategory")
    if (invalidValue == nil) {
        testcategory = nil
    } else {
        testcategory, _ = invalidValue.(IChartCategory)
    }

    e := initializeTest("UpdateChartCategory", "category", testcategory)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "category", testcategory, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid password
*/
func TestUpdateChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid folder
*/
func TestUpdateChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.UpdateChartCategory method with invalid storage
*/
func TestUpdateChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("UpdateChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("UpdateChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("UpdateChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method
*/
func TestUpdateChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)
    e := initializeTest("UpdateChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid name
*/
func TestUpdateChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid slideIndex
*/
func TestUpdateChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid shapeIndex
*/
func TestUpdateChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid seriesIndex
*/
func TestUpdateChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "UpdateChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid pointIndex
*/
func TestUpdateChartDataPointInvalidPointIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpointIndex, "UpdateChartDataPoint", "pointIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testpointIndex = nullValue
    } else {
        testpointIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartDataPoint", "pointIndex", testpointIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "pointIndex", testpointIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid dataPoint
*/
func TestUpdateChartDataPointInvalidDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdataPoint, "UpdateChartDataPoint", "dataPoint", "DataPoint")
    if (invalidValue == nil) {
        testdataPoint = nil
    } else {
        testdataPoint, _ = invalidValue.(IDataPoint)
    }

    e := initializeTest("UpdateChartDataPoint", "dataPoint", testdataPoint)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "dataPoint", testdataPoint, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid password
*/
func TestUpdateChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid folder
*/
func TestUpdateChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.UpdateChartDataPoint method with invalid storage
*/
func TestUpdateChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("UpdateChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("UpdateChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("UpdateChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method
*/
func TestUpdateChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)
    e := initializeTest("UpdateChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid name
*/
func TestUpdateChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid slideIndex
*/
func TestUpdateChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid shapeIndex
*/
func TestUpdateChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid seriesIndex
*/
func TestUpdateChartSeriesInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "UpdateChartSeries", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateChartSeries", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid series
*/
func TestUpdateChartSeriesInvalidSeries(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseries, "UpdateChartSeries", "series", "Series")
    if (invalidValue == nil) {
        testseries = nil
    } else {
        testseries, _ = invalidValue.(ISeries)
    }

    e := initializeTest("UpdateChartSeries", "series", testseries)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "series", testseries, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid password
*/
func TestUpdateChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid folder
*/
func TestUpdateChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.UpdateChartSeries method with invalid storage
*/
func TestUpdateChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("UpdateChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("UpdateChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("UpdateChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method
*/
func TestUpdateLayoutSlide(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)
    e := initializeTest("UpdateLayoutSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid name
*/
func TestUpdateLayoutSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateLayoutSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateLayoutSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid slideIndex
*/
func TestUpdateLayoutSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateLayoutSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateLayoutSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid slideDto
*/
func TestUpdateLayoutSlideInvalidSlideDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideDto, "UpdateLayoutSlide", "slideDto", "LayoutSlide")
    if (invalidValue == nil) {
        testslideDto = nil
    } else {
        testslideDto, _ = invalidValue.(ILayoutSlide)
    }

    e := initializeTest("UpdateLayoutSlide", "slideDto", testslideDto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "slideDto", testslideDto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid password
*/
func TestUpdateLayoutSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateLayoutSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateLayoutSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid folder
*/
func TestUpdateLayoutSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateLayoutSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateLayoutSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.UpdateLayoutSlide method with invalid storage
*/
func TestUpdateLayoutSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("UpdateLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateLayoutSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateLayoutSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateLayoutSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method
*/
func TestUpdateNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)
    e := initializeTest("UpdateNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid name
*/
func TestUpdateNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid slideIndex
*/
func TestUpdateNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid dto
*/
func TestUpdateNotesSlideInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateNotesSlide", "dto", "NotesSlide")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlide)
    }

    e := initializeTest("UpdateNotesSlide", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid password
*/
func TestUpdateNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid folder
*/
func TestUpdateNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.UpdateNotesSlide method with invalid storage
*/
func TestUpdateNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("UpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method
*/
func TestUpdateNotesSlideParagraph(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)
    e := initializeTest("UpdateNotesSlideParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid name
*/
func TestUpdateNotesSlideParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateNotesSlideParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid slideIndex
*/
func TestUpdateNotesSlideParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateNotesSlideParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid shapeIndex
*/
func TestUpdateNotesSlideParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateNotesSlideParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid paragraphIndex
*/
func TestUpdateNotesSlideParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdateNotesSlideParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid dto
*/
func TestUpdateNotesSlideParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateNotesSlideParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid password
*/
func TestUpdateNotesSlideParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateNotesSlideParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid folder
*/
func TestUpdateNotesSlideParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateNotesSlideParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateNotesSlideParagraph method with invalid storage
*/
func TestUpdateNotesSlideParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateNotesSlideParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method
*/
func TestUpdateNotesSlidePortion(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)
    e := initializeTest("UpdateNotesSlidePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid name
*/
func TestUpdateNotesSlidePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateNotesSlidePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlidePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid slideIndex
*/
func TestUpdateNotesSlidePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateNotesSlidePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlidePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid shapeIndex
*/
func TestUpdateNotesSlidePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateNotesSlidePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlidePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid paragraphIndex
*/
func TestUpdateNotesSlidePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdateNotesSlidePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlidePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid portionIndex
*/
func TestUpdateNotesSlidePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "UpdateNotesSlidePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlidePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid dto
*/
func TestUpdateNotesSlidePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateNotesSlidePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("UpdateNotesSlidePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid password
*/
func TestUpdateNotesSlidePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateNotesSlidePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlidePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid folder
*/
func TestUpdateNotesSlidePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateNotesSlidePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlidePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdateNotesSlidePortion method with invalid storage
*/
func TestUpdateNotesSlidePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateNotesSlidePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlidePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateNotesSlidePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlidePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlidePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method
*/
func TestUpdateNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)
    e := initializeTest("UpdateNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid name
*/
func TestUpdateNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid slideIndex
*/
func TestUpdateNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid shapeIndex
*/
func TestUpdateNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid dto
*/
func TestUpdateNotesSlideShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateNotesSlideShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("UpdateNotesSlideShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid password
*/
func TestUpdateNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid folder
*/
func TestUpdateNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateNotesSlideShape method with invalid storage
*/
func TestUpdateNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method
*/
func TestUpdateParagraph(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)
    e := initializeTest("UpdateParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid name
*/
func TestUpdateParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid slideIndex
*/
func TestUpdateParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid shapeIndex
*/
func TestUpdateParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid paragraphIndex
*/
func TestUpdateParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdateParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid dto
*/
func TestUpdateParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("UpdateParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid password
*/
func TestUpdateParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid folder
*/
func TestUpdateParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.UpdateParagraph method with invalid storage
*/
func TestUpdateParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method
*/
func TestUpdatePortion(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)
    e := initializeTest("UpdatePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid name
*/
func TestUpdatePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdatePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdatePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid slideIndex
*/
func TestUpdatePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdatePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdatePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid shapeIndex
*/
func TestUpdatePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdatePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdatePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid paragraphIndex
*/
func TestUpdatePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdatePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdatePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid portionIndex
*/
func TestUpdatePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "UpdatePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdatePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid dto
*/
func TestUpdatePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdatePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("UpdatePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid password
*/
func TestUpdatePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdatePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdatePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid folder
*/
func TestUpdatePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdatePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdatePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.UpdatePortion method with invalid storage
*/
func TestUpdatePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdatePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdatePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdatePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdatePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdatePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdatePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdatePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdatePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdatePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdatePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdatePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdatePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method
*/
func TestUpdateSection(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)
    e := initializeTest("UpdateSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid name
*/
func TestUpdateSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid sectionIndex
*/
func TestUpdateSectionInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "UpdateSection", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSection", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid sectionName
*/
func TestUpdateSectionInvalidSectionName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionName, "UpdateSection", "sectionName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsectionName = nullValue
    } else {
        testsectionName, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSection", "sectionName", testsectionName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "sectionName", testsectionName, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid password
*/
func TestUpdateSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid folder
*/
func TestUpdateSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.UpdateSection method with invalid storage
*/
func TestUpdateSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("UpdateSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("UpdateSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("UpdateSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method
*/
func TestUpdateShape(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)
    e := initializeTest("UpdateShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid name
*/
func TestUpdateShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid slideIndex
*/
func TestUpdateShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid shapeIndex
*/
func TestUpdateShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid dto
*/
func TestUpdateShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("UpdateShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid password
*/
func TestUpdateShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid folder
*/
func TestUpdateShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.UpdateShape method with invalid storage
*/
func TestUpdateShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("UpdateShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method
*/
func TestUpdateSlide(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)
    e := initializeTest("UpdateSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid name
*/
func TestUpdateSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid slideIndex
*/
func TestUpdateSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid slideDto
*/
func TestUpdateSlideInvalidSlideDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideDto, "UpdateSlide", "slideDto", "Slide")
    if (invalidValue == nil) {
        testslideDto = nil
    } else {
        testslideDto, _ = invalidValue.(ISlide)
    }

    e := initializeTest("UpdateSlide", "slideDto", testslideDto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "slideDto", testslideDto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid password
*/
func TestUpdateSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid folder
*/
func TestUpdateSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.UpdateSlide method with invalid storage
*/
func TestUpdateSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("UpdateSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("UpdateSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method
*/
func TestUpdateSubshape(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)
    e := initializeTest("UpdateSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid name
*/
func TestUpdateSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid slideIndex
*/
func TestUpdateSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid path
*/
func TestUpdateSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "UpdateSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid shapeIndex
*/
func TestUpdateSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid dto
*/
func TestUpdateSubshapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateSubshape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("UpdateSubshape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid password
*/
func TestUpdateSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid folder
*/
func TestUpdateSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshape method with invalid storage
*/
func TestUpdateSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("UpdateSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method
*/
func TestUpdateSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("UpdateSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid name
*/
func TestUpdateSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid slideIndex
*/
func TestUpdateSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid path
*/
func TestUpdateSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "UpdateSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid shapeIndex
*/
func TestUpdateSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid paragraphIndex
*/
func TestUpdateSubshapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdateSubshapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid dto
*/
func TestUpdateSubshapeParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateSubshapeParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("UpdateSubshapeParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid password
*/
func TestUpdateSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid folder
*/
func TestUpdateSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapeParagraph method with invalid storage
*/
func TestUpdateSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("UpdateSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method
*/
func TestUpdateSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)
    e := initializeTest("UpdateSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid name
*/
func TestUpdateSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "UpdateSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid slideIndex
*/
func TestUpdateSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "UpdateSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid path
*/
func TestUpdateSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "UpdateSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid shapeIndex
*/
func TestUpdateSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "UpdateSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid paragraphIndex
*/
func TestUpdateSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "UpdateSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid portionIndex
*/
func TestUpdateSubshapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "UpdateSubshapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("UpdateSubshapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid dto
*/
func TestUpdateSubshapePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "UpdateSubshapePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("UpdateSubshapePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid password
*/
func TestUpdateSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "UpdateSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid folder
*/
func TestUpdateSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "UpdateSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.UpdateSubshapePortion method with invalid storage
*/
func TestUpdateSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("UpdateSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("UpdateSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("UpdateSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("UpdateSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("UpdateSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("UpdateSubshapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("UpdateSubshapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("UpdateSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("UpdateSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("UpdateSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "UpdateSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("UpdateSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UpdateSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method
*/
func TestUploadFile(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)
    e := initializeTest("UploadFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UploadFile(testpath, testfile, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid path
*/
func TestUploadFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "UploadFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("UploadFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid file
*/
func TestUploadFileInvalidFile(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testfile, "UploadFile", "file", "[]byte")
    if (invalidValue == nil) {
        testfile = nil
    } else {
        testfile, _ = invalidValue.([]byte)
    }

    e := initializeTest("UploadFile", "file", testfile)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "file", testfile, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid storageName
*/
func TestUploadFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "UploadFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("UploadFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "storageName", teststorageName, int32(statusCode), e)
}
