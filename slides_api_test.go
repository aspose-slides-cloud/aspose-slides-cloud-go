/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package asposeslidescloud

import (
	"testing"
)

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method
*/
func TestCopyFile(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)
    e := initializeTest("CopyFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid srcPath
*/
func TestCopyFileInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "CopyFile", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid destPath
*/
func TestCopyFileInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "CopyFile", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid srcStorageName
*/
func TestCopyFileInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "CopyFile", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid destStorageName
*/
func TestCopyFileInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "CopyFile", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy file
   Test for SlidesApi.CopyFile method with invalid versionId
*/
func TestCopyFileInvalidVersionId(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("CopyFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "CopyFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method
*/
func TestCopyFolder(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)
    e := initializeTest("CopyFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid srcPath
*/
func TestCopyFolderInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "CopyFolder", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid destPath
*/
func TestCopyFolderInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "CopyFolder", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid srcStorageName
*/
func TestCopyFolderInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "CopyFolder", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy folder
   Test for SlidesApi.CopyFolder method with invalid destStorageName
*/
func TestCopyFolderInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("CopyFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("CopyFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("CopyFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("CopyFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "CopyFolder", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CopyFolder", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CopyFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CopyFolder", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method
*/
func TestCreateFolder(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)
    e := initializeTest("CreateFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateFolder(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method with invalid path
*/
func TestCreateFolderInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "CreateFolder", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("CreateFolder", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateFolder(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateFolder", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create the folder
   Test for SlidesApi.CreateFolder method with invalid storageName
*/
func TestCreateFolderInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("CreateFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("CreateFolder", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "CreateFolder", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("CreateFolder", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateFolder(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "CreateFolder", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method
*/
func TestDeleteChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)
    e := initializeTest("DeleteChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid name
*/
func TestDeleteChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid slideIndex
*/
func TestDeleteChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid shapeIndex
*/
func TestDeleteChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid categoryIndex
*/
func TestDeleteChartCategoryInvalidCategoryIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategoryIndex, "DeleteChartCategory", "categoryIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcategoryIndex = nullValue
    } else {
        testcategoryIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartCategory", "categoryIndex", testcategoryIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "categoryIndex", testcategoryIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid password
*/
func TestDeleteChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid folder
*/
func TestDeleteChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a category from a chart.
   Test for SlidesApi.DeleteChartCategory method with invalid storage
*/
func TestDeleteChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("DeleteChartCategory", "categoryIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method
*/
func TestDeleteChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)
    e := initializeTest("DeleteChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid name
*/
func TestDeleteChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid slideIndex
*/
func TestDeleteChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid shapeIndex
*/
func TestDeleteChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid seriesIndex
*/
func TestDeleteChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "DeleteChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid pointIndex
*/
func TestDeleteChartDataPointInvalidPointIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpointIndex, "DeleteChartDataPoint", "pointIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testpointIndex = nullValue
    } else {
        testpointIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartDataPoint", "pointIndex", testpointIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "pointIndex", testpointIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid password
*/
func TestDeleteChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid folder
*/
func TestDeleteChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a data point from a chart series.
   Test for SlidesApi.DeleteChartDataPoint method with invalid storage
*/
func TestDeleteChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("DeleteChartDataPoint", "pointIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method
*/
func TestDeleteChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)
    e := initializeTest("DeleteChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid name
*/
func TestDeleteChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid slideIndex
*/
func TestDeleteChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid shapeIndex
*/
func TestDeleteChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid seriesIndex
*/
func TestDeleteChartSeriesInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "DeleteChartSeries", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteChartSeries", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid password
*/
func TestDeleteChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid folder
*/
func TestDeleteChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a series from a chart.
   Test for SlidesApi.DeleteChartSeries method with invalid storage
*/
func TestDeleteChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("DeleteChartSeries", "seriesIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method
*/
func TestDeleteFile(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)
    e := initializeTest("DeleteFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid path
*/
func TestDeleteFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid storageName
*/
func TestDeleteFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "DeleteFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete file
   Test for SlidesApi.DeleteFile method with invalid versionId
*/
func TestDeleteFileInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DeleteFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "DeleteFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method
*/
func TestDeleteFolder(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }
    e := initializeTest("DeleteFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid path
*/
func TestDeleteFolderInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }

    invalidValue := invalidizeTestParamValue(testpath, "DeleteFolder", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFolder", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid storageName
*/
func TestDeleteFolderInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }

    invalidValue := invalidizeTestParamValue(teststorageName, "DeleteFolder", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteFolder", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete folder
   Test for SlidesApi.DeleteFolder method with invalid recursive
*/
func TestDeleteFolderInvalidRecursive(t *testing.T) {
    testpath, _ := createTestParamValue("DeleteFolder", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DeleteFolder", "storageName", "string").(string)
    var testrecursive *bool
    testrecursiveValue := createTestParamValue("DeleteFolder", "recursive", "bool")
    if (testrecursiveValue != nil) {
        testrecursive = new(bool)
        *testrecursive, _ = testrecursiveValue.(bool)
    }
    testrecursive = new(bool)

    invalidValue := invalidizeTestParamValue(testrecursive, "DeleteFolder", "recursive", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testrecursive = nullValue
    } else {
        *testrecursive, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteFolder", "recursive", testrecursive)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteFolder(testpath, teststorageName, testrecursive)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteFolder", "recursive", testrecursive, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method
*/
func TestDeleteNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid name
*/
func TestDeleteNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid slideIndex
*/
func TestDeleteNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid password
*/
func TestDeleteNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid folder
*/
func TestDeleteNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove notes slide.
   Test for SlidesApi.DeleteNotesSlide method with invalid storage
*/
func TestDeleteNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method
*/
func TestDeleteNotesSlideParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid name
*/
func TestDeleteNotesSlideParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid slideIndex
*/
func TestDeleteNotesSlideParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid shapeIndex
*/
func TestDeleteNotesSlideParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid paragraphIndex
*/
func TestDeleteNotesSlideParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlideParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid password
*/
func TestDeleteNotesSlideParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid folder
*/
func TestDeleteNotesSlideParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteNotesSlideParagraph method with invalid storage
*/
func TestDeleteNotesSlideParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlideParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method
*/
func TestDeleteNotesSlideParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid name
*/
func TestDeleteNotesSlideParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid slideIndex
*/
func TestDeleteNotesSlideParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid shapeIndex
*/
func TestDeleteNotesSlideParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid paragraphs
*/
func TestDeleteNotesSlideParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteNotesSlideParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid password
*/
func TestDeleteNotesSlideParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid folder
*/
func TestDeleteNotesSlideParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteNotesSlideParagraphs method with invalid storage
*/
func TestDeleteNotesSlideParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteNotesSlideParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method
*/
func TestDeleteNotesSlidePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlidePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid name
*/
func TestDeleteNotesSlidePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlidePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid slideIndex
*/
func TestDeleteNotesSlidePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlidePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid shapeIndex
*/
func TestDeleteNotesSlidePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlidePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid paragraphIndex
*/
func TestDeleteNotesSlidePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlidePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid portionIndex
*/
func TestDeleteNotesSlidePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeleteNotesSlidePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid password
*/
func TestDeleteNotesSlidePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlidePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid folder
*/
func TestDeleteNotesSlidePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlidePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeleteNotesSlidePortion method with invalid storage
*/
func TestDeleteNotesSlidePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteNotesSlidePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlidePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method
*/
func TestDeleteNotesSlidePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlidePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid name
*/
func TestDeleteNotesSlidePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlidePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid slideIndex
*/
func TestDeleteNotesSlidePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlidePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid shapeIndex
*/
func TestDeleteNotesSlidePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlidePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid paragraphIndex
*/
func TestDeleteNotesSlidePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteNotesSlidePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid portions
*/
func TestDeleteNotesSlidePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeleteNotesSlidePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlidePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid password
*/
func TestDeleteNotesSlidePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlidePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid folder
*/
func TestDeleteNotesSlidePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlidePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeleteNotesSlidePortions method with invalid storage
*/
func TestDeleteNotesSlidePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlidePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteNotesSlidePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteNotesSlidePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlidePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlidePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlidePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlidePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlidePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlidePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method
*/
func TestDeleteNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid name
*/
func TestDeleteNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid slideIndex
*/
func TestDeleteNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid shapeIndex
*/
func TestDeleteNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid password
*/
func TestDeleteNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid folder
*/
func TestDeleteNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteNotesSlideShape method with invalid storage
*/
func TestDeleteNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method
*/
func TestDeleteNotesSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)
    e := initializeTest("DeleteNotesSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid name
*/
func TestDeleteNotesSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteNotesSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid slideIndex
*/
func TestDeleteNotesSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteNotesSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteNotesSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid shapes
*/
func TestDeleteNotesSlideShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteNotesSlideShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteNotesSlideShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid password
*/
func TestDeleteNotesSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteNotesSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid folder
*/
func TestDeleteNotesSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteNotesSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteNotesSlideShapes method with invalid storage
*/
func TestDeleteNotesSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteNotesSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteNotesSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteNotesSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteNotesSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteNotesSlideShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteNotesSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method
*/
func TestDeleteParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)
    e := initializeTest("DeleteParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid name
*/
func TestDeleteParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid slideIndex
*/
func TestDeleteParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid shapeIndex
*/
func TestDeleteParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid paragraphIndex
*/
func TestDeleteParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid password
*/
func TestDeleteParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid folder
*/
func TestDeleteParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph.
   Test for SlidesApi.DeleteParagraph method with invalid storage
*/
func TestDeleteParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method
*/
func TestDeleteParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid name
*/
func TestDeleteParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid slideIndex
*/
func TestDeleteParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid shapeIndex
*/
func TestDeleteParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid paragraphs
*/
func TestDeleteParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid password
*/
func TestDeleteParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid folder
*/
func TestDeleteParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs.
   Test for SlidesApi.DeleteParagraphs method with invalid storage
*/
func TestDeleteParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteParagraphs(testname, testslideIndex, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method
*/
func TestDeletePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)
    e := initializeTest("DeletePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid name
*/
func TestDeletePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeletePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid slideIndex
*/
func TestDeletePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeletePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid shapeIndex
*/
func TestDeletePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeletePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid paragraphIndex
*/
func TestDeletePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeletePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid portionIndex
*/
func TestDeletePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeletePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid password
*/
func TestDeletePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeletePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid folder
*/
func TestDeletePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeletePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion.
   Test for SlidesApi.DeletePortion method with invalid storage
*/
func TestDeletePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeletePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeletePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeletePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method
*/
func TestDeletePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)
    e := initializeTest("DeletePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid name
*/
func TestDeletePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeletePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid slideIndex
*/
func TestDeletePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeletePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid shapeIndex
*/
func TestDeletePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeletePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid paragraphIndex
*/
func TestDeletePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeletePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeletePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid portions
*/
func TestDeletePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeletePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeletePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid password
*/
func TestDeletePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeletePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid folder
*/
func TestDeletePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeletePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions.
   Test for SlidesApi.DeletePortions method with invalid storage
*/
func TestDeletePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeletePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeletePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeletePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeletePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeletePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeletePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeletePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeletePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeletePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeletePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeletePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeletePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method
*/
func TestDeleteSection(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)
    e := initializeTest("DeleteSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid name
*/
func TestDeleteSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid sectionIndex
*/
func TestDeleteSectionInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "DeleteSection", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSection", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid withSlides
*/
func TestDeleteSectionInvalidWithSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)
    testwithSlides = new(bool)

    invalidValue := invalidizeTestParamValue(testwithSlides, "DeleteSection", "withSlides", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithSlides = nullValue
    } else {
        *testwithSlides, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteSection", "withSlides", testwithSlides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "withSlides", testwithSlides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid password
*/
func TestDeleteSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid folder
*/
func TestDeleteSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation section.
   Test for SlidesApi.DeleteSection method with invalid storage
*/
func TestDeleteSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("DeleteSection", "sectionIndex", "int32").(int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSection", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSection(testname, testsectionIndex, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method
*/
func TestDeleteSections(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)
    e := initializeTest("DeleteSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid name
*/
func TestDeleteSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid sections
*/
func TestDeleteSectionsInvalidSections(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsections, "DeleteSections", "sections", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testsections = nullValue
    } else {
        testsections, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSections", "sections", testsections)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "sections", testsections, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid withSlides
*/
func TestDeleteSectionsInvalidWithSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)
    testwithSlides = new(bool)

    invalidValue := invalidizeTestParamValue(testwithSlides, "DeleteSections", "withSlides", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithSlides = nullValue
    } else {
        *testwithSlides, _ = invalidValue.(bool)
    }

    e := initializeTest("DeleteSections", "withSlides", testwithSlides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "withSlides", testwithSlides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid password
*/
func TestDeleteSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid folder
*/
func TestDeleteSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation sections.
   Test for SlidesApi.DeleteSections method with invalid storage
*/
func TestDeleteSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSections", "name", "string").(string)
    testsections, _ := createTestParamValue("DeleteSections", "sections", "[]int32").([]int32)
    var testwithSlides *bool
    testwithSlidesValue := createTestParamValue("DeleteSections", "withSlides", "bool")
    if (testwithSlidesValue != nil) {
        testwithSlides = new(bool)
        *testwithSlides, _ = testwithSlidesValue.(bool)
    }
    testpassword, _ := createTestParamValue("DeleteSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSections(testname, testsections, testwithSlides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method
*/
func TestDeleteSlideAnimation(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method with invalid name
*/
func TestDeleteSlideAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method with invalid slideIndex
*/
func TestDeleteSlideAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method with invalid password
*/
func TestDeleteSlideAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method with invalid folder
*/
func TestDeleteSlideAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove animation from a slide.
   Test for SlidesApi.DeleteSlideAnimation method with invalid storage
*/
func TestDeleteSlideAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimation", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimation(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method
*/
func TestDeleteSlideAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid name
*/
func TestDeleteSlideAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid slideIndex
*/
func TestDeleteSlideAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid effectIndex
*/
func TestDeleteSlideAnimationEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "DeleteSlideAnimationEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid password
*/
func TestDeleteSlideAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid folder
*/
func TestDeleteSlideAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation.
   Test for SlidesApi.DeleteSlideAnimationEffect method with invalid storage
*/
func TestDeleteSlideAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationEffect(testname, testslideIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method
*/
func TestDeleteSlideAnimationInteractiveSequence(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid name
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimationInteractiveSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid slideIndex
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid sequenceIndex
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid password
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimationInteractiveSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid folder
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimationInteractiveSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an interactive sequence from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequence method with invalid storage
*/
func TestDeleteSlideAnimationInteractiveSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "sequenceIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimationInteractiveSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequence(testname, testslideIndex, testsequenceIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method
*/
func TestDeleteSlideAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid name
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid effectIndex
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid password
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove an effect from slide animation interactive sequence.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestDeleteSlideAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method
*/
func TestDeleteSlideAnimationInteractiveSequences(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method with invalid name
*/
func TestDeleteSlideAnimationInteractiveSequencesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimationInteractiveSequences", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequences", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method with invalid slideIndex
*/
func TestDeleteSlideAnimationInteractiveSequencesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequences", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method with invalid password
*/
func TestDeleteSlideAnimationInteractiveSequencesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimationInteractiveSequences", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequences", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method with invalid folder
*/
func TestDeleteSlideAnimationInteractiveSequencesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimationInteractiveSequences", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequences", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear all interactive sequences from slide animation.
   Test for SlidesApi.DeleteSlideAnimationInteractiveSequences method with invalid storage
*/
func TestDeleteSlideAnimationInteractiveSequencesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationInteractiveSequences", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimationInteractiveSequences", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationInteractiveSequences", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationInteractiveSequences(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationInteractiveSequences", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method
*/
func TestDeleteSlideAnimationMainSequence(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)
    e := initializeTest("DeleteSlideAnimationMainSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method with invalid name
*/
func TestDeleteSlideAnimationMainSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideAnimationMainSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationMainSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationMainSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method with invalid slideIndex
*/
func TestDeleteSlideAnimationMainSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideAnimationMainSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideAnimationMainSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationMainSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method with invalid password
*/
func TestDeleteSlideAnimationMainSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideAnimationMainSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationMainSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationMainSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method with invalid folder
*/
func TestDeleteSlideAnimationMainSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideAnimationMainSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationMainSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationMainSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clear main sequence in slide animation.
   Test for SlidesApi.DeleteSlideAnimationMainSequence method with invalid storage
*/
func TestDeleteSlideAnimationMainSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideAnimationMainSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideAnimationMainSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideAnimationMainSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteAnimationMainSequence(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideAnimationMainSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method
*/
func TestDeleteSlideByIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)
    e := initializeTest("DeleteSlideByIndex", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method with invalid name
*/
func TestDeleteSlideByIndexInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideByIndex", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideByIndex", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideByIndex", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method with invalid slideIndex
*/
func TestDeleteSlideByIndexInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideByIndex", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideByIndex", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideByIndex", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method with invalid password
*/
func TestDeleteSlideByIndexInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideByIndex", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideByIndex", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideByIndex", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method with invalid folder
*/
func TestDeleteSlideByIndexInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideByIndex", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideByIndex", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideByIndex", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete a presentation slide by index.
   Test for SlidesApi.DeleteSlideByIndex method with invalid storage
*/
func TestDeleteSlideByIndexInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideByIndex", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideByIndex", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideByIndex", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideByIndex", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideByIndex", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideByIndex", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideByIndex", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideByIndex", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method
*/
func TestDeleteSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)
    e := initializeTest("DeleteSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid name
*/
func TestDeleteSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid slideIndex
*/
func TestDeleteSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid shapeIndex
*/
func TestDeleteSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid password
*/
func TestDeleteSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid folder
*/
func TestDeleteSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape.
   Test for SlidesApi.DeleteSlideShape method with invalid storage
*/
func TestDeleteSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("DeleteSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method
*/
func TestDeleteSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)
    e := initializeTest("DeleteSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid name
*/
func TestDeleteSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid slideIndex
*/
func TestDeleteSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid shapes
*/
func TestDeleteSlideShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteSlideShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSlideShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid password
*/
func TestDeleteSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid folder
*/
func TestDeleteSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes.
   Test for SlidesApi.DeleteSlideShapes method with invalid storage
*/
func TestDeleteSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideShapes", "slideIndex", "int32").(int32)
    testshapes, _ := createTestParamValue("DeleteSlideShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteShapes(testname, testslideIndex, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method
*/
func TestDeleteSlideSubshape(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)
    e := initializeTest("DeleteSlideSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid name
*/
func TestDeleteSlideSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid slideIndex
*/
func TestDeleteSlideSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid path
*/
func TestDeleteSlideSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSlideSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid shapeIndex
*/
func TestDeleteSlideSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSlideSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid password
*/
func TestDeleteSlideSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid folder
*/
func TestDeleteSlideSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a shape (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshape method with invalid storage
*/
func TestDeleteSlideSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method
*/
func TestDeleteSlideSubshapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)
    e := initializeTest("DeleteSlideSubshapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid name
*/
func TestDeleteSlideSubshapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlideSubshapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid slideIndex
*/
func TestDeleteSlideSubshapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlideSubshapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlideSubshapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid path
*/
func TestDeleteSlideSubshapesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSlideSubshapes", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshapes", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid shapes
*/
func TestDeleteSlideSubshapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "DeleteSlideSubshapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSlideSubshapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid password
*/
func TestDeleteSlideSubshapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlideSubshapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid folder
*/
func TestDeleteSlideSubshapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlideSubshapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of shapes (for smart art and group shapes).
   Test for SlidesApi.DeleteSlideSubshapes method with invalid storage
*/
func TestDeleteSlideSubshapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSlideSubshapes", "path", "string").(string)
    testshapes, _ := createTestParamValue("DeleteSlideSubshapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlideSubshapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlideSubshapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapes(testname, testslideIndex, testpath, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlideSubshapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method
*/
func TestDeleteSlidesCleanSlidesList(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)
    e := initializeTest("DeleteSlidesCleanSlidesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method with invalid name
*/
func TestDeleteSlidesCleanSlidesListInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlidesCleanSlidesList", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesCleanSlidesList", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesCleanSlidesList", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method with invalid slides
*/
func TestDeleteSlidesCleanSlidesListInvalidSlides(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslides, "DeleteSlidesCleanSlidesList", "slides", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testslides = nullValue
    } else {
        testslides, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSlidesCleanSlidesList", "slides", testslides)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesCleanSlidesList", "slides", testslides, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method with invalid password
*/
func TestDeleteSlidesCleanSlidesListInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesCleanSlidesList", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesCleanSlidesList", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesCleanSlidesList", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method with invalid folder
*/
func TestDeleteSlidesCleanSlidesListInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlidesCleanSlidesList", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesCleanSlidesList", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesCleanSlidesList", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete presentation slides.
   Test for SlidesApi.DeleteSlidesCleanSlidesList method with invalid storage
*/
func TestDeleteSlidesCleanSlidesListInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "name", "string").(string)
    testslides, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "slides", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesCleanSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlidesCleanSlidesList", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesCleanSlidesList", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSlides(testname, testslides, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesCleanSlidesList", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteSlidesDocumentProperties method
*/
func TestDeleteSlidesDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperties", "storage", "string").(string)
    e := initializeTest("DeleteSlidesDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteSlidesDocumentProperties method with invalid name
*/
func TestDeleteSlidesDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlidesDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteSlidesDocumentProperties method with invalid password
*/
func TestDeleteSlidesDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteSlidesDocumentProperties method with invalid folder
*/
func TestDeleteSlidesDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlidesDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Clean document properties.
   Test for SlidesApi.DeleteSlidesDocumentProperties method with invalid storage
*/
func TestDeleteSlidesDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlidesDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method
*/
func TestDeleteSlidesDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)
    e := initializeTest("DeleteSlidesDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method with invalid name
*/
func TestDeleteSlidesDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlidesDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method with invalid propertyName
*/
func TestDeleteSlidesDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "DeleteSlidesDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method with invalid password
*/
func TestDeleteSlidesDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method with invalid folder
*/
func TestDeleteSlidesDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlidesDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Delete document property.
   Test for SlidesApi.DeleteSlidesDocumentProperty method with invalid storage
*/
func TestDeleteSlidesDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("DeleteSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlidesDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionProperties method
*/
func TestDeleteSlidesProtectionProperties(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesProtectionProperties", "storage", "string").(string)
    e := initializeTest("DeleteSlidesProtectionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionProperties method with invalid name
*/
func TestDeleteSlidesProtectionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlidesProtectionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesProtectionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionProperties method with invalid password
*/
func TestDeleteSlidesProtectionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesProtectionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesProtectionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionProperties method with invalid folder
*/
func TestDeleteSlidesProtectionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlidesProtectionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesProtectionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionProperties method with invalid storage
*/
func TestDeleteSlidesProtectionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlidesProtectionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesProtectionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtection(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionPropertiesOnline method
*/
func TestDeleteSlidesProtectionPropertiesOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "password", "string").(string)
    e := initializeTest("DeleteSlidesProtectionPropertiesOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionPropertiesOnline method with invalid document
*/
func TestDeleteSlidesProtectionPropertiesOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "DeleteSlidesProtectionPropertiesOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("DeleteSlidesProtectionPropertiesOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionPropertiesOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Resets all presentation protection settings. 
   Test for SlidesApi.DeleteSlidesProtectionPropertiesOnline method with invalid password
*/
func TestDeleteSlidesProtectionPropertiesOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("DeleteSlidesProtectionPropertiesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesProtectionPropertiesOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesProtectionPropertiesOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteProtectionOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesProtectionPropertiesOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method
*/
func TestDeleteSlidesSlideBackground(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)
    e := initializeTest("DeleteSlidesSlideBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method with invalid name
*/
func TestDeleteSlidesSlideBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSlidesSlideBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesSlideBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesSlideBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method with invalid slideIndex
*/
func TestDeleteSlidesSlideBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSlidesSlideBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSlidesSlideBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesSlideBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method with invalid password
*/
func TestDeleteSlidesSlideBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSlidesSlideBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesSlideBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesSlideBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method with invalid folder
*/
func TestDeleteSlidesSlideBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSlidesSlideBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesSlideBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesSlideBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove background from a slide.
   Test for SlidesApi.DeleteSlidesSlideBackground method with invalid storage
*/
func TestDeleteSlidesSlideBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSlidesSlideBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSlidesSlideBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSlidesSlideBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method
*/
func TestDeleteSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("DeleteSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid name
*/
func TestDeleteSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid slideIndex
*/
func TestDeleteSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid path
*/
func TestDeleteSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid shapeIndex
*/
func TestDeleteSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid paragraphIndex
*/
func TestDeleteSubshapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid password
*/
func TestDeleteSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid folder
*/
func TestDeleteSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a paragraph (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraph method with invalid storage
*/
func TestDeleteSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method
*/
func TestDeleteSubshapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)
    e := initializeTest("DeleteSubshapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid name
*/
func TestDeleteSubshapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid slideIndex
*/
func TestDeleteSubshapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid path
*/
func TestDeleteSubshapeParagraphsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapeParagraphs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid shapeIndex
*/
func TestDeleteSubshapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid paragraphs
*/
func TestDeleteSubshapeParagraphsInvalidParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphs, "DeleteSubshapeParagraphs", "paragraphs", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testparagraphs = nullValue
    } else {
        testparagraphs, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "paragraphs", testparagraphs)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "paragraphs", testparagraphs, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid password
*/
func TestDeleteSubshapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid folder
*/
func TestDeleteSubshapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of paragraphs (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapeParagraphs method with invalid storage
*/
func TestDeleteSubshapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testparagraphs, _ := createTestParamValue("DeleteSubshapeParagraphs", "paragraphs", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testparagraphs, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method
*/
func TestDeleteSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)
    e := initializeTest("DeleteSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid name
*/
func TestDeleteSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid slideIndex
*/
func TestDeleteSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid path
*/
func TestDeleteSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid shapeIndex
*/
func TestDeleteSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid paragraphIndex
*/
func TestDeleteSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid portionIndex
*/
func TestDeleteSubshapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "DeleteSubshapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid password
*/
func TestDeleteSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid folder
*/
func TestDeleteSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a portion (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortion method with invalid storage
*/
func TestDeleteSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("DeleteSubshapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method
*/
func TestDeleteSubshapePortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)
    e := initializeTest("DeleteSubshapePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid name
*/
func TestDeleteSubshapePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteSubshapePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid slideIndex
*/
func TestDeleteSubshapePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "DeleteSubshapePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid path
*/
func TestDeleteSubshapePortionsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DeleteSubshapePortions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid shapeIndex
*/
func TestDeleteSubshapePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "DeleteSubshapePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid paragraphIndex
*/
func TestDeleteSubshapePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "DeleteSubshapePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("DeleteSubshapePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid portions
*/
func TestDeleteSubshapePortionsInvalidPortions(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportions, "DeleteSubshapePortions", "portions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testportions = nullValue
    } else {
        testportions, _ = invalidValue.([]int32)
    }

    e := initializeTest("DeleteSubshapePortions", "portions", testportions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "portions", testportions, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid password
*/
func TestDeleteSubshapePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteSubshapePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid folder
*/
func TestDeleteSubshapePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteSubshapePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Remove a range of portions (for smart art and group shapes).
   Test for SlidesApi.DeleteSubshapePortions method with invalid storage
*/
func TestDeleteSubshapePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteSubshapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("DeleteSubshapePortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("DeleteSubshapePortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("DeleteSubshapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("DeleteSubshapePortions", "paragraphIndex", "int32").(int32)
    testportions, _ := createTestParamValue("DeleteSubshapePortions", "portions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("DeleteSubshapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteSubshapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteSubshapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteSubshapePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteSubshapePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteSubshapePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method
*/
func TestDeleteWatermark(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)
    e := initializeTest("DeleteWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid name
*/
func TestDeleteWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "DeleteWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid shapeName
*/
func TestDeleteWatermarkInvalidShapeName(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeName, "DeleteWatermark", "shapeName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testshapeName = nullValue
    } else {
        testshapeName, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "shapeName", testshapeName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "shapeName", testshapeName, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid password
*/
func TestDeleteWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "DeleteWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid folder
*/
func TestDeleteWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "DeleteWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.DeleteWatermark method with invalid storage
*/
func TestDeleteWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("DeleteWatermark", "name", "string").(string)
    testshapeName, _ := createTestParamValue("DeleteWatermark", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("DeleteWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("DeleteWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("DeleteWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "DeleteWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("DeleteWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.DeleteWatermark(testname, testshapeName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DeleteWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method
*/
func TestDownloadFile(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)
    e := initializeTest("DownloadFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid path
*/
func TestDownloadFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "DownloadFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid storageName
*/
func TestDownloadFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "DownloadFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Download file
   Test for SlidesApi.DownloadFile method with invalid versionId
*/
func TestDownloadFileInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("DownloadFile", "path", "string").(string)
    teststorageName, _ := createTestParamValue("DownloadFile", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("DownloadFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "DownloadFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("DownloadFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadFile(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "DownloadFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Get disc usage
   Test for SlidesApi.GetDiscUsage method
*/
func TestGetDiscUsage(t *testing.T) {
    teststorageName, _ := createTestParamValue("GetDiscUsage", "storageName", "string").(string)
    e := initializeTest("GetDiscUsage", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDiscUsage(teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get disc usage
   Test for SlidesApi.GetDiscUsage method with invalid storageName
*/
func TestGetDiscUsageInvalidStorageName(t *testing.T) {
    teststorageName, _ := createTestParamValue("GetDiscUsage", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetDiscUsage", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetDiscUsage", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDiscUsage(teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetDiscUsage", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method
*/
func TestGetFileVersions(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)
    e := initializeTest("GetFileVersions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFileVersions(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method with invalid path
*/
func TestGetFileVersionsInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetFileVersions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetFileVersions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFileVersions(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFileVersions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Get file versions
   Test for SlidesApi.GetFileVersions method with invalid storageName
*/
func TestGetFileVersionsInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("GetFileVersions", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFileVersions", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetFileVersions", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetFileVersions", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFileVersions(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFileVersions", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method
*/
func TestGetFilesList(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)
    e := initializeTest("GetFilesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFilesList(testpath, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method with invalid path
*/
func TestGetFilesListInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetFilesList", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetFilesList", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFilesList(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFilesList", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all files and folders within a folder
   Test for SlidesApi.GetFilesList method with invalid storageName
*/
func TestGetFilesListInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("GetFilesList", "path", "string").(string)
    teststorageName, _ := createTestParamValue("GetFilesList", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "GetFilesList", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("GetFilesList", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFilesList(testpath, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetFilesList", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method
*/
func TestGetLayoutSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)
    e := initializeTest("GetLayoutSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid name
*/
func TestGetLayoutSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetLayoutSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid slideIndex
*/
func TestGetLayoutSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetLayoutSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetLayoutSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid password
*/
func TestGetLayoutSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetLayoutSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid folder
*/
func TestGetLayoutSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetLayoutSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlide info.
   Test for SlidesApi.GetLayoutSlide method with invalid storage
*/
func TestGetLayoutSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetLayoutSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetLayoutSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlidesList method
*/
func TestGetLayoutSlidesList(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlidesList", "storage", "string").(string)
    e := initializeTest("GetLayoutSlidesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlidesList method with invalid name
*/
func TestGetLayoutSlidesListInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetLayoutSlidesList", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlidesList", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlidesList", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlidesList method with invalid password
*/
func TestGetLayoutSlidesListInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetLayoutSlidesList", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlidesList", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlidesList", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlidesList method with invalid folder
*/
func TestGetLayoutSlidesListInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetLayoutSlidesList", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlidesList", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlidesList", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation layoutSlides info.
   Test for SlidesApi.GetLayoutSlidesList method with invalid storage
*/
func TestGetLayoutSlidesListInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetLayoutSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetLayoutSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetLayoutSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetLayoutSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetLayoutSlidesList", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetLayoutSlidesList", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetLayoutSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetLayoutSlidesList", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method
*/
func TestGetMasterSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)
    e := initializeTest("GetMasterSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid name
*/
func TestGetMasterSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetMasterSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid slideIndex
*/
func TestGetMasterSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetMasterSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetMasterSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid password
*/
func TestGetMasterSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetMasterSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid folder
*/
func TestGetMasterSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetMasterSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlide info.
   Test for SlidesApi.GetMasterSlide method with invalid storage
*/
func TestGetMasterSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetMasterSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetMasterSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetMasterSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlidesList method
*/
func TestGetMasterSlidesList(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlidesList", "storage", "string").(string)
    e := initializeTest("GetMasterSlidesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlidesList method with invalid name
*/
func TestGetMasterSlidesListInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetMasterSlidesList", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlidesList", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlidesList", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlidesList method with invalid password
*/
func TestGetMasterSlidesListInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetMasterSlidesList", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlidesList", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlidesList", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlidesList method with invalid folder
*/
func TestGetMasterSlidesListInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetMasterSlidesList", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlidesList", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlidesList", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation masterSlides info.
   Test for SlidesApi.GetMasterSlidesList method with invalid storage
*/
func TestGetMasterSlidesListInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetMasterSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetMasterSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetMasterSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetMasterSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetMasterSlidesList", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetMasterSlidesList", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetMasterSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetMasterSlidesList", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method
*/
func TestGetNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)
    e := initializeTest("GetNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid name
*/
func TestGetNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid slideIndex
*/
func TestGetNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid password
*/
func TestGetNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid folder
*/
func TestGetNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.GetNotesSlide method with invalid storage
*/
func TestGetNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method
*/
func TestGetNotesSlideExists(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)
    e := initializeTest("GetNotesSlideExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method with invalid name
*/
func TestGetNotesSlideExistsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideExists", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideExists", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideExists", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method with invalid slideIndex
*/
func TestGetNotesSlideExistsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideExists", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideExists", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideExists", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method with invalid password
*/
func TestGetNotesSlideExistsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideExists", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideExists", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideExists", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method with invalid folder
*/
func TestGetNotesSlideExistsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideExists", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideExists", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideExists", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.GetNotesSlideExists method with invalid storage
*/
func TestGetNotesSlideExistsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideExists", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideExists", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideExists", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideExists", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideExists", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideExists", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExists(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideExists", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method
*/
func TestGetNotesSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("GetNotesSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid name
*/
func TestGetNotesSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid slideIndex
*/
func TestGetNotesSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid password
*/
func TestGetNotesSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid folder
*/
func TestGetNotesSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get header/footer info for the notes slide.
   Test for SlidesApi.GetNotesSlideHeaderFooter method with invalid storage
*/
func TestGetNotesSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method
*/
func TestGetNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid name
*/
func TestGetNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid slideIndex
*/
func TestGetNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid shapeIndex
*/
func TestGetNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid password
*/
func TestGetNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid folder
*/
func TestGetNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetNotesSlideShape method with invalid storage
*/
func TestGetNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method
*/
func TestGetNotesSlideShapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid name
*/
func TestGetNotesSlideShapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid slideIndex
*/
func TestGetNotesSlideShapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid shapeIndex
*/
func TestGetNotesSlideShapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid paragraphIndex
*/
func TestGetNotesSlideShapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlideShapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid password
*/
func TestGetNotesSlideShapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid folder
*/
func TestGetNotesSlideShapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetNotesSlideShapeParagraph method with invalid storage
*/
func TestGetNotesSlideShapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method
*/
func TestGetNotesSlideShapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid name
*/
func TestGetNotesSlideShapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid slideIndex
*/
func TestGetNotesSlideShapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid shapeIndex
*/
func TestGetNotesSlideShapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid password
*/
func TestGetNotesSlideShapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid folder
*/
func TestGetNotesSlideShapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetNotesSlideShapeParagraphs method with invalid storage
*/
func TestGetNotesSlideShapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method
*/
func TestGetNotesSlideShapePortion(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid name
*/
func TestGetNotesSlideShapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid slideIndex
*/
func TestGetNotesSlideShapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid shapeIndex
*/
func TestGetNotesSlideShapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid paragraphIndex
*/
func TestGetNotesSlideShapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlideShapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid portionIndex
*/
func TestGetNotesSlideShapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetNotesSlideShapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid password
*/
func TestGetNotesSlideShapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid folder
*/
func TestGetNotesSlideShapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetNotesSlideShapePortion method with invalid storage
*/
func TestGetNotesSlideShapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method
*/
func TestGetNotesSlideShapePortions(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapePortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid name
*/
func TestGetNotesSlideShapePortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapePortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid slideIndex
*/
func TestGetNotesSlideShapePortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapePortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid shapeIndex
*/
func TestGetNotesSlideShapePortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetNotesSlideShapePortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid paragraphIndex
*/
func TestGetNotesSlideShapePortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetNotesSlideShapePortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapePortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid password
*/
func TestGetNotesSlideShapePortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapePortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid folder
*/
func TestGetNotesSlideShapePortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapePortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetNotesSlideShapePortions method with invalid storage
*/
func TestGetNotesSlideShapePortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapePortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetNotesSlideShapePortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapePortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapePortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapePortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapePortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapePortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlidePortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapePortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method
*/
func TestGetNotesSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)
    e := initializeTest("GetNotesSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid name
*/
func TestGetNotesSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid slideIndex
*/
func TestGetNotesSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid password
*/
func TestGetNotesSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid folder
*/
func TestGetNotesSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetNotesSlideShapes method with invalid storage
*/
func TestGetNotesSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetNotesSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method
*/
func TestGetNotesSlideWithFormat(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)
    e := initializeTest("GetNotesSlideWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid name
*/
func TestGetNotesSlideWithFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetNotesSlideWithFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid slideIndex
*/
func TestGetNotesSlideWithFormatInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetNotesSlideWithFormat", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideWithFormat", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid format
*/
func TestGetNotesSlideWithFormatInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "GetNotesSlideWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid width
*/
func TestGetNotesSlideWithFormatInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "GetNotesSlideWithFormat", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideWithFormat", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid height
*/
func TestGetNotesSlideWithFormatInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "GetNotesSlideWithFormat", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("GetNotesSlideWithFormat", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid password
*/
func TestGetNotesSlideWithFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetNotesSlideWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid folder
*/
func TestGetNotesSlideWithFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetNotesSlideWithFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid storage
*/
func TestGetNotesSlideWithFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetNotesSlideWithFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.GetNotesSlideWithFormat method with invalid fontsFolder
*/
func TestGetNotesSlideWithFormatInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetNotesSlideWithFormat", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("GetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("GetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("GetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetNotesSlideWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetNotesSlideWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetNotesSlideWithFormat", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("GetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "GetNotesSlideWithFormat", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetNotesSlideWithFormat", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlide(testname, testslideIndex, testformat, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetNotesSlideWithFormat", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method
*/
func TestGetParagraphPortion(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)
    e := initializeTest("GetParagraphPortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid name
*/
func TestGetParagraphPortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetParagraphPortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid slideIndex
*/
func TestGetParagraphPortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetParagraphPortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid shapeIndex
*/
func TestGetParagraphPortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetParagraphPortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid paragraphIndex
*/
func TestGetParagraphPortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetParagraphPortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid portionIndex
*/
func TestGetParagraphPortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetParagraphPortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid password
*/
func TestGetParagraphPortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetParagraphPortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid folder
*/
func TestGetParagraphPortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetParagraphPortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info.
   Test for SlidesApi.GetParagraphPortion method with invalid storage
*/
func TestGetParagraphPortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetParagraphPortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method
*/
func TestGetParagraphPortions(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)
    e := initializeTest("GetParagraphPortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid name
*/
func TestGetParagraphPortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetParagraphPortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid slideIndex
*/
func TestGetParagraphPortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetParagraphPortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid shapeIndex
*/
func TestGetParagraphPortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetParagraphPortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid paragraphIndex
*/
func TestGetParagraphPortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetParagraphPortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetParagraphPortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid password
*/
func TestGetParagraphPortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetParagraphPortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid folder
*/
func TestGetParagraphPortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetParagraphPortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info.
   Test for SlidesApi.GetParagraphPortions method with invalid storage
*/
func TestGetParagraphPortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetParagraphPortions", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetParagraphPortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetParagraphPortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPortions(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetParagraphPortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method
*/
func TestGetSections(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)
    e := initializeTest("GetSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid name
*/
func TestGetSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid password
*/
func TestGetSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid folder
*/
func TestGetSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation sections info.
   Test for SlidesApi.GetSections method with invalid storage
*/
func TestGetSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSections", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSections(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method
*/
func TestGetSlideAnimation(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)
    e := initializeTest("GetSlideAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid name
*/
func TestGetSlideAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid slideIndex
*/
func TestGetSlideAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid shapeIndex
*/
func TestGetSlideAnimationInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)
    testshapeIndex = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideAnimation", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeIndex = nullValue
    } else {
        *testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideAnimation", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid password
*/
func TestGetSlideAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid folder
*/
func TestGetSlideAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide animation effects.
   Test for SlidesApi.GetSlideAnimation method with invalid storage
*/
func TestGetSlideAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideAnimation", "slideIndex", "int32").(int32)
    var testshapeIndex *int32
    testshapeIndexValue := createTestParamValue("GetSlideAnimation", "shapeIndex", "int32")
    if (testshapeIndexValue != nil) {
        testshapeIndex = new(int32)
        *testshapeIndex, _ = testshapeIndexValue.(int32)
    }
    testpassword, _ := createTestParamValue("GetSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetAnimation(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method
*/
func TestGetSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("GetSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid name
*/
func TestGetSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid slideIndex
*/
func TestGetSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid password
*/
func TestGetSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid folder
*/
func TestGetSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get footer info for the slide.
   Test for SlidesApi.GetSlideHeaderFooter method with invalid storage
*/
func TestGetSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideHeaderFooter", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideHeaderFooter(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method
*/
func TestGetSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)
    e := initializeTest("GetSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid name
*/
func TestGetSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid slideIndex
*/
func TestGetSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid shapeIndex
*/
func TestGetSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid password
*/
func TestGetSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid folder
*/
func TestGetSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info.
   Test for SlidesApi.GetSlideShape method with invalid storage
*/
func TestGetSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShape(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method
*/
func TestGetSlideShapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)
    e := initializeTest("GetSlideShapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid name
*/
func TestGetSlideShapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideShapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid slideIndex
*/
func TestGetSlideShapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideShapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid shapeIndex
*/
func TestGetSlideShapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideShapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid paragraphIndex
*/
func TestGetSlideShapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSlideShapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid password
*/
func TestGetSlideShapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideShapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid folder
*/
func TestGetSlideShapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideShapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info.
   Test for SlidesApi.GetSlideShapeParagraph method with invalid storage
*/
func TestGetSlideShapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideShapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method
*/
func TestGetSlideShapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)
    e := initializeTest("GetSlideShapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid name
*/
func TestGetSlideShapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideShapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid slideIndex
*/
func TestGetSlideShapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideShapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid shapeIndex
*/
func TestGetSlideShapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideShapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid password
*/
func TestGetSlideShapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideShapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid folder
*/
func TestGetSlideShapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideShapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info.
   Test for SlidesApi.GetSlideShapeParagraphs method with invalid storage
*/
func TestGetSlideShapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("GetSlideShapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideShapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetParagraphs(testname, testslideIndex, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method
*/
func TestGetSlideShapes(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)
    e := initializeTest("GetSlideShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method with invalid name
*/
func TestGetSlideShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method with invalid slideIndex
*/
func TestGetSlideShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method with invalid password
*/
func TestGetSlideShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method with invalid folder
*/
func TestGetSlideShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideShapes method with invalid storage
*/
func TestGetSlideShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideShapes", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetShapes(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method
*/
func TestGetSlideSubshape(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)
    e := initializeTest("GetSlideSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid name
*/
func TestGetSlideSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid slideIndex
*/
func TestGetSlideSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid path
*/
func TestGetSlideSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSlideSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid shapeIndex
*/
func TestGetSlideSubshapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideSubshape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid password
*/
func TestGetSlideSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid folder
*/
func TestGetSlideSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shape info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshape method with invalid storage
*/
func TestGetSlideSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshape", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshape", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshape(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method
*/
func TestGetSlideSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("GetSlideSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid name
*/
func TestGetSlideSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid slideIndex
*/
func TestGetSlideSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid path
*/
func TestGetSlideSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSlideSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid shapeIndex
*/
func TestGetSlideSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid paragraphIndex
*/
func TestGetSlideSubshapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSlideSubshapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid password
*/
func TestGetSlideSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid folder
*/
func TestGetSlideSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraph info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraph method with invalid storage
*/
func TestGetSlideSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSlideSubshapeParagraph", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method
*/
func TestGetSlideSubshapeParagraphs(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)
    e := initializeTest("GetSlideSubshapeParagraphs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid name
*/
func TestGetSlideSubshapeParagraphsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideSubshapeParagraphs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid slideIndex
*/
func TestGetSlideSubshapeParagraphsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideSubshapeParagraphs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid path
*/
func TestGetSlideSubshapeParagraphsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSlideSubshapeParagraphs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid shapeIndex
*/
func TestGetSlideSubshapeParagraphsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSlideSubshapeParagraphs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid password
*/
func TestGetSlideSubshapeParagraphsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideSubshapeParagraphs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid folder
*/
func TestGetSlideSubshapeParagraphsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideSubshapeParagraphs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read shape paragraphs info (for smart art and group shapes).
   Test for SlidesApi.GetSlideSubshapeParagraphs method with invalid storage
*/
func TestGetSlideSubshapeParagraphsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapeParagraphs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapeParagraphs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSlideSubshapeParagraphs", "shapeIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlideSubshapeParagraphs", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapeParagraphs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapeParagraphs", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideSubshapeParagraphs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapeParagraphs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapeParagraphs(testname, testslideIndex, testpath, testshapeIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapeParagraphs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method
*/
func TestGetSlideSubshapes(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)
    e := initializeTest("GetSlideSubshapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid name
*/
func TestGetSlideSubshapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlideSubshapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid slideIndex
*/
func TestGetSlideSubshapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlideSubshapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlideSubshapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid path
*/
func TestGetSlideSubshapesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSlideSubshapes", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapes", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid password
*/
func TestGetSlideSubshapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlideSubshapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid folder
*/
func TestGetSlideSubshapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlideSubshapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide shapes info.
   Test for SlidesApi.GetSlideSubshapes method with invalid storage
*/
func TestGetSlideSubshapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlideSubshapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlideSubshapes", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSlideSubshapes", "path", "string").(string)
    testpassword, _ := createTestParamValue("GetSlideSubshapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlideSubshapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlideSubshapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlideSubshapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlideSubshapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapes(testname, testslideIndex, testpath, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlideSubshapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get API info.
   Test for SlidesApi.GetSlidesApiInfo method
*/
func TestGetSlidesApiInfo(t *testing.T) {
    e := initializeTest("GetSlidesApiInfo", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetApiInfo()
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetSlidesDocument method
*/
func TestGetSlidesDocument(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocument", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocument", "storage", "string").(string)
    e := initializeTest("GetSlidesDocument", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetSlidesDocument method with invalid name
*/
func TestGetSlidesDocumentInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocument", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesDocument", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocument", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocument", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetSlidesDocument method with invalid password
*/
func TestGetSlidesDocumentInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocument", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesDocument", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocument", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocument", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetSlidesDocument method with invalid folder
*/
func TestGetSlidesDocumentInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocument", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesDocument", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocument", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocument", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation info.
   Test for SlidesApi.GetSlidesDocument method with invalid storage
*/
func TestGetSlidesDocumentInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocument", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesDocument", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocument", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentation(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocument", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesDocumentProperties method
*/
func TestGetSlidesDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperties", "storage", "string").(string)
    e := initializeTest("GetSlidesDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesDocumentProperties method with invalid name
*/
func TestGetSlidesDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesDocumentProperties method with invalid password
*/
func TestGetSlidesDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesDocumentProperties method with invalid folder
*/
func TestGetSlidesDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesDocumentProperties method with invalid storage
*/
func TestGetSlidesDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method
*/
func TestGetSlidesDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)
    e := initializeTest("GetSlidesDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method with invalid name
*/
func TestGetSlidesDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method with invalid propertyName
*/
func TestGetSlidesDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "GetSlidesDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method with invalid password
*/
func TestGetSlidesDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method with invalid folder
*/
func TestGetSlidesDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document property.
   Test for SlidesApi.GetSlidesDocumentProperty method with invalid storage
*/
func TestGetSlidesDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("GetSlidesDocumentProperty", "propertyName", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetDocumentProperty(testname, testpropertyName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method
*/
func TestGetSlidesImageWithDefaultFormat(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)
    e := initializeTest("GetSlidesImageWithDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method with invalid name
*/
func TestGetSlidesImageWithDefaultFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesImageWithDefaultFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithDefaultFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithDefaultFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method with invalid index
*/
func TestGetSlidesImageWithDefaultFormatInvalidIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "GetSlidesImageWithDefaultFormat", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesImageWithDefaultFormat", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithDefaultFormat", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method with invalid password
*/
func TestGetSlidesImageWithDefaultFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesImageWithDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method with invalid folder
*/
func TestGetSlidesImageWithDefaultFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesImageWithDefaultFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithDefaultFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithDefaultFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.GetSlidesImageWithDefaultFormat method with invalid storage
*/
func TestGetSlidesImageWithDefaultFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesImageWithDefaultFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithDefaultFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormat(testname, testindex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithDefaultFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method
*/
func TestGetSlidesImageWithFormat(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)
    e := initializeTest("GetSlidesImageWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid name
*/
func TestGetSlidesImageWithFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesImageWithFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid index
*/
func TestGetSlidesImageWithFormatInvalidIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "GetSlidesImageWithFormat", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesImageWithFormat", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid format
*/
func TestGetSlidesImageWithFormatInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "GetSlidesImageWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid password
*/
func TestGetSlidesImageWithFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesImageWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid folder
*/
func TestGetSlidesImageWithFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesImageWithFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.GetSlidesImageWithFormat method with invalid storage
*/
func TestGetSlidesImageWithFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImageWithFormat", "name", "string").(string)
    testindex, _ := createTestParamValue("GetSlidesImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("GetSlidesImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImageWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImageWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImageWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesImageWithFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImageWithFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImage(testname, testindex, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImageWithFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetSlidesImages method
*/
func TestGetSlidesImages(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImages", "storage", "string").(string)
    e := initializeTest("GetSlidesImages", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetSlidesImages method with invalid name
*/
func TestGetSlidesImagesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesImages", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImages", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImages", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetSlidesImages method with invalid password
*/
func TestGetSlidesImagesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesImages", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImages", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImages", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetSlidesImages method with invalid folder
*/
func TestGetSlidesImagesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesImages", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImages", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImages", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation images info.
   Test for SlidesApi.GetSlidesImages method with invalid storage
*/
func TestGetSlidesImagesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesImages", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesImages", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesImages", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationImages(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesImages", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method
*/
func TestGetSlidesPlaceholder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)
    e := initializeTest("GetSlidesPlaceholder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid name
*/
func TestGetSlidesPlaceholderInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesPlaceholder", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholder", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid slideIndex
*/
func TestGetSlidesPlaceholderInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesPlaceholder", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesPlaceholder", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid placeholderIndex
*/
func TestGetSlidesPlaceholderInvalidPlaceholderIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testplaceholderIndex, "GetSlidesPlaceholder", "placeholderIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testplaceholderIndex = nullValue
    } else {
        testplaceholderIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesPlaceholder", "placeholderIndex", testplaceholderIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "placeholderIndex", testplaceholderIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid password
*/
func TestGetSlidesPlaceholderInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesPlaceholder", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholder", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid folder
*/
func TestGetSlidesPlaceholderInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesPlaceholder", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholder", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholder info.
   Test for SlidesApi.GetSlidesPlaceholder method with invalid storage
*/
func TestGetSlidesPlaceholderInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholder", "slideIndex", "int32").(int32)
    testplaceholderIndex, _ := createTestParamValue("GetSlidesPlaceholder", "placeholderIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholder", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesPlaceholder", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholder", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholder(testname, testslideIndex, testplaceholderIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholder", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method
*/
func TestGetSlidesPlaceholders(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)
    e := initializeTest("GetSlidesPlaceholders", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method with invalid name
*/
func TestGetSlidesPlaceholdersInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesPlaceholders", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholders", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholders", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method with invalid slideIndex
*/
func TestGetSlidesPlaceholdersInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesPlaceholders", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesPlaceholders", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholders", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method with invalid password
*/
func TestGetSlidesPlaceholdersInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesPlaceholders", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholders", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholders", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method with invalid folder
*/
func TestGetSlidesPlaceholdersInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesPlaceholders", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholders", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholders", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide placeholders info.
   Test for SlidesApi.GetSlidesPlaceholders method with invalid storage
*/
func TestGetSlidesPlaceholdersInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPlaceholders", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesPlaceholders", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesPlaceholders", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPlaceholders", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPlaceholders", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesPlaceholders", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPlaceholders", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPlaceholders(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPlaceholders", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method
*/
func TestGetSlidesPresentationTextItems(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)
    e := initializeTest("GetSlidesPresentationTextItems", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method with invalid name
*/
func TestGetSlidesPresentationTextItemsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesPresentationTextItems", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPresentationTextItems", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPresentationTextItems", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method with invalid withEmpty
*/
func TestGetSlidesPresentationTextItemsInvalidWithEmpty(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)
    testwithEmpty = new(bool)

    invalidValue := invalidizeTestParamValue(testwithEmpty, "GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithEmpty = nullValue
    } else {
        *testwithEmpty, _ = invalidValue.(bool)
    }

    e := initializeTest("GetSlidesPresentationTextItems", "withEmpty", testwithEmpty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPresentationTextItems", "withEmpty", testwithEmpty, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method with invalid password
*/
func TestGetSlidesPresentationTextItemsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesPresentationTextItems", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPresentationTextItems", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPresentationTextItems", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method with invalid folder
*/
func TestGetSlidesPresentationTextItemsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesPresentationTextItems", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPresentationTextItems", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPresentationTextItems", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract presentation text items.
   Test for SlidesApi.GetSlidesPresentationTextItems method with invalid storage
*/
func TestGetSlidesPresentationTextItemsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesPresentationTextItems", "name", "string").(string)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesPresentationTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesPresentationTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesPresentationTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesPresentationTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesPresentationTextItems", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesPresentationTextItems", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetPresentationTextItems(testname, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesPresentationTextItems", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetSlidesProtectionProperties method
*/
func TestGetSlidesProtectionProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesProtectionProperties", "storage", "string").(string)
    e := initializeTest("GetSlidesProtectionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetSlidesProtectionProperties method with invalid name
*/
func TestGetSlidesProtectionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesProtectionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesProtectionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesProtectionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetSlidesProtectionProperties method with invalid password
*/
func TestGetSlidesProtectionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesProtectionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesProtectionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesProtectionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetSlidesProtectionProperties method with invalid folder
*/
func TestGetSlidesProtectionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesProtectionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesProtectionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesProtectionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation protection properties.
   Test for SlidesApi.GetSlidesProtectionProperties method with invalid storage
*/
func TestGetSlidesProtectionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesProtectionProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesProtectionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesProtectionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetProtectionProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesProtectionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method
*/
func TestGetSlidesSlide(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)
    e := initializeTest("GetSlidesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method with invalid name
*/
func TestGetSlidesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method with invalid slideIndex
*/
func TestGetSlidesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method with invalid password
*/
func TestGetSlidesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method with invalid folder
*/
func TestGetSlidesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide info.
   Test for SlidesApi.GetSlidesSlide method with invalid storage
*/
func TestGetSlidesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlide(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method
*/
func TestGetSlidesSlideBackground(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)
    e := initializeTest("GetSlidesSlideBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method with invalid name
*/
func TestGetSlidesSlideBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlideBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method with invalid slideIndex
*/
func TestGetSlidesSlideBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesSlideBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesSlideBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method with invalid password
*/
func TestGetSlidesSlideBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlideBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method with invalid folder
*/
func TestGetSlidesSlideBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlideBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide background info.
   Test for SlidesApi.GetSlidesSlideBackground method with invalid storage
*/
func TestGetSlidesSlideBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideBackground", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlideBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetBackground(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method
*/
func TestGetSlidesSlideComments(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)
    e := initializeTest("GetSlidesSlideComments", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method with invalid name
*/
func TestGetSlidesSlideCommentsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlideComments", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideComments", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideComments", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method with invalid slideIndex
*/
func TestGetSlidesSlideCommentsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesSlideComments", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesSlideComments", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideComments", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method with invalid password
*/
func TestGetSlidesSlideCommentsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlideComments", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideComments", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideComments", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method with invalid folder
*/
func TestGetSlidesSlideCommentsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlideComments", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideComments", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideComments", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide comments.
   Test for SlidesApi.GetSlidesSlideComments method with invalid storage
*/
func TestGetSlidesSlideCommentsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideComments", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideComments", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideComments", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideComments", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideComments", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlideComments", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideComments", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetComments(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideComments", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method
*/
func TestGetSlidesSlideImages(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)
    e := initializeTest("GetSlidesSlideImages", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method with invalid name
*/
func TestGetSlidesSlideImagesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlideImages", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideImages", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideImages", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method with invalid slideIndex
*/
func TestGetSlidesSlideImagesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesSlideImages", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesSlideImages", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideImages", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method with invalid password
*/
func TestGetSlidesSlideImagesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlideImages", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideImages", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideImages", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method with invalid folder
*/
func TestGetSlidesSlideImagesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlideImages", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideImages", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideImages", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide images info.
   Test for SlidesApi.GetSlidesSlideImages method with invalid storage
*/
func TestGetSlidesSlideImagesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideImages", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideImages", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesSlideImages", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideImages", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideImages", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlideImages", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideImages", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideImages(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideImages", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlidesSlideProperties method
*/
func TestGetSlidesSlideProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideProperties", "storage", "string").(string)
    e := initializeTest("GetSlidesSlideProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlidesSlideProperties method with invalid name
*/
func TestGetSlidesSlidePropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlideProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlidesSlideProperties method with invalid password
*/
func TestGetSlidesSlidePropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlideProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlidesSlideProperties method with invalid folder
*/
func TestGetSlidesSlidePropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlideProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slide properties.
   Test for SlidesApi.GetSlidesSlideProperties method with invalid storage
*/
func TestGetSlidesSlidePropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlideProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method
*/
func TestGetSlidesSlideTextItems(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)
    e := initializeTest("GetSlidesSlideTextItems", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid name
*/
func TestGetSlidesSlideTextItemsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlideTextItems", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideTextItems", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid slideIndex
*/
func TestGetSlidesSlideTextItemsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesSlideTextItems", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesSlideTextItems", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid withEmpty
*/
func TestGetSlidesSlideTextItemsInvalidWithEmpty(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)
    testwithEmpty = new(bool)

    invalidValue := invalidizeTestParamValue(testwithEmpty, "GetSlidesSlideTextItems", "withEmpty", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testwithEmpty = nullValue
    } else {
        *testwithEmpty, _ = invalidValue.(bool)
    }

    e := initializeTest("GetSlidesSlideTextItems", "withEmpty", testwithEmpty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "withEmpty", testwithEmpty, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid password
*/
func TestGetSlidesSlideTextItemsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlideTextItems", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideTextItems", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid folder
*/
func TestGetSlidesSlideTextItemsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlideTextItems", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideTextItems", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Extract slide text items.
   Test for SlidesApi.GetSlidesSlideTextItems method with invalid storage
*/
func TestGetSlidesSlideTextItemsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlideTextItems", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesSlideTextItems", "slideIndex", "int32").(int32)
    var testwithEmpty *bool
    testwithEmptyValue := createTestParamValue("GetSlidesSlideTextItems", "withEmpty", "bool")
    if (testwithEmptyValue != nil) {
        testwithEmpty = new(bool)
        *testwithEmpty, _ = testwithEmptyValue.(bool)
    }
    testpassword, _ := createTestParamValue("GetSlidesSlideTextItems", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlideTextItems", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlideTextItems", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlideTextItems", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlideTextItems", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlideTextItems(testname, testslideIndex, testwithEmpty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlideTextItems", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlidesSlidesList method
*/
func TestGetSlidesSlidesList(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlidesList", "storage", "string").(string)
    e := initializeTest("GetSlidesSlidesList", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlidesSlidesList method with invalid name
*/
func TestGetSlidesSlidesListInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesSlidesList", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlidesList", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlidesList", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlidesSlidesList method with invalid password
*/
func TestGetSlidesSlidesListInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesSlidesList", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlidesList", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlidesList", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlidesSlidesList method with invalid folder
*/
func TestGetSlidesSlidesListInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesSlidesList", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlidesList", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlidesList", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation slides info.
   Test for SlidesApi.GetSlidesSlidesList method with invalid storage
*/
func TestGetSlidesSlidesListInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesSlidesList", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesSlidesList", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesSlidesList", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesSlidesList", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesSlidesList", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesSlidesList", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSlides(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesSlidesList", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method
*/
func TestGetSlidesTheme(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)
    e := initializeTest("GetSlidesTheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method with invalid name
*/
func TestGetSlidesThemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesTheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesTheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesTheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method with invalid slideIndex
*/
func TestGetSlidesThemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesTheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesTheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesTheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method with invalid password
*/
func TestGetSlidesThemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesTheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesTheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesTheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method with invalid folder
*/
func TestGetSlidesThemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesTheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesTheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesTheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme info.
   Test for SlidesApi.GetSlidesTheme method with invalid storage
*/
func TestGetSlidesThemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesTheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesTheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesTheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesTheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesTheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesTheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesTheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetTheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesTheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method
*/
func TestGetSlidesThemeColorScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)
    e := initializeTest("GetSlidesThemeColorScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method with invalid name
*/
func TestGetSlidesThemeColorSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesThemeColorScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeColorScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeColorScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method with invalid slideIndex
*/
func TestGetSlidesThemeColorSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesThemeColorScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesThemeColorScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeColorScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method with invalid password
*/
func TestGetSlidesThemeColorSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesThemeColorScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeColorScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeColorScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method with invalid folder
*/
func TestGetSlidesThemeColorSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesThemeColorScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeColorScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeColorScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme color scheme info.
   Test for SlidesApi.GetSlidesThemeColorScheme method with invalid storage
*/
func TestGetSlidesThemeColorSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeColorScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeColorScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeColorScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeColorScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeColorScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesThemeColorScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeColorScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetColorScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeColorScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method
*/
func TestGetSlidesThemeFontScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)
    e := initializeTest("GetSlidesThemeFontScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method with invalid name
*/
func TestGetSlidesThemeFontSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesThemeFontScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFontScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFontScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method with invalid slideIndex
*/
func TestGetSlidesThemeFontSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesThemeFontScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesThemeFontScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFontScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method with invalid password
*/
func TestGetSlidesThemeFontSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesThemeFontScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFontScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFontScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method with invalid folder
*/
func TestGetSlidesThemeFontSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesThemeFontScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFontScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFontScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme font scheme info.
   Test for SlidesApi.GetSlidesThemeFontScheme method with invalid storage
*/
func TestGetSlidesThemeFontSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFontScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFontScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFontScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFontScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFontScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesThemeFontScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFontScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFontScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFontScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method
*/
func TestGetSlidesThemeFormatScheme(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)
    e := initializeTest("GetSlidesThemeFormatScheme", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method with invalid name
*/
func TestGetSlidesThemeFormatSchemeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesThemeFormatScheme", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFormatScheme", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFormatScheme", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method with invalid slideIndex
*/
func TestGetSlidesThemeFormatSchemeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSlidesThemeFormatScheme", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSlidesThemeFormatScheme", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFormatScheme", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method with invalid password
*/
func TestGetSlidesThemeFormatSchemeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesThemeFormatScheme", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFormatScheme", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFormatScheme", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method with invalid folder
*/
func TestGetSlidesThemeFormatSchemeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesThemeFormatScheme", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFormatScheme", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFormatScheme", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read slide theme format scheme info.
   Test for SlidesApi.GetSlidesThemeFormatScheme method with invalid storage
*/
func TestGetSlidesThemeFormatSchemeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesThemeFormatScheme", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSlidesThemeFormatScheme", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSlidesThemeFormatScheme", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesThemeFormatScheme", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesThemeFormatScheme", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesThemeFormatScheme", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesThemeFormatScheme", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetFormatScheme(testname, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesThemeFormatScheme", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesViewProperties method
*/
func TestGetSlidesViewProperties(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesViewProperties", "storage", "string").(string)
    e := initializeTest("GetSlidesViewProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesViewProperties method with invalid name
*/
func TestGetSlidesViewPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSlidesViewProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesViewProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesViewProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesViewProperties method with invalid password
*/
func TestGetSlidesViewPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSlidesViewProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesViewProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesViewProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesViewProperties method with invalid folder
*/
func TestGetSlidesViewPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSlidesViewProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesViewProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesViewProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read presentation document properties.
   Test for SlidesApi.GetSlidesViewProperties method with invalid storage
*/
func TestGetSlidesViewPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSlidesViewProperties", "name", "string").(string)
    testpassword, _ := createTestParamValue("GetSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSlidesViewProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSlidesViewProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetViewProperties(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSlidesViewProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method
*/
func TestGetSubshapeParagraphPortion(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)
    e := initializeTest("GetSubshapeParagraphPortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid name
*/
func TestGetSubshapeParagraphPortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapeParagraphPortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid slideIndex
*/
func TestGetSubshapeParagraphPortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapeParagraphPortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid path
*/
func TestGetSubshapeParagraphPortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapeParagraphPortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid shapeIndex
*/
func TestGetSubshapeParagraphPortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapeParagraphPortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid paragraphIndex
*/
func TestGetSubshapeParagraphPortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSubshapeParagraphPortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid portionIndex
*/
func TestGetSubshapeParagraphPortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "GetSubshapeParagraphPortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid password
*/
func TestGetSubshapeParagraphPortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapeParagraphPortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid folder
*/
func TestGetSubshapeParagraphPortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapeParagraphPortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portion info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortion method with invalid storage
*/
func TestGetSubshapeParagraphPortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("GetSubshapeParagraphPortion", "portionIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapeParagraphPortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method
*/
func TestGetSubshapeParagraphPortions(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)
    e := initializeTest("GetSubshapeParagraphPortions", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid name
*/
func TestGetSubshapeParagraphPortionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "GetSubshapeParagraphPortions", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid slideIndex
*/
func TestGetSubshapeParagraphPortionsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "GetSubshapeParagraphPortions", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid path
*/
func TestGetSubshapeParagraphPortionsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "GetSubshapeParagraphPortions", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid shapeIndex
*/
func TestGetSubshapeParagraphPortionsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "GetSubshapeParagraphPortions", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid paragraphIndex
*/
func TestGetSubshapeParagraphPortionsInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "GetSubshapeParagraphPortions", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid password
*/
func TestGetSubshapeParagraphPortionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "GetSubshapeParagraphPortions", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid folder
*/
func TestGetSubshapeParagraphPortionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "GetSubshapeParagraphPortions", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read paragraph portions info (for smart art and group shapes).
   Test for SlidesApi.GetSubshapeParagraphPortions method with invalid storage
*/
func TestGetSubshapeParagraphPortionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("GetSubshapeParagraphPortions", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("GetSubshapeParagraphPortions", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("GetSubshapeParagraphPortions", "paragraphIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("GetSubshapeParagraphPortions", "password", "string").(string)
    testfolder, _ := createTestParamValue("GetSubshapeParagraphPortions", "folder", "string").(string)
    teststorage, _ := createTestParamValue("GetSubshapeParagraphPortions", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "GetSubshapeParagraphPortions", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("GetSubshapeParagraphPortions", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetSubshapePortions(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "GetSubshapeParagraphPortions", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method
*/
func TestMoveFile(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)
    e := initializeTest("MoveFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid srcPath
*/
func TestMoveFileInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "MoveFile", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid destPath
*/
func TestMoveFileInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "MoveFile", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid srcStorageName
*/
func TestMoveFileInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "MoveFile", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid destStorageName
*/
func TestMoveFileInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "MoveFile", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move file
   Test for SlidesApi.MoveFile method with invalid versionId
*/
func TestMoveFileInvalidVersionId(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFile", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFile", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFile", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFile", "destStorageName", "string").(string)
    testversionId, _ := createTestParamValue("MoveFile", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "MoveFile", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFile", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFile(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFile", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method
*/
func TestMoveFolder(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)
    e := initializeTest("MoveFolder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid srcPath
*/
func TestMoveFolderInvalidSrcPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcPath, "MoveFolder", "srcPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcPath = nullValue
    } else {
        testsrcPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "srcPath", testsrcPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "srcPath", testsrcPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid destPath
*/
func TestMoveFolderInvalidDestPath(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestPath, "MoveFolder", "destPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestPath = nullValue
    } else {
        testdestPath, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "destPath", testdestPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "destPath", testdestPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid srcStorageName
*/
func TestMoveFolderInvalidSrcStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testsrcStorageName, "MoveFolder", "srcStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsrcStorageName = nullValue
    } else {
        testsrcStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "srcStorageName", testsrcStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "srcStorageName", testsrcStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Move folder
   Test for SlidesApi.MoveFolder method with invalid destStorageName
*/
func TestMoveFolderInvalidDestStorageName(t *testing.T) {
    testsrcPath, _ := createTestParamValue("MoveFolder", "srcPath", "string").(string)
    testdestPath, _ := createTestParamValue("MoveFolder", "destPath", "string").(string)
    testsrcStorageName, _ := createTestParamValue("MoveFolder", "srcStorageName", "string").(string)
    testdestStorageName, _ := createTestParamValue("MoveFolder", "destStorageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestStorageName, "MoveFolder", "destStorageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestStorageName = nullValue
    } else {
        testdestStorageName, _ = invalidValue.(string)
    }

    e := initializeTest("MoveFolder", "destStorageName", testdestStorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MoveFolder(testsrcPath, testdestPath, testsrcStorageName, testdestStorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "MoveFolder", "destStorageName", testdestStorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method
*/
func TestObjectExists(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)
    e := initializeTest("ObjectExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid path
*/
func TestObjectExistsInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "ObjectExists", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid storageName
*/
func TestObjectExistsInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "ObjectExists", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if file or folder exists
   Test for SlidesApi.ObjectExists method with invalid versionId
*/
func TestObjectExistsInvalidVersionId(t *testing.T) {
    testpath, _ := createTestParamValue("ObjectExists", "path", "string").(string)
    teststorageName, _ := createTestParamValue("ObjectExists", "storageName", "string").(string)
    testversionId, _ := createTestParamValue("ObjectExists", "versionId", "string").(string)

    invalidValue := invalidizeTestParamValue(testversionId, "ObjectExists", "versionId", "string")
    if (invalidValue == nil) {
        var nullValue string
        testversionId = nullValue
    } else {
        testversionId, _ = invalidValue.(string)
    }

    e := initializeTest("ObjectExists", "versionId", testversionId)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ObjectExists(testpath, teststorageName, testversionId)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "ObjectExists", "versionId", testversionId, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method
*/
func TestPostAddNewParagraph(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)
    e := initializeTest("PostAddNewParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid name
*/
func TestPostAddNewParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid slideIndex
*/
func TestPostAddNewParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid shapeIndex
*/
func TestPostAddNewParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostAddNewParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid dto
*/
func TestPostAddNewParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PostAddNewParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid position
*/
func TestPostAddNewParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid password
*/
func TestPostAddNewParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid folder
*/
func TestPostAddNewParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostAddNewParagraph method with invalid storage
*/
func TestPostAddNewParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method
*/
func TestPostAddNewPortion(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)
    e := initializeTest("PostAddNewPortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid name
*/
func TestPostAddNewPortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewPortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewPortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid slideIndex
*/
func TestPostAddNewPortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewPortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewPortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid shapeIndex
*/
func TestPostAddNewPortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostAddNewPortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewPortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid paragraphIndex
*/
func TestPostAddNewPortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PostAddNewPortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewPortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid dto
*/
func TestPostAddNewPortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewPortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PostAddNewPortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid position
*/
func TestPostAddNewPortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewPortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewPortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid password
*/
func TestPostAddNewPortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewPortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewPortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid folder
*/
func TestPostAddNewPortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewPortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewPortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostAddNewPortion method with invalid storage
*/
func TestPostAddNewPortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewPortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewPortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewPortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method
*/
func TestPostAddNewShape(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)
    e := initializeTest("PostAddNewShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid name
*/
func TestPostAddNewShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid slideIndex
*/
func TestPostAddNewShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid dto
*/
func TestPostAddNewShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PostAddNewShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid shapeToClone
*/
func TestPostAddNewShapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "PostAddNewShape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewShape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid position
*/
func TestPostAddNewShapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewShape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewShape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid password
*/
func TestPostAddNewShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid folder
*/
func TestPostAddNewShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostAddNewShape method with invalid storage
*/
func TestPostAddNewShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method
*/
func TestPostAddNewSubshape(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)
    e := initializeTest("PostAddNewSubshape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid name
*/
func TestPostAddNewSubshapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewSubshape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid slideIndex
*/
func TestPostAddNewSubshapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewSubshape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid path
*/
func TestPostAddNewSubshapeInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PostAddNewSubshape", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshape", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid dto
*/
func TestPostAddNewSubshapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewSubshape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PostAddNewSubshape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid shapeToClone
*/
func TestPostAddNewSubshapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "PostAddNewSubshape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid position
*/
func TestPostAddNewSubshapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewSubshape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid password
*/
func TestPostAddNewSubshapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewSubshape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid folder
*/
func TestPostAddNewSubshapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewSubshape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshape method with invalid storage
*/
func TestPostAddNewSubshapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshape", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshape", "path", "string").(string)
    testdto, _ := createTestParamValue("PostAddNewSubshape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostAddNewSubshape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewSubshape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshape(testname, testslideIndex, testpath, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method
*/
func TestPostAddNewSubshapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)
    e := initializeTest("PostAddNewSubshapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid name
*/
func TestPostAddNewSubshapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewSubshapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid slideIndex
*/
func TestPostAddNewSubshapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewSubshapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid path
*/
func TestPostAddNewSubshapeParagraphInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PostAddNewSubshapeParagraph", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid shapeIndex
*/
func TestPostAddNewSubshapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostAddNewSubshapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid dto
*/
func TestPostAddNewSubshapeParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewSubshapeParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid position
*/
func TestPostAddNewSubshapeParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewSubshapeParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid password
*/
func TestPostAddNewSubshapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewSubshapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid folder
*/
func TestPostAddNewSubshapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewSubshapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapeParagraph method with invalid storage
*/
func TestPostAddNewSubshapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapeParagraph", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapeParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapeParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapeParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewSubshapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method
*/
func TestPostAddNewSubshapePortion(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)
    e := initializeTest("PostAddNewSubshapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid name
*/
func TestPostAddNewSubshapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNewSubshapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid slideIndex
*/
func TestPostAddNewSubshapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNewSubshapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid path
*/
func TestPostAddNewSubshapePortionInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PostAddNewSubshapePortion", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapePortion", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid shapeIndex
*/
func TestPostAddNewSubshapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostAddNewSubshapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid paragraphIndex
*/
func TestPostAddNewSubshapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PostAddNewSubshapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid dto
*/
func TestPostAddNewSubshapePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNewSubshapePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PostAddNewSubshapePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid position
*/
func TestPostAddNewSubshapePortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostAddNewSubshapePortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNewSubshapePortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid password
*/
func TestPostAddNewSubshapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNewSubshapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid folder
*/
func TestPostAddNewSubshapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNewSubshapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion (for smart art and group shapes).
   Test for SlidesApi.PostAddNewSubshapePortion method with invalid storage
*/
func TestPostAddNewSubshapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNewSubshapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostAddNewSubshapePortion", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostAddNewSubshapePortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNewSubshapePortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostAddNewSubshapePortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostAddNewSubshapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNewSubshapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNewSubshapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNewSubshapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNewSubshapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNewSubshapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method
*/
func TestPostAddNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)
    e := initializeTest("PostAddNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid name
*/
func TestPostAddNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAddNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid slideIndex
*/
func TestPostAddNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAddNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAddNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid dto
*/
func TestPostAddNotesSlideInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostAddNotesSlide", "dto", "NotesSlide")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlide)
    }

    e := initializeTest("PostAddNotesSlide", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid password
*/
func TestPostAddNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAddNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid folder
*/
func TestPostAddNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAddNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add new notes slide.
   Test for SlidesApi.PostAddNotesSlide method with invalid storage
*/
func TestPostAddNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAddNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAddNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostAddNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PostAddNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAddNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAddNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAddNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAddNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAddNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method
*/
func TestPostAlignShapes(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)
    e := initializeTest("PostAlignShapes", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid name
*/
func TestPostAlignShapesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostAlignShapes", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostAlignShapes", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid slideIndex
*/
func TestPostAlignShapesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostAlignShapes", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostAlignShapes", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid alignmentType
*/
func TestPostAlignShapesInvalidAlignmentType(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testalignmentType, "PostAlignShapes", "alignmentType", "string")
    if (invalidValue == nil) {
        var nullValue string
        testalignmentType = nullValue
    } else {
        testalignmentType, _ = invalidValue.(string)
    }

    e := initializeTest("PostAlignShapes", "alignmentType", testalignmentType)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "alignmentType", testalignmentType, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid alignToSlide
*/
func TestPostAlignShapesInvalidAlignToSlide(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)
    testalignToSlide = new(bool)

    invalidValue := invalidizeTestParamValue(testalignToSlide, "PostAlignShapes", "alignToSlide", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testalignToSlide = nullValue
    } else {
        *testalignToSlide, _ = invalidValue.(bool)
    }

    e := initializeTest("PostAlignShapes", "alignToSlide", testalignToSlide)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "alignToSlide", testalignToSlide, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid shapes
*/
func TestPostAlignShapesInvalidShapes(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapes, "PostAlignShapes", "shapes", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testshapes = nullValue
    } else {
        testshapes, _ = invalidValue.([]int32)
    }

    e := initializeTest("PostAlignShapes", "shapes", testshapes)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "shapes", testshapes, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid password
*/
func TestPostAlignShapesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostAlignShapes", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostAlignShapes", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid folder
*/
func TestPostAlignShapesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostAlignShapes", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostAlignShapes", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
   Test for SlidesApi.PostAlignShapes method with invalid storage
*/
func TestPostAlignShapesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostAlignShapes", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostAlignShapes", "slideIndex", "int32").(int32)
    testalignmentType, _ := createTestParamValue("PostAlignShapes", "alignmentType", "string").(string)
    var testalignToSlide *bool
    testalignToSlideValue := createTestParamValue("PostAlignShapes", "alignToSlide", "bool")
    if (testalignToSlideValue != nil) {
        testalignToSlide = new(bool)
        *testalignToSlide, _ = testalignToSlideValue.(bool)
    }
    testshapes, _ := createTestParamValue("PostAlignShapes", "shapes", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostAlignShapes", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostAlignShapes", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostAlignShapes", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostAlignShapes", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostAlignShapes", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.AlignShapes(testname, testslideIndex, testalignmentType, testalignToSlide, testshapes, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostAlignShapes", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method
*/
func TestPostChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)
    e := initializeTest("PostChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid name
*/
func TestPostChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid slideIndex
*/
func TestPostChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid shapeIndex
*/
func TestPostChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid category
*/
func TestPostChartCategoryInvalidCategory(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategory, "PostChartCategory", "category", "ChartCategory")
    if (invalidValue == nil) {
        testcategory = nil
    } else {
        testcategory, _ = invalidValue.(IChartCategory)
    }

    e := initializeTest("PostChartCategory", "category", testcategory)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "category", testcategory, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid password
*/
func TestPostChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid folder
*/
func TestPostChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new category to a chart.
   Test for SlidesApi.PostChartCategory method with invalid storage
*/
func TestPostChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartCategory", "shapeIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PostChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PostChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartCategory(testname, testslideIndex, testshapeIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method
*/
func TestPostChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)
    e := initializeTest("PostChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid name
*/
func TestPostChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid slideIndex
*/
func TestPostChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid shapeIndex
*/
func TestPostChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid seriesIndex
*/
func TestPostChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "PostChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid dataPoint
*/
func TestPostChartDataPointInvalidDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdataPoint, "PostChartDataPoint", "dataPoint", "DataPoint")
    if (invalidValue == nil) {
        testdataPoint = nil
    } else {
        testdataPoint, _ = invalidValue.(IDataPoint)
    }

    e := initializeTest("PostChartDataPoint", "dataPoint", testdataPoint)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "dataPoint", testdataPoint, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid password
*/
func TestPostChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid folder
*/
func TestPostChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new data point to a chart series.
   Test for SlidesApi.PostChartDataPoint method with invalid storage
*/
func TestPostChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PostChartDataPoint", "seriesIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PostChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PostChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method
*/
func TestPostChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)
    e := initializeTest("PostChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid name
*/
func TestPostChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid slideIndex
*/
func TestPostChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid shapeIndex
*/
func TestPostChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid series
*/
func TestPostChartSeriesInvalidSeries(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseries, "PostChartSeries", "series", "Series")
    if (invalidValue == nil) {
        testseries = nil
    } else {
        testseries, _ = invalidValue.(ISeries)
    }

    e := initializeTest("PostChartSeries", "series", testseries)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "series", testseries, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid password
*/
func TestPostChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid folder
*/
func TestPostChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add a new series to a chart.
   Test for SlidesApi.PostChartSeries method with invalid storage
*/
func TestPostChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostChartSeries", "shapeIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PostChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PostChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateChartSeries(testname, testslideIndex, testshapeIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method
*/
func TestPostCopyLayoutSlideFromSourcePresentation(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)
    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid name
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostCopyLayoutSlideFromSourcePresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid cloneFrom
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidCloneFrom(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFrom, "PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFrom = nullValue
    } else {
        testcloneFrom, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", testcloneFrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", testcloneFrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid cloneFromPosition
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPosition, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcloneFromPosition = nullValue
    } else {
        testcloneFromPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", testcloneFromPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", testcloneFromPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid cloneFromPassword
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPassword, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromPassword = nullValue
    } else {
        testcloneFromPassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", testcloneFromPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", testcloneFromPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid cloneFromStorage
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromStorage, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromStorage = nullValue
    } else {
        testcloneFromStorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", testcloneFromStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", testcloneFromStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid password
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostCopyLayoutSlideFromSourcePresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid folder
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostCopyLayoutSlideFromSourcePresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy layoutSlide from source presentation.
   Test for SlidesApi.PostCopyLayoutSlideFromSourcePresentation method with invalid storage
*/
func TestPostCopyLayoutSlideFromSourcePresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyLayoutSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostCopyLayoutSlideFromSourcePresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyLayoutSlideFromSourcePresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyLayoutSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyLayoutSlideFromSourcePresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method
*/
func TestPostCopyMasterSlideFromSourcePresentation(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)
    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid name
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostCopyMasterSlideFromSourcePresentation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid cloneFrom
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidCloneFrom(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFrom, "PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFrom = nullValue
    } else {
        testcloneFrom, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", testcloneFrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "cloneFrom", testcloneFrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid cloneFromPosition
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPosition, "PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcloneFromPosition = nullValue
    } else {
        testcloneFromPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", testcloneFromPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", testcloneFromPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid cloneFromPassword
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidCloneFromPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromPassword, "PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromPassword = nullValue
    } else {
        testcloneFromPassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", testcloneFromPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", testcloneFromPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid cloneFromStorage
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidCloneFromStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcloneFromStorage, "PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcloneFromStorage = nullValue
    } else {
        testcloneFromStorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", testcloneFromStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", testcloneFromStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid applyToAll
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidApplyToAll(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)
    testapplyToAll = new(bool)

    invalidValue := invalidizeTestParamValue(testapplyToAll, "PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testapplyToAll = nullValue
    } else {
        *testapplyToAll, _ = invalidValue.(bool)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "applyToAll", testapplyToAll)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "applyToAll", testapplyToAll, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid password
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostCopyMasterSlideFromSourcePresentation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid folder
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostCopyMasterSlideFromSourcePresentation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy masterSlide from source presentation.
   Test for SlidesApi.PostCopyMasterSlideFromSourcePresentation method with invalid storage
*/
func TestPostCopyMasterSlideFromSourcePresentationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "name", "string").(string)
    testcloneFrom, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFrom", "string").(string)
    testcloneFromPosition, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPosition", "int32").(int32)
    testcloneFromPassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromPassword", "string").(string)
    testcloneFromStorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "cloneFromStorage", "string").(string)
    var testapplyToAll *bool
    testapplyToAllValue := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "applyToAll", "bool")
    if (testapplyToAllValue != nil) {
        testapplyToAll = new(bool)
        *testapplyToAll, _ = testapplyToAllValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostCopyMasterSlideFromSourcePresentation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostCopyMasterSlideFromSourcePresentation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostCopyMasterSlideFromSourcePresentation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopyMasterSlide(testname, testcloneFrom, testcloneFromPosition, testcloneFromPassword, testcloneFromStorage, testapplyToAll, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostCopyMasterSlideFromSourcePresentation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.PostExportImageWithDefaultFormat method
*/
func TestPostExportImageWithDefaultFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithDefaultFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("PostExportImageWithDefaultFormat", "password", "string").(string)
    e := initializeTest("PostExportImageWithDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.PostExportImageWithDefaultFormat method with invalid document
*/
func TestPostExportImageWithDefaultFormatInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithDefaultFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("PostExportImageWithDefaultFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostExportImageWithDefaultFormat", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostExportImageWithDefaultFormat", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithDefaultFormat", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.PostExportImageWithDefaultFormat method with invalid index
*/
func TestPostExportImageWithDefaultFormatInvalidIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithDefaultFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("PostExportImageWithDefaultFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "PostExportImageWithDefaultFormat", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportImageWithDefaultFormat", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithDefaultFormat", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image binary data.
   Test for SlidesApi.PostExportImageWithDefaultFormat method with invalid password
*/
func TestPostExportImageWithDefaultFormatInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithDefaultFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithDefaultFormat", "index", "int32").(int32)
    testpassword, _ := createTestParamValue("PostExportImageWithDefaultFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportImageWithDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImageWithDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageDefaultFormatOnline(testdocument, testindex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.PostExportImageWithFormat method
*/
func TestPostExportImageWithFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImageWithFormat", "password", "string").(string)
    e := initializeTest("PostExportImageWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.PostExportImageWithFormat method with invalid document
*/
func TestPostExportImageWithFormatInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImageWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostExportImageWithFormat", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostExportImageWithFormat", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithFormat", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.PostExportImageWithFormat method with invalid index
*/
func TestPostExportImageWithFormatInvalidIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImageWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testindex, "PostExportImageWithFormat", "index", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testindex = nullValue
    } else {
        testindex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportImageWithFormat", "index", testindex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithFormat", "index", testindex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.PostExportImageWithFormat method with invalid format
*/
func TestPostExportImageWithFormatInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImageWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostExportImageWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImageWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get image in specified format.
   Test for SlidesApi.PostExportImageWithFormat method with invalid password
*/
func TestPostExportImageWithFormatInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImageWithFormat", "document", "[]byte").([]byte)
    testindex, _ := createTestParamValue("PostExportImageWithFormat", "index", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportImageWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImageWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportImageWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImageWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImageOnline(testdocument, testindex, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImageWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.PostExportImagesFromRequestWithFormat method
*/
func TestPostExportImagesFromRequestWithFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "password", "string").(string)
    e := initializeTest("PostExportImagesFromRequestWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.PostExportImagesFromRequestWithFormat method with invalid document
*/
func TestPostExportImagesFromRequestWithFormatInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostExportImagesFromRequestWithFormat", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostExportImagesFromRequestWithFormat", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesFromRequestWithFormat", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.PostExportImagesFromRequestWithFormat method with invalid format
*/
func TestPostExportImagesFromRequestWithFormatInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostExportImagesFromRequestWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesFromRequestWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesFromRequestWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format. 
   Test for SlidesApi.PostExportImagesFromRequestWithFormat method with invalid password
*/
func TestPostExportImagesFromRequestWithFormatInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesFromRequestWithFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportImagesFromRequestWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesFromRequestWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesOnline(testdocument, testformat, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesFromRequestWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostExportImagesWithDefaultFormat method
*/
func TestPostExportImagesWithDefaultFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "storage", "string").(string)
    e := initializeTest("PostExportImagesWithDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostExportImagesWithDefaultFormat method with invalid name
*/
func TestPostExportImagesWithDefaultFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostExportImagesWithDefaultFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithDefaultFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithDefaultFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostExportImagesWithDefaultFormat method with invalid password
*/
func TestPostExportImagesWithDefaultFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportImagesWithDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostExportImagesWithDefaultFormat method with invalid folder
*/
func TestPostExportImagesWithDefaultFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostExportImagesWithDefaultFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithDefaultFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithDefaultFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostExportImagesWithDefaultFormat method with invalid storage
*/
func TestPostExportImagesWithDefaultFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "name", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithDefaultFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostExportImagesWithDefaultFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithDefaultFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormat(testname, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithDefaultFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method
*/
func TestPostExportImagesWithFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)
    e := initializeTest("PostExportImagesWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method with invalid name
*/
func TestPostExportImagesWithFormatInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostExportImagesWithFormat", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithFormat", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithFormat", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method with invalid format
*/
func TestPostExportImagesWithFormatInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostExportImagesWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method with invalid password
*/
func TestPostExportImagesWithFormatInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportImagesWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method with invalid folder
*/
func TestPostExportImagesWithFormatInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostExportImagesWithFormat", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithFormat", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithFormat", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images in specified format.
   Test for SlidesApi.PostExportImagesWithFormat method with invalid storage
*/
func TestPostExportImagesWithFormatInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostExportImagesWithFormat", "name", "string").(string)
    testformat, _ := createTestParamValue("PostExportImagesWithFormat", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostExportImagesWithFormat", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostExportImagesWithFormat", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostExportImagesWithFormat", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostExportImagesWithFormat", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportImagesWithFormat", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImages(testname, testformat, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportImagesWithFormat", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method
*/
func TestPostExportShape(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)
    e := initializeTest("PostExportShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid document
*/
func TestPostExportShapeInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostExportShape", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostExportShape", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid slideIndex
*/
func TestPostExportShapeInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostExportShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid shapeIndex
*/
func TestPostExportShapeInvalidShapeIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostExportShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid format
*/
func TestPostExportShapeInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostExportShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid scaleX
*/
func TestPostExportShapeInvalidScaleX(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PostExportShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PostExportShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid scaleY
*/
func TestPostExportShapeInvalidScaleY(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PostExportShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PostExportShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid bounds
*/
func TestPostExportShapeInvalidBounds(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PostExportShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid password
*/
func TestPostExportShapeInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid storage
*/
func TestPostExportShapeInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostExportShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostExportShape method with invalid fontsFolder
*/
func TestPostExportShapeInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportShape", "format", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostExportShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method
*/
func TestPostExportSlide(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)
    e := initializeTest("PostExportSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid document
*/
func TestPostExportSlideInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostExportSlide", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostExportSlide", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid slideIndex
*/
func TestPostExportSlideInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostExportSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid format
*/
func TestPostExportSlideInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostExportSlide", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportSlide", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid width
*/
func TestPostExportSlideInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PostExportSlide", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportSlide", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid height
*/
func TestPostExportSlideInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PostExportSlide", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PostExportSlide", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid password
*/
func TestPostExportSlideInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostExportSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid storage
*/
func TestPostExportSlideInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostExportSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostExportSlide method with invalid fontsFolder
*/
func TestPostExportSlideInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PostExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostExportSlide", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostExportSlide", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostExportSlide", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostExportSlide", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.PostGetNotesSlide method
*/
func TestPostGetNotesSlide(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlide", "password", "string").(string)
    e := initializeTest("PostGetNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.PostGetNotesSlide method with invalid document
*/
func TestPostGetNotesSlideInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlide", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostGetNotesSlide", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostGetNotesSlide", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlide", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.PostGetNotesSlide method with invalid slideIndex
*/
func TestPostGetNotesSlideInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlide", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostGetNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostGetNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Read notes slide info.
   Test for SlidesApi.PostGetNotesSlide method with invalid password
*/
func TestPostGetNotesSlideInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlide", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlide", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostGetNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostGetNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.GetNotesSlideOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.PostGetNotesSlideExists method
*/
func TestPostGetNotesSlideExists(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideExists", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlideExists", "password", "string").(string)
    e := initializeTest("PostGetNotesSlideExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.PostGetNotesSlideExists method with invalid document
*/
func TestPostGetNotesSlideExistsInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideExists", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlideExists", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostGetNotesSlideExists", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostGetNotesSlideExists", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideExists", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.PostGetNotesSlideExists method with invalid slideIndex
*/
func TestPostGetNotesSlideExistsInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideExists", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlideExists", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostGetNotesSlideExists", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostGetNotesSlideExists", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideExists", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Get info whether a notes slide exists.
   Test for SlidesApi.PostGetNotesSlideExists method with invalid password
*/
func TestPostGetNotesSlideExistsInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideExists", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideExists", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostGetNotesSlideExists", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostGetNotesSlideExists", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostGetNotesSlideExists", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.NotesSlideExistsOnline(testdocument, testslideIndex, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideExists", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method
*/
func TestPostGetNotesSlideWithFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)
    e := initializeTest("PostGetNotesSlideWithFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid document
*/
func TestPostGetNotesSlideWithFormatInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostGetNotesSlideWithFormat", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid slideIndex
*/
func TestPostGetNotesSlideWithFormatInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostGetNotesSlideWithFormat", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid format
*/
func TestPostGetNotesSlideWithFormatInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostGetNotesSlideWithFormat", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid width
*/
func TestPostGetNotesSlideWithFormatInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PostGetNotesSlideWithFormat", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid height
*/
func TestPostGetNotesSlideWithFormatInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PostGetNotesSlideWithFormat", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid password
*/
func TestPostGetNotesSlideWithFormatInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostGetNotesSlideWithFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert notes slide to the specified image format.
   Test for SlidesApi.PostGetNotesSlideWithFormat method with invalid fontsFolder
*/
func TestPostGetNotesSlideWithFormatInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PostGetNotesSlideWithFormat", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostGetNotesSlideWithFormat", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostGetNotesSlideWithFormat", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostGetNotesSlideWithFormat", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostGetNotesSlideWithFormat", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostGetNotesSlideWithFormat", "password", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostGetNotesSlideWithFormat", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostGetNotesSlideWithFormat", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostGetNotesSlideWithFormat", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideOnline(testdocument, testslideIndex, testformat, testwidth, testheight, testpassword, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostGetNotesSlideWithFormat", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method
*/
func TestPostImageWatermark(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)
    e := initializeTest("PostImageWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid name
*/
func TestPostImageWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostImageWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostImageWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid image
*/
func TestPostImageWatermarkInvalidImage(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testimage, "PostImageWatermark", "image", "[]byte")
    if (invalidValue == nil) {
        testimage = nil
    } else {
        testimage, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostImageWatermark", "image", testimage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "image", testimage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid pictureFrame
*/
func TestPostImageWatermarkInvalidPictureFrame(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpictureFrame, "PostImageWatermark", "pictureFrame", "PictureFrame")
    if (invalidValue == nil) {
        testpictureFrame = nil
    } else {
        testpictureFrame, _ = invalidValue.(IPictureFrame)
    }

    e := initializeTest("PostImageWatermark", "pictureFrame", testpictureFrame)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "pictureFrame", testpictureFrame, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid password
*/
func TestPostImageWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostImageWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostImageWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid folder
*/
func TestPostImageWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostImageWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostImageWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermark method with invalid storage
*/
func TestPostImageWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostImageWatermark", "name", "string").(string)
    testimage, _ := createTestParamValue("PostImageWatermark", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermark", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostImageWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostImageWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostImageWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostImageWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateImageWatermark(testname, testimage, testpictureFrame, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermarkOnline method
*/
func TestPostImageWatermarkOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("PostImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermarkOnline", "password", "string").(string)
    e := initializeTest("PostImageWatermarkOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermarkOnline method with invalid document
*/
func TestPostImageWatermarkOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("PostImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostImageWatermarkOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostImageWatermarkOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermarkOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermarkOnline method with invalid image
*/
func TestPostImageWatermarkOnlineInvalidImage(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("PostImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testimage, "PostImageWatermarkOnline", "image", "[]byte")
    if (invalidValue == nil) {
        testimage = nil
    } else {
        testimage, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostImageWatermarkOnline", "image", testimage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermarkOnline", "image", testimage, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermarkOnline method with invalid pictureFrame
*/
func TestPostImageWatermarkOnlineInvalidPictureFrame(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("PostImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpictureFrame, "PostImageWatermarkOnline", "pictureFrame", "PictureFrame")
    if (invalidValue == nil) {
        testpictureFrame = nil
    } else {
        testpictureFrame, _ = invalidValue.(IPictureFrame)
    }

    e := initializeTest("PostImageWatermarkOnline", "pictureFrame", testpictureFrame)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermarkOnline", "pictureFrame", testpictureFrame, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostImageWatermarkOnline method with invalid password
*/
func TestPostImageWatermarkOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImageWatermarkOnline", "document", "[]byte").([]byte)
    testimage, _ := createTestParamValue("PostImageWatermarkOnline", "image", "[]byte").([]byte)
    testpictureFrame, _ := createTestParamValue("PostImageWatermarkOnline", "pictureFrame", "PictureFrame").(IPictureFrame)
    testpassword, _ := createTestParamValue("PostImageWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostImageWatermarkOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostImageWatermarkOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateImageWatermarkOnline(testdocument, testimage, testpictureFrame, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImageWatermarkOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostImagesFromRequestWithDefaultFormat method
*/
func TestPostImagesFromRequestWithDefaultFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "password", "string").(string)
    e := initializeTest("PostImagesFromRequestWithDefaultFormat", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostImagesFromRequestWithDefaultFormat method with invalid document
*/
func TestPostImagesFromRequestWithDefaultFormatInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostImagesFromRequestWithDefaultFormat", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostImagesFromRequestWithDefaultFormat", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImagesFromRequestWithDefaultFormat", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Get all presentation images.
   Test for SlidesApi.PostImagesFromRequestWithDefaultFormat method with invalid password
*/
func TestPostImagesFromRequestWithDefaultFormatInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "document", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostImagesFromRequestWithDefaultFormat", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostImagesFromRequestWithDefaultFormat", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostImagesFromRequestWithDefaultFormat", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadImagesDefaultFormatOnline(testdocument, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostImagesFromRequestWithDefaultFormat", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method
*/
func TestPostNotesSlideAddNewParagraph(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)
    e := initializeTest("PostNotesSlideAddNewParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid name
*/
func TestPostNotesSlideAddNewParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostNotesSlideAddNewParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid slideIndex
*/
func TestPostNotesSlideAddNewParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostNotesSlideAddNewParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid shapeIndex
*/
func TestPostNotesSlideAddNewParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostNotesSlideAddNewParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid dto
*/
func TestPostNotesSlideAddNewParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostNotesSlideAddNewParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid position
*/
func TestPostNotesSlideAddNewParagraphInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostNotesSlideAddNewParagraph", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid password
*/
func TestPostNotesSlideAddNewParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostNotesSlideAddNewParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid folder
*/
func TestPostNotesSlideAddNewParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostNotesSlideAddNewParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new paragraph.
   Test for SlidesApi.PostNotesSlideAddNewParagraph method with invalid storage
*/
func TestPostNotesSlideAddNewParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "dto", "Paragraph").(IParagraph)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewParagraph", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostNotesSlideAddNewParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method
*/
func TestPostNotesSlideAddNewPortion(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)
    e := initializeTest("PostNotesSlideAddNewPortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid name
*/
func TestPostNotesSlideAddNewPortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostNotesSlideAddNewPortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid slideIndex
*/
func TestPostNotesSlideAddNewPortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostNotesSlideAddNewPortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid shapeIndex
*/
func TestPostNotesSlideAddNewPortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostNotesSlideAddNewPortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid paragraphIndex
*/
func TestPostNotesSlideAddNewPortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PostNotesSlideAddNewPortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid dto
*/
func TestPostNotesSlideAddNewPortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostNotesSlideAddNewPortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid position
*/
func TestPostNotesSlideAddNewPortionInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostNotesSlideAddNewPortion", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid password
*/
func TestPostNotesSlideAddNewPortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostNotesSlideAddNewPortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid folder
*/
func TestPostNotesSlideAddNewPortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostNotesSlideAddNewPortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Creates new portion.
   Test for SlidesApi.PostNotesSlideAddNewPortion method with invalid storage
*/
func TestPostNotesSlideAddNewPortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewPortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PostNotesSlideAddNewPortion", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewPortion", "dto", "Portion").(IPortion)
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewPortion", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewPortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewPortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewPortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostNotesSlideAddNewPortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewPortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewPortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method
*/
func TestPostNotesSlideAddNewShape(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)
    e := initializeTest("PostNotesSlideAddNewShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid name
*/
func TestPostNotesSlideAddNewShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostNotesSlideAddNewShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid slideIndex
*/
func TestPostNotesSlideAddNewShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostNotesSlideAddNewShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid dto
*/
func TestPostNotesSlideAddNewShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PostNotesSlideAddNewShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid shapeToClone
*/
func TestPostNotesSlideAddNewShapeInvalidShapeToClone(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)
    testshapeToClone = new(int32)

    invalidValue := invalidizeTestParamValue(testshapeToClone, "PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testshapeToClone = nullValue
    } else {
        *testshapeToClone, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "shapeToClone", testshapeToClone)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "shapeToClone", testshapeToClone, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid position
*/
func TestPostNotesSlideAddNewShapeInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostNotesSlideAddNewShape", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid password
*/
func TestPostNotesSlideAddNewShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostNotesSlideAddNewShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid folder
*/
func TestPostNotesSlideAddNewShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostNotesSlideAddNewShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create new shape.
   Test for SlidesApi.PostNotesSlideAddNewShape method with invalid storage
*/
func TestPostNotesSlideAddNewShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideAddNewShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideAddNewShape", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PostNotesSlideAddNewShape", "dto", "ShapeBase").(IShapeBase)
    var testshapeToClone *int32
    testshapeToCloneValue := createTestParamValue("PostNotesSlideAddNewShape", "shapeToClone", "int32")
    if (testshapeToCloneValue != nil) {
        testshapeToClone = new(int32)
        *testshapeToClone, _ = testshapeToCloneValue.(int32)
    }
    var testposition *int32
    testpositionValue := createTestParamValue("PostNotesSlideAddNewShape", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostNotesSlideAddNewShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideAddNewShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideAddNewShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostNotesSlideAddNewShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideAddNewShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateNotesSlideShape(testname, testslideIndex, testdto, testshapeToClone, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideAddNewShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method
*/
func TestPostNotesSlideShapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PostNotesSlideShapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid name
*/
func TestPostNotesSlideShapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostNotesSlideShapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid slideIndex
*/
func TestPostNotesSlideShapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostNotesSlideShapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid shapeIndex
*/
func TestPostNotesSlideShapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostNotesSlideShapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid format
*/
func TestPostNotesSlideShapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostNotesSlideShapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid options
*/
func TestPostNotesSlideShapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid scaleX
*/
func TestPostNotesSlideShapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid scaleY
*/
func TestPostNotesSlideShapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid bounds
*/
func TestPostNotesSlideShapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PostNotesSlideShapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid password
*/
func TestPostNotesSlideShapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostNotesSlideShapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid folder
*/
func TestPostNotesSlideShapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostNotesSlideShapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid storage
*/
func TestPostNotesSlideShapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostNotesSlideShapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostNotesSlideShapeSaveAs method with invalid fontsFolder
*/
func TestPostNotesSlideShapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostNotesSlideShapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostNotesSlideShapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostNotesSlideShapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method
*/
func TestPostPresentationMerge(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)
    e := initializeTest("PostPresentationMerge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method with invalid name
*/
func TestPostPresentationMergeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostPresentationMerge", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationMerge", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationMerge", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method with invalid request
*/
func TestPostPresentationMergeInvalidRequest(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "PostPresentationMerge", "request", "PresentationsMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IPresentationsMergeRequest)
    }

    e := initializeTest("PostPresentationMerge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationMerge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method with invalid password
*/
func TestPostPresentationMergeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostPresentationMerge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationMerge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationMerge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method with invalid folder
*/
func TestPostPresentationMergeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostPresentationMerge", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationMerge", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationMerge", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations specified in the request parameter.
   Test for SlidesApi.PostPresentationMerge method with invalid storage
*/
func TestPostPresentationMergeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PostPresentationMerge", "request", "PresentationsMergeRequest").(IPresentationsMergeRequest)
    testpassword, _ := createTestParamValue("PostPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostPresentationMerge", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationMerge", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Merge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationMerge", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method
*/
func TestPostPresentationReplaceText(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)
    e := initializeTest("PostPresentationReplaceText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method with invalid document
*/
func TestPostPresentationReplaceTextInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostPresentationReplaceText", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostPresentationReplaceText", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationReplaceText", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method with invalid oldValue
*/
func TestPostPresentationReplaceTextInvalidOldValue(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "PostPresentationReplaceText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationReplaceText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationReplaceText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method with invalid newValue
*/
func TestPostPresentationReplaceTextInvalidNewValue(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "PostPresentationReplaceText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationReplaceText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationReplaceText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method with invalid ignoreCase
*/
func TestPostPresentationReplaceTextInvalidIgnoreCase(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "PostPresentationReplaceText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("PostPresentationReplaceText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationReplaceText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostPresentationReplaceText method with invalid password
*/
func TestPostPresentationReplaceTextInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationReplaceText", "document", "[]byte").([]byte)
    testoldValue, _ := createTestParamValue("PostPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostPresentationReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostPresentationReplaceText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationReplaceText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationTextOnline(testdocument, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationReplaceText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method
*/
func TestPostPresentationSplit(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)
    e := initializeTest("PostPresentationSplit", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid document
*/
func TestPostPresentationSplitInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostPresentationSplit", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostPresentationSplit", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid format
*/
func TestPostPresentationSplitInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostPresentationSplit", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationSplit", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid width
*/
func TestPostPresentationSplitInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PostPresentationSplit", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PostPresentationSplit", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid height
*/
func TestPostPresentationSplitInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PostPresentationSplit", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PostPresentationSplit", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid from
*/
func TestPostPresentationSplitInvalidFrom(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "PostPresentationSplit", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("PostPresentationSplit", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid to
*/
func TestPostPresentationSplitInvalidTo(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "PostPresentationSplit", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("PostPresentationSplit", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid password
*/
func TestPostPresentationSplitInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostPresentationSplit", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationSplit", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid storage
*/
func TestPostPresentationSplitInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostPresentationSplit", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationSplit", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PostPresentationSplit method with invalid fontsFolder
*/
func TestPostPresentationSplitInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PostPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostPresentationSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostPresentationSplit", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostPresentationSplit", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitOnline(testdocument, testformat, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostPresentationSplit", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method
*/
func TestPostSection(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)
    e := initializeTest("PostSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid name
*/
func TestPostSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid sectionName
*/
func TestPostSectionInvalidSectionName(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionName, "PostSection", "sectionName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsectionName = nullValue
    } else {
        testsectionName, _ = invalidValue.(string)
    }

    e := initializeTest("PostSection", "sectionName", testsectionName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "sectionName", testsectionName, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid slideIndex
*/
func TestPostSectionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSection", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSection", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid password
*/
func TestPostSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid folder
*/
func TestPostSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a section starting at a specified slide index.
   Test for SlidesApi.PostSection method with invalid storage
*/
func TestPostSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSection", "name", "string").(string)
    testsectionName, _ := createTestParamValue("PostSection", "sectionName", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSection", "slideIndex", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSection(testname, testsectionName, testslideIndex, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method
*/
func TestPostSectionMove(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)
    e := initializeTest("PostSectionMove", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid name
*/
func TestPostSectionMoveInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSectionMove", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSectionMove", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid sectionIndex
*/
func TestPostSectionMoveInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "PostSectionMove", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSectionMove", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid newPosition
*/
func TestPostSectionMoveInvalidNewPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPosition, "PostSectionMove", "newPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testnewPosition = nullValue
    } else {
        testnewPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSectionMove", "newPosition", testnewPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "newPosition", testnewPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid password
*/
func TestPostSectionMoveInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSectionMove", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSectionMove", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid folder
*/
func TestPostSectionMoveInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSectionMove", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSectionMove", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Move presentation section to a specified position.
   Test for SlidesApi.PostSectionMove method with invalid storage
*/
func TestPostSectionMoveInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSectionMove", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PostSectionMove", "sectionIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSectionMove", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSectionMove", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSectionMove", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSectionMove", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSectionMove", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSectionMove", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSection(testname, testsectionIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSectionMove", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method
*/
func TestPostShapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PostShapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid name
*/
func TestPostShapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostShapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid slideIndex
*/
func TestPostShapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostShapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostShapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid shapeIndex
*/
func TestPostShapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostShapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostShapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid format
*/
func TestPostShapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostShapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid options
*/
func TestPostShapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostShapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PostShapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid scaleX
*/
func TestPostShapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PostShapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PostShapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid scaleY
*/
func TestPostShapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PostShapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PostShapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid bounds
*/
func TestPostShapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PostShapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid password
*/
func TestPostShapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostShapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid folder
*/
func TestPostShapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostShapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid storage
*/
func TestPostShapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostShapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PostShapeSaveAs method with invalid fontsFolder
*/
func TestPostShapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PostShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostShapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostShapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostShapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadShape(testname, testslideIndex, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostShapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method
*/
func TestPostSlideAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)
    e := initializeTest("PostSlideAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid name
*/
func TestPostSlideAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlideAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid slideIndex
*/
func TestPostSlideAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlideAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid effect
*/
func TestPostSlideAnimationEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "PostSlideAnimationEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("PostSlideAnimationEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid password
*/
func TestPostSlideAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlideAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid folder
*/
func TestPostSlideAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlideAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an effect to slide animation.
   Test for SlidesApi.PostSlideAnimationEffect method with invalid storage
*/
func TestPostSlideAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlideAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationEffect(testname, testslideIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method
*/
func TestPostSlideAnimationInteractiveSequence(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)
    e := initializeTest("PostSlideAnimationInteractiveSequence", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid name
*/
func TestPostSlideAnimationInteractiveSequenceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlideAnimationInteractiveSequence", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid slideIndex
*/
func TestPostSlideAnimationInteractiveSequenceInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlideAnimationInteractiveSequence", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid sequence
*/
func TestPostSlideAnimationInteractiveSequenceInvalidSequence(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequence, "PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence")
    if (invalidValue == nil) {
        testsequence = nil
    } else {
        testsequence, _ = invalidValue.(IInteractiveSequence)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "sequence", testsequence)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "sequence", testsequence, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid password
*/
func TestPostSlideAnimationInteractiveSequenceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlideAnimationInteractiveSequence", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid folder
*/
func TestPostSlideAnimationInteractiveSequenceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlideAnimationInteractiveSequence", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PostSlideAnimationInteractiveSequence method with invalid storage
*/
func TestPostSlideAnimationInteractiveSequenceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "slideIndex", "int32").(int32)
    testsequence, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "sequence", "InteractiveSequence").(IInteractiveSequence)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequence", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlideAnimationInteractiveSequence", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequence", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequence(testname, testslideIndex, testsequence, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequence", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method
*/
func TestPostSlideAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid name
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlideAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid effect
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid password
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlideAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlideAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Add an animation effect to a slide interactive sequence.
   Test for SlidesApi.PostSlideAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestPostSlideAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlideAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method
*/
func TestPostSlideReplaceText(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)
    e := initializeTest("PostSlideReplaceText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid document
*/
func TestPostSlideReplaceTextInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostSlideReplaceText", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostSlideReplaceText", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid slideIndex
*/
func TestPostSlideReplaceTextInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlideReplaceText", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideReplaceText", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid oldValue
*/
func TestPostSlideReplaceTextInvalidOldValue(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "PostSlideReplaceText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideReplaceText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid newValue
*/
func TestPostSlideReplaceTextInvalidNewValue(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "PostSlideReplaceText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideReplaceText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid ignoreCase
*/
func TestPostSlideReplaceTextInvalidIgnoreCase(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "PostSlideReplaceText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("PostSlideReplaceText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace slide text with a new value.
   Test for SlidesApi.PostSlideReplaceText method with invalid password
*/
func TestPostSlideReplaceTextInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlideReplaceText", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PostSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlideReplaceText", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlideReplaceText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideReplaceText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideTextOnline(testdocument, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideReplaceText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method
*/
func TestPostSlideSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PostSlideSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid name
*/
func TestPostSlideSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlideSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid slideIndex
*/
func TestPostSlideSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlideSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid format
*/
func TestPostSlideSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostSlideSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid options
*/
func TestPostSlideSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostSlideSaveAs", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("PostSlideSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid width
*/
func TestPostSlideSaveAsInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PostSlideSaveAs", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideSaveAs", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid height
*/
func TestPostSlideSaveAsInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PostSlideSaveAs", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlideSaveAs", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid password
*/
func TestPostSlideSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlideSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid folder
*/
func TestPostSlideSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlideSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid storage
*/
func TestPostSlideSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlideSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PostSlideSaveAs method with invalid fontsFolder
*/
func TestPostSlideSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSlideSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostSlideSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlideSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSlide(testname, testslideIndex, testformat, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlideSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method
*/
func TestPostSlidesAdd(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)
    e := initializeTest("PostSlidesAdd", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid name
*/
func TestPostSlidesAddInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesAdd", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesAdd", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid layoutAlias
*/
func TestPostSlidesAddInvalidLayoutAlias(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testlayoutAlias, "PostSlidesAdd", "layoutAlias", "string")
    if (invalidValue == nil) {
        var nullValue string
        testlayoutAlias = nullValue
    } else {
        testlayoutAlias, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesAdd", "layoutAlias", testlayoutAlias)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "layoutAlias", testlayoutAlias, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid position
*/
func TestPostSlidesAddInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostSlidesAdd", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesAdd", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid password
*/
func TestPostSlidesAddInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesAdd", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesAdd", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid folder
*/
func TestPostSlidesAddInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesAdd", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesAdd", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a slide.
   Test for SlidesApi.PostSlidesAdd method with invalid storage
*/
func TestPostSlidesAddInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesAdd", "name", "string").(string)
    testlayoutAlias, _ := createTestParamValue("PostSlidesAdd", "layoutAlias", "string").(string)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesAdd", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testpassword, _ := createTestParamValue("PostSlidesAdd", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesAdd", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesAdd", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesAdd", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesAdd", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateSlide(testname, testlayoutAlias, testposition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesAdd", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method
*/
func TestPostSlidesConvert(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)
    e := initializeTest("PostSlidesConvert", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method with invalid document
*/
func TestPostSlidesConvertInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostSlidesConvert", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostSlidesConvert", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesConvert", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method with invalid format
*/
func TestPostSlidesConvertInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostSlidesConvert", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesConvert", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesConvert", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method with invalid password
*/
func TestPostSlidesConvertInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesConvert", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesConvert", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesConvert", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method with invalid storage
*/
func TestPostSlidesConvertInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesConvert", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesConvert", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesConvert", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PostSlidesConvert method with invalid fontsFolder
*/
func TestPostSlidesConvertInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PostSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PostSlidesConvert", "format", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostSlidesConvert", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesConvert", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Convert(testdocument, testformat, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesConvert", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method
*/
func TestPostSlidesCopy(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)
    e := initializeTest("PostSlidesCopy", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid name
*/
func TestPostSlidesCopyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesCopy", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid slideToCopy
*/
func TestPostSlidesCopyInvalidSlideToCopy(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideToCopy, "PostSlidesCopy", "slideToCopy", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideToCopy = nullValue
    } else {
        testslideToCopy, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesCopy", "slideToCopy", testslideToCopy)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "slideToCopy", testslideToCopy, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid position
*/
func TestPostSlidesCopyInvalidPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)
    testposition = new(int32)

    invalidValue := invalidizeTestParamValue(testposition, "PostSlidesCopy", "position", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testposition = nullValue
    } else {
        *testposition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesCopy", "position", testposition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "position", testposition, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid source
*/
func TestPostSlidesCopyInvalidSource(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsource, "PostSlidesCopy", "source", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsource = nullValue
    } else {
        testsource, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "source", testsource)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "source", testsource, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid sourcePassword
*/
func TestPostSlidesCopyInvalidSourcePassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePassword, "PostSlidesCopy", "sourcePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePassword = nullValue
    } else {
        testsourcePassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "sourcePassword", testsourcePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "sourcePassword", testsourcePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid sourceStorage
*/
func TestPostSlidesCopyInvalidSourceStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourceStorage, "PostSlidesCopy", "sourceStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourceStorage = nullValue
    } else {
        testsourceStorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "sourceStorage", testsourceStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "sourceStorage", testsourceStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid password
*/
func TestPostSlidesCopyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesCopy", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid folder
*/
func TestPostSlidesCopyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesCopy", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Copy a slide from the current or another presentation.
   Test for SlidesApi.PostSlidesCopy method with invalid storage
*/
func TestPostSlidesCopyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesCopy", "name", "string").(string)
    testslideToCopy, _ := createTestParamValue("PostSlidesCopy", "slideToCopy", "int32").(int32)
    var testposition *int32
    testpositionValue := createTestParamValue("PostSlidesCopy", "position", "int32")
    if (testpositionValue != nil) {
        testposition = new(int32)
        *testposition, _ = testpositionValue.(int32)
    }
    testsource, _ := createTestParamValue("PostSlidesCopy", "source", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesCopy", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesCopy", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesCopy", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesCopy", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesCopy", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesCopy", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesCopy", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CopySlide(testname, testslideToCopy, testposition, testsource, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesCopy", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method
*/
func TestPostSlidesDocument(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)
    e := initializeTest("PostSlidesDocument", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid name
*/
func TestPostSlidesDocumentInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesDocument", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocument", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid data
*/
func TestPostSlidesDocumentInvalidData(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdata, "PostSlidesDocument", "data", "[]byte")
    if (invalidValue == nil) {
        testdata = nil
    } else {
        testdata, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostSlidesDocument", "data", testdata)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "data", testdata, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid inputPassword
*/
func TestPostSlidesDocumentInvalidInputPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testinputPassword, "PostSlidesDocument", "inputPassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testinputPassword = nullValue
    } else {
        testinputPassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocument", "inputPassword", testinputPassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "inputPassword", testinputPassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid password
*/
func TestPostSlidesDocumentInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesDocument", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocument", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid folder
*/
func TestPostSlidesDocumentInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesDocument", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocument", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocument method with invalid storage
*/
func TestPostSlidesDocumentInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocument", "name", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocument", "data", "[]byte").([]byte)
    testinputPassword, _ := createTestParamValue("PostSlidesDocument", "inputPassword", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocument", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocument", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocument", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesDocument", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocument", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentation(testname, testdata, testinputPassword, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocument", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method
*/
func TestPostSlidesDocumentFromHtml(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)
    e := initializeTest("PostSlidesDocumentFromHtml", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method with invalid name
*/
func TestPostSlidesDocumentFromHtmlInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesDocumentFromHtml", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromHtml", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromHtml", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method with invalid html
*/
func TestPostSlidesDocumentFromHtmlInvalidHtml(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testhtml, "PostSlidesDocumentFromHtml", "html", "string")
    if (invalidValue == nil) {
        var nullValue string
        testhtml = nullValue
    } else {
        testhtml, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromHtml", "html", testhtml)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromHtml", "html", testhtml, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method with invalid password
*/
func TestPostSlidesDocumentFromHtmlInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesDocumentFromHtml", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromHtml", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromHtml", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method with invalid folder
*/
func TestPostSlidesDocumentFromHtmlInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesDocumentFromHtml", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromHtml", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromHtml", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from html.
   Test for SlidesApi.PostSlidesDocumentFromHtml method with invalid storage
*/
func TestPostSlidesDocumentFromHtmlInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromHtml", "name", "string").(string)
    testhtml, _ := createTestParamValue("PostSlidesDocumentFromHtml", "html", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromHtml", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromHtml", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromHtml", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesDocumentFromHtml", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromHtml", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromHtml(testname, testhtml, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromHtml", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method
*/
func TestPostSlidesDocumentFromPdf(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)
    e := initializeTest("PostSlidesDocumentFromPdf", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method with invalid name
*/
func TestPostSlidesDocumentFromPdfInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesDocumentFromPdf", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromPdf", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromPdf", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method with invalid pdf
*/
func TestPostSlidesDocumentFromPdfInvalidPdf(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpdf, "PostSlidesDocumentFromPdf", "pdf", "[]byte")
    if (invalidValue == nil) {
        testpdf = nil
    } else {
        testpdf, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostSlidesDocumentFromPdf", "pdf", testpdf)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromPdf", "pdf", testpdf, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method with invalid password
*/
func TestPostSlidesDocumentFromPdfInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesDocumentFromPdf", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromPdf", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromPdf", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method with invalid folder
*/
func TestPostSlidesDocumentFromPdfInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesDocumentFromPdf", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromPdf", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromPdf", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create presentation document from pdf or append pdf to an existing presentation.
   Test for SlidesApi.PostSlidesDocumentFromPdf method with invalid storage
*/
func TestPostSlidesDocumentFromPdfInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromPdf", "name", "string").(string)
    testpdf, _ := createTestParamValue("PostSlidesDocumentFromPdf", "pdf", "[]byte").([]byte)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromPdf", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromPdf", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromPdf", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesDocumentFromPdf", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromPdf", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ImportFromPdf(testname, testpdf, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromPdf", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method
*/
func TestPostSlidesDocumentFromSource(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)
    e := initializeTest("PostSlidesDocumentFromSource", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid name
*/
func TestPostSlidesDocumentFromSourceInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesDocumentFromSource", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid sourcePath
*/
func TestPostSlidesDocumentFromSourceInvalidSourcePath(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePath, "PostSlidesDocumentFromSource", "sourcePath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePath = nullValue
    } else {
        testsourcePath, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "sourcePath", testsourcePath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "sourcePath", testsourcePath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid sourcePassword
*/
func TestPostSlidesDocumentFromSourceInvalidSourcePassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourcePassword, "PostSlidesDocumentFromSource", "sourcePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourcePassword = nullValue
    } else {
        testsourcePassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "sourcePassword", testsourcePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "sourcePassword", testsourcePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid sourceStorage
*/
func TestPostSlidesDocumentFromSourceInvalidSourceStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsourceStorage, "PostSlidesDocumentFromSource", "sourceStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsourceStorage = nullValue
    } else {
        testsourceStorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "sourceStorage", testsourceStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "sourceStorage", testsourceStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid password
*/
func TestPostSlidesDocumentFromSourceInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesDocumentFromSource", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid folder
*/
func TestPostSlidesDocumentFromSourceInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesDocumentFromSource", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation from an existing source.
   Test for SlidesApi.PostSlidesDocumentFromSource method with invalid storage
*/
func TestPostSlidesDocumentFromSourceInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromSource", "name", "string").(string)
    testsourcePath, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePath", "string").(string)
    testsourcePassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourcePassword", "string").(string)
    testsourceStorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "sourceStorage", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromSource", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromSource", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromSource", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesDocumentFromSource", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromSource", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromSource(testname, testsourcePath, testsourcePassword, testsourceStorage, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromSource", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method
*/
func TestPostSlidesDocumentFromTemplate(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)
    e := initializeTest("PostSlidesDocumentFromTemplate", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid name
*/
func TestPostSlidesDocumentFromTemplateInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesDocumentFromTemplate", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid templatePath
*/
func TestPostSlidesDocumentFromTemplateInvalidTemplatePath(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplatePath, "PostSlidesDocumentFromTemplate", "templatePath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplatePath = nullValue
    } else {
        testtemplatePath, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "templatePath", testtemplatePath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "templatePath", testtemplatePath, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid data
*/
func TestPostSlidesDocumentFromTemplateInvalidData(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdata, "PostSlidesDocumentFromTemplate", "data", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdata = nullValue
    } else {
        testdata, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "data", testdata)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "data", testdata, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid templatePassword
*/
func TestPostSlidesDocumentFromTemplateInvalidTemplatePassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplatePassword, "PostSlidesDocumentFromTemplate", "templatePassword", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplatePassword = nullValue
    } else {
        testtemplatePassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "templatePassword", testtemplatePassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "templatePassword", testtemplatePassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid templateStorage
*/
func TestPostSlidesDocumentFromTemplateInvalidTemplateStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtemplateStorage, "PostSlidesDocumentFromTemplate", "templateStorage", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtemplateStorage = nullValue
    } else {
        testtemplateStorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "templateStorage", testtemplateStorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "templateStorage", testtemplateStorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid isImageDataEmbedded
*/
func TestPostSlidesDocumentFromTemplateInvalidIsImageDataEmbedded(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)
    testisImageDataEmbedded = new(bool)

    invalidValue := invalidizeTestParamValue(testisImageDataEmbedded, "PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testisImageDataEmbedded = nullValue
    } else {
        *testisImageDataEmbedded, _ = invalidValue.(bool)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", testisImageDataEmbedded)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "isImageDataEmbedded", testisImageDataEmbedded, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid password
*/
func TestPostSlidesDocumentFromTemplateInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesDocumentFromTemplate", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid folder
*/
func TestPostSlidesDocumentFromTemplateInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesDocumentFromTemplate", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Create a presentation.
   Test for SlidesApi.PostSlidesDocumentFromTemplate method with invalid storage
*/
func TestPostSlidesDocumentFromTemplateInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "name", "string").(string)
    testtemplatePath, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePath", "string").(string)
    testdata, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "data", "string").(string)
    testtemplatePassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templatePassword", "string").(string)
    testtemplateStorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "templateStorage", "string").(string)
    var testisImageDataEmbedded *bool
    testisImageDataEmbeddedValue := createTestParamValue("PostSlidesDocumentFromTemplate", "isImageDataEmbedded", "bool")
    if (testisImageDataEmbeddedValue != nil) {
        testisImageDataEmbedded = new(bool)
        *testisImageDataEmbedded, _ = testisImageDataEmbeddedValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesDocumentFromTemplate", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesDocumentFromTemplate", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesDocumentFromTemplate", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreatePresentationFromTemplate(testname, testtemplatePath, testdata, testtemplatePassword, testtemplateStorage, testisImageDataEmbedded, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesDocumentFromTemplate", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.PostSlidesMerge method
*/
func TestPostSlidesMerge(t *testing.T) {
    testfiles, _ := createTestParamValue("PostSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PostSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PostSlidesMerge", "password", "string").(string)
    e := initializeTest("PostSlidesMerge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.MergeOnline(testfiles, testrequest, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.PostSlidesMerge method with invalid files
*/
func TestPostSlidesMergeInvalidFiles(t *testing.T) {
    testfiles, _ := createTestParamValue("PostSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PostSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PostSlidesMerge", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testfiles, "PostSlidesMerge", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("PostSlidesMerge", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesMerge", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.PostSlidesMerge method with invalid request
*/
func TestPostSlidesMergeInvalidRequest(t *testing.T) {
    testfiles, _ := createTestParamValue("PostSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PostSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PostSlidesMerge", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "PostSlidesMerge", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("PostSlidesMerge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesMerge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
   Test for SlidesApi.PostSlidesMerge method with invalid password
*/
func TestPostSlidesMergeInvalidPassword(t *testing.T) {
    testfiles, _ := createTestParamValue("PostSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PostSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PostSlidesMerge", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesMerge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesMerge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MergeOnline(testfiles, testrequest, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesMerge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.PostSlidesPipeline method
*/
func TestPostSlidesPipeline(t *testing.T) {
    testpipeline, _ := createTestParamValue("PostSlidesPipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("PostSlidesPipeline", "files", "[][]byte").([][]byte)
    e := initializeTest("PostSlidesPipeline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.Pipeline(testpipeline, testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.PostSlidesPipeline method with invalid pipeline
*/
func TestPostSlidesPipelineInvalidPipeline(t *testing.T) {
    testpipeline, _ := createTestParamValue("PostSlidesPipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("PostSlidesPipeline", "files", "[][]byte").([][]byte)

    invalidValue := invalidizeTestParamValue(testpipeline, "PostSlidesPipeline", "pipeline", "Pipeline")
    if (invalidValue == nil) {
        testpipeline = nil
    } else {
        testpipeline, _ = invalidValue.(IPipeline)
    }

    e := initializeTest("PostSlidesPipeline", "pipeline", testpipeline)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Pipeline(testpipeline, testfiles)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPipeline", "pipeline", testpipeline, int32(statusCode), e)
}

/* SlidesApiServiceTests Performs slides pipeline.
   Test for SlidesApi.PostSlidesPipeline method with invalid files
*/
func TestPostSlidesPipelineInvalidFiles(t *testing.T) {
    testpipeline, _ := createTestParamValue("PostSlidesPipeline", "pipeline", "Pipeline").(IPipeline)
    testfiles, _ := createTestParamValue("PostSlidesPipeline", "files", "[][]byte").([][]byte)

    invalidValue := invalidizeTestParamValue(testfiles, "PostSlidesPipeline", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("PostSlidesPipeline", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Pipeline(testpipeline, testfiles)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPipeline", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method
*/
func TestPostSlidesPresentationReplaceText(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)
    e := initializeTest("PostSlidesPresentationReplaceText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid name
*/
func TestPostSlidesPresentationReplaceTextInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesPresentationReplaceText", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid oldValue
*/
func TestPostSlidesPresentationReplaceTextInvalidOldValue(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "PostSlidesPresentationReplaceText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid newValue
*/
func TestPostSlidesPresentationReplaceTextInvalidNewValue(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "PostSlidesPresentationReplaceText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid ignoreCase
*/
func TestPostSlidesPresentationReplaceTextInvalidIgnoreCase(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid password
*/
func TestPostSlidesPresentationReplaceTextInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesPresentationReplaceText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid folder
*/
func TestPostSlidesPresentationReplaceTextInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesPresentationReplaceText", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesPresentationReplaceText method with invalid storage
*/
func TestPostSlidesPresentationReplaceTextInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesPresentationReplaceText", "name", "string").(string)
    testoldValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesPresentationReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesPresentationReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesPresentationReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesPresentationReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesPresentationReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesPresentationReplaceText", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesPresentationReplaceText", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplacePresentationText(testname, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesPresentationReplaceText", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method
*/
func TestPostSlidesReorder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)
    e := initializeTest("PostSlidesReorder", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid name
*/
func TestPostSlidesReorderInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesReorder", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorder", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid slideIndex
*/
func TestPostSlidesReorderInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlidesReorder", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesReorder", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid newPosition
*/
func TestPostSlidesReorderInvalidNewPosition(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPosition, "PostSlidesReorder", "newPosition", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testnewPosition = nullValue
    } else {
        testnewPosition, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesReorder", "newPosition", testnewPosition)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "newPosition", testnewPosition, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid password
*/
func TestPostSlidesReorderInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesReorder", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorder", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid folder
*/
func TestPostSlidesReorderInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesReorder", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorder", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slide position.
   Test for SlidesApi.PostSlidesReorder method with invalid storage
*/
func TestPostSlidesReorderInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorder", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesReorder", "slideIndex", "int32").(int32)
    testnewPosition, _ := createTestParamValue("PostSlidesReorder", "newPosition", "int32").(int32)
    testpassword, _ := createTestParamValue("PostSlidesReorder", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorder", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorder", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesReorder", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorder", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.MoveSlide(testname, testslideIndex, testnewPosition, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorder", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method
*/
func TestPostSlidesReorderMany(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)
    e := initializeTest("PostSlidesReorderMany", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid name
*/
func TestPostSlidesReorderManyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesReorderMany", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorderMany", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid oldPositions
*/
func TestPostSlidesReorderManyInvalidOldPositions(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldPositions, "PostSlidesReorderMany", "oldPositions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testoldPositions = nullValue
    } else {
        testoldPositions, _ = invalidValue.([]int32)
    }

    e := initializeTest("PostSlidesReorderMany", "oldPositions", testoldPositions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "oldPositions", testoldPositions, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid newPositions
*/
func TestPostSlidesReorderManyInvalidNewPositions(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewPositions, "PostSlidesReorderMany", "newPositions", "[]int32")
    if (invalidValue == nil) {
        var nullValue []int32
        testnewPositions = nullValue
    } else {
        testnewPositions, _ = invalidValue.([]int32)
    }

    e := initializeTest("PostSlidesReorderMany", "newPositions", testnewPositions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "newPositions", testnewPositions, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid password
*/
func TestPostSlidesReorderManyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesReorderMany", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorderMany", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid folder
*/
func TestPostSlidesReorderManyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesReorderMany", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorderMany", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Reorder presentation slides positions.
   Test for SlidesApi.PostSlidesReorderMany method with invalid storage
*/
func TestPostSlidesReorderManyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesReorderMany", "name", "string").(string)
    testoldPositions, _ := createTestParamValue("PostSlidesReorderMany", "oldPositions", "[]int32").([]int32)
    testnewPositions, _ := createTestParamValue("PostSlidesReorderMany", "newPositions", "[]int32").([]int32)
    testpassword, _ := createTestParamValue("PostSlidesReorderMany", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesReorderMany", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesReorderMany", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesReorderMany", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesReorderMany", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReorderSlides(testname, testoldPositions, testnewPositions, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesReorderMany", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method
*/
func TestPostSlidesSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PostSlidesSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid name
*/
func TestPostSlidesSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid format
*/
func TestPostSlidesSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostSlidesSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid options
*/
func TestPostSlidesSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostSlidesSaveAs", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("PostSlidesSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid password
*/
func TestPostSlidesSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid folder
*/
func TestPostSlidesSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid storage
*/
func TestPostSlidesSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PostSlidesSaveAs method with invalid fontsFolder
*/
func TestPostSlidesSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PostSlidesSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PostSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostSlidesSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadPresentation(testname, testformat, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method
*/
func TestPostSlidesSetDocumentProperties(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)
    e := initializeTest("PostSlidesSetDocumentProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method with invalid name
*/
func TestPostSlidesSetDocumentPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesSetDocumentProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSetDocumentProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSetDocumentProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method with invalid properties
*/
func TestPostSlidesSetDocumentPropertiesInvalidProperties(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testproperties, "PostSlidesSetDocumentProperties", "properties", "DocumentProperties")
    if (invalidValue == nil) {
        testproperties = nil
    } else {
        testproperties, _ = invalidValue.(IDocumentProperties)
    }

    e := initializeTest("PostSlidesSetDocumentProperties", "properties", testproperties)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSetDocumentProperties", "properties", testproperties, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method with invalid password
*/
func TestPostSlidesSetDocumentPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesSetDocumentProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSetDocumentProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSetDocumentProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method with invalid folder
*/
func TestPostSlidesSetDocumentPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesSetDocumentProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSetDocumentProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSetDocumentProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document properties.
   Test for SlidesApi.PostSlidesSetDocumentProperties method with invalid storage
*/
func TestPostSlidesSetDocumentPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSetDocumentProperties", "name", "string").(string)
    testproperties, _ := createTestParamValue("PostSlidesSetDocumentProperties", "properties", "DocumentProperties").(IDocumentProperties)
    testpassword, _ := createTestParamValue("PostSlidesSetDocumentProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSetDocumentProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSetDocumentProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesSetDocumentProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSetDocumentProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperties(testname, testproperties, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSetDocumentProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method
*/
func TestPostSlidesSlideReplaceText(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)
    e := initializeTest("PostSlidesSlideReplaceText", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid name
*/
func TestPostSlidesSlideReplaceTextInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesSlideReplaceText", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid slideIndex
*/
func TestPostSlidesSlideReplaceTextInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSlidesSlideReplaceText", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid oldValue
*/
func TestPostSlidesSlideReplaceTextInvalidOldValue(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoldValue, "PostSlidesSlideReplaceText", "oldValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoldValue = nullValue
    } else {
        testoldValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "oldValue", testoldValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "oldValue", testoldValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid newValue
*/
func TestPostSlidesSlideReplaceTextInvalidNewValue(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testnewValue, "PostSlidesSlideReplaceText", "newValue", "string")
    if (invalidValue == nil) {
        var nullValue string
        testnewValue = nullValue
    } else {
        testnewValue, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "newValue", testnewValue)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "newValue", testnewValue, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid ignoreCase
*/
func TestPostSlidesSlideReplaceTextInvalidIgnoreCase(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)
    testignoreCase = new(bool)

    invalidValue := invalidizeTestParamValue(testignoreCase, "PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (invalidValue == nil) {
        var nullValue *bool
        testignoreCase = nullValue
    } else {
        *testignoreCase, _ = invalidValue.(bool)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "ignoreCase", testignoreCase)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "ignoreCase", testignoreCase, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid password
*/
func TestPostSlidesSlideReplaceTextInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesSlideReplaceText", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid folder
*/
func TestPostSlidesSlideReplaceTextInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesSlideReplaceText", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace text with a new value.
   Test for SlidesApi.PostSlidesSlideReplaceText method with invalid storage
*/
func TestPostSlidesSlideReplaceTextInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSlideReplaceText", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSlidesSlideReplaceText", "slideIndex", "int32").(int32)
    testoldValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "oldValue", "string").(string)
    testnewValue, _ := createTestParamValue("PostSlidesSlideReplaceText", "newValue", "string").(string)
    var testignoreCase *bool
    testignoreCaseValue := createTestParamValue("PostSlidesSlideReplaceText", "ignoreCase", "bool")
    if (testignoreCaseValue != nil) {
        testignoreCase = new(bool)
        *testignoreCase, _ = testignoreCaseValue.(bool)
    }
    testpassword, _ := createTestParamValue("PostSlidesSlideReplaceText", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSlideReplaceText", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSlideReplaceText", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesSlideReplaceText", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSlideReplaceText", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.ReplaceSlideText(testname, testslideIndex, testoldValue, testnewValue, testignoreCase, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSlideReplaceText", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method
*/
func TestPostSlidesSplit(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)
    e := initializeTest("PostSlidesSplit", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid name
*/
func TestPostSlidesSplitInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSlidesSplit", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid options
*/
func TestPostSlidesSplitInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostSlidesSplit", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("PostSlidesSplit", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid format
*/
func TestPostSlidesSplitInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostSlidesSplit", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid width
*/
func TestPostSlidesSplitInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PostSlidesSplit", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesSplit", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid height
*/
func TestPostSlidesSplitInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PostSlidesSplit", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesSplit", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid from
*/
func TestPostSlidesSplitInvalidFrom(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "PostSlidesSplit", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesSplit", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid to
*/
func TestPostSlidesSplitInvalidTo(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "PostSlidesSplit", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSlidesSplit", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid destFolder
*/
func TestPostSlidesSplitInvalidDestFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestFolder, "PostSlidesSplit", "destFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestFolder = nullValue
    } else {
        testdestFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "destFolder", testdestFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "destFolder", testdestFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid password
*/
func TestPostSlidesSplitInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSlidesSplit", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid folder
*/
func TestPostSlidesSplitInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSlidesSplit", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid storage
*/
func TestPostSlidesSplitInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSlidesSplit", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splitting presentations. Create one image per slide.
   Test for SlidesApi.PostSlidesSplit method with invalid fontsFolder
*/
func TestPostSlidesSplitInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSlidesSplit", "name", "string").(string)
    testoptions, _ := createTestParamValue("PostSlidesSplit", "options", "ExportOptions").(IExportOptions)
    testformat, _ := createTestParamValue("PostSlidesSplit", "format", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PostSlidesSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PostSlidesSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PostSlidesSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PostSlidesSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testdestFolder, _ := createTestParamValue("PostSlidesSplit", "destFolder", "string").(string)
    testpassword, _ := createTestParamValue("PostSlidesSplit", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSlidesSplit", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSlidesSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSlidesSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostSlidesSplit", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSlidesSplit", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.Split(testname, testoptions, testformat, testwidth, testheight, testfrom, testto, testdestFolder, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSlidesSplit", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method
*/
func TestPostSubshapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PostSubshapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid name
*/
func TestPostSubshapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostSubshapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid slideIndex
*/
func TestPostSubshapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PostSubshapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSubshapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid path
*/
func TestPostSubshapeSaveAsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PostSubshapeSaveAs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid shapeIndex
*/
func TestPostSubshapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PostSubshapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PostSubshapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid format
*/
func TestPostSubshapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PostSubshapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid options
*/
func TestPostSubshapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PostSubshapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PostSubshapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid scaleX
*/
func TestPostSubshapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PostSubshapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PostSubshapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid scaleY
*/
func TestPostSubshapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PostSubshapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PostSubshapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid bounds
*/
func TestPostSubshapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PostSubshapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid password
*/
func TestPostSubshapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostSubshapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid folder
*/
func TestPostSubshapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostSubshapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid storage
*/
func TestPostSubshapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostSubshapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format (for smart art and group shapes).
   Test for SlidesApi.PostSubshapeSaveAs method with invalid fontsFolder
*/
func TestPostSubshapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PostSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PostSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PostSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PostSubshapeSaveAs", "format", "string").(string)
    testoptions, _ := createTestParamValue("PostSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PostSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PostSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PostSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PostSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PostSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PostSubshapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostSubshapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DownloadSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostSubshapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method
*/
func TestPostWatermark(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)
    e := initializeTest("PostWatermark", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid name
*/
func TestPostWatermarkInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PostWatermark", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid shape
*/
func TestPostWatermarkInvalidShape(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshape, "PostWatermark", "shape", "Shape")
    if (invalidValue == nil) {
        testshape = nil
    } else {
        testshape, _ = invalidValue.(IShape)
    }

    e := initializeTest("PostWatermark", "shape", testshape)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "shape", testshape, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid fontHeight
*/
func TestPostWatermarkInvalidFontHeight(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)
    testfontHeight = new(float64)

    invalidValue := invalidizeTestParamValue(testfontHeight, "PostWatermark", "fontHeight", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testfontHeight = nullValue
    } else {
        *testfontHeight, _ = invalidValue.(float64)
    }

    e := initializeTest("PostWatermark", "fontHeight", testfontHeight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "fontHeight", testfontHeight, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid text
*/
func TestPostWatermarkInvalidText(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testtext, "PostWatermark", "text", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtext = nullValue
    } else {
        testtext, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "text", testtext)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "text", testtext, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid fontName
*/
func TestPostWatermarkInvalidFontName(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontName, "PostWatermark", "fontName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontName = nullValue
    } else {
        testfontName, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "fontName", testfontName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "fontName", testfontName, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid fontColor
*/
func TestPostWatermarkInvalidFontColor(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontColor, "PostWatermark", "fontColor", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontColor = nullValue
    } else {
        testfontColor, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "fontColor", testfontColor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "fontColor", testfontColor, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid password
*/
func TestPostWatermarkInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostWatermark", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid folder
*/
func TestPostWatermarkInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PostWatermark", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermark method with invalid storage
*/
func TestPostWatermarkInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PostWatermark", "name", "string").(string)
    testshape, _ := createTestParamValue("PostWatermark", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermark", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermark", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermark", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermark", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermark", "password", "string").(string)
    testfolder, _ := createTestParamValue("PostWatermark", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PostWatermark", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PostWatermark", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermark", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.CreateWatermark(testname, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermark", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.PostWatermarkDeleteOnline method
*/
func TestPostWatermarkDeleteOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkDeleteOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("PostWatermarkDeleteOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkDeleteOnline", "password", "string").(string)
    e := initializeTest("PostWatermarkDeleteOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.PostWatermarkDeleteOnline method with invalid document
*/
func TestPostWatermarkDeleteOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkDeleteOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("PostWatermarkDeleteOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkDeleteOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostWatermarkDeleteOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostWatermarkDeleteOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkDeleteOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.PostWatermarkDeleteOnline method with invalid shapeName
*/
func TestPostWatermarkDeleteOnlineInvalidShapeName(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkDeleteOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("PostWatermarkDeleteOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkDeleteOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeName, "PostWatermarkDeleteOnline", "shapeName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testshapeName = nullValue
    } else {
        testshapeName, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkDeleteOnline", "shapeName", testshapeName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkDeleteOnline", "shapeName", testshapeName, int32(statusCode), e)
}

/* SlidesApiServiceTests Removes shapes with name \&quot;watermark\&quot; from the presentation.
   Test for SlidesApi.PostWatermarkDeleteOnline method with invalid password
*/
func TestPostWatermarkDeleteOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkDeleteOnline", "document", "[]byte").([]byte)
    testshapeName, _ := createTestParamValue("PostWatermarkDeleteOnline", "shapeName", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkDeleteOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostWatermarkDeleteOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkDeleteOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.DeleteWatermarkOnline(testdocument, testshapeName, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkDeleteOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method
*/
func TestPostWatermarkOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)
    e := initializeTest("PostWatermarkOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid document
*/
func TestPostWatermarkOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PostWatermarkOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PostWatermarkOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid shape
*/
func TestPostWatermarkOnlineInvalidShape(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testshape, "PostWatermarkOnline", "shape", "Shape")
    if (invalidValue == nil) {
        testshape = nil
    } else {
        testshape, _ = invalidValue.(IShape)
    }

    e := initializeTest("PostWatermarkOnline", "shape", testshape)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "shape", testshape, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid fontHeight
*/
func TestPostWatermarkOnlineInvalidFontHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)
    testfontHeight = new(float64)

    invalidValue := invalidizeTestParamValue(testfontHeight, "PostWatermarkOnline", "fontHeight", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testfontHeight = nullValue
    } else {
        *testfontHeight, _ = invalidValue.(float64)
    }

    e := initializeTest("PostWatermarkOnline", "fontHeight", testfontHeight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "fontHeight", testfontHeight, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid text
*/
func TestPostWatermarkOnlineInvalidText(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testtext, "PostWatermarkOnline", "text", "string")
    if (invalidValue == nil) {
        var nullValue string
        testtext = nullValue
    } else {
        testtext, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkOnline", "text", testtext)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "text", testtext, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid fontName
*/
func TestPostWatermarkOnlineInvalidFontName(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontName, "PostWatermarkOnline", "fontName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontName = nullValue
    } else {
        testfontName, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkOnline", "fontName", testfontName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "fontName", testfontName, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid fontColor
*/
func TestPostWatermarkOnlineInvalidFontColor(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontColor, "PostWatermarkOnline", "fontColor", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontColor = nullValue
    } else {
        testfontColor, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkOnline", "fontColor", testfontColor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "fontColor", testfontColor, int32(statusCode), e)
}

/* SlidesApiServiceTests Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
   Test for SlidesApi.PostWatermarkOnline method with invalid password
*/
func TestPostWatermarkOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PostWatermarkOnline", "document", "[]byte").([]byte)
    testshape, _ := createTestParamValue("PostWatermarkOnline", "shape", "Shape").(IShape)
    var testfontHeight *float64
    testfontHeightValue := createTestParamValue("PostWatermarkOnline", "fontHeight", "float64")
    if (testfontHeightValue != nil) {
        testfontHeight = new(float64)
        *testfontHeight, _ = testfontHeightValue.(float64)
    }
    testtext, _ := createTestParamValue("PostWatermarkOnline", "text", "string").(string)
    testfontName, _ := createTestParamValue("PostWatermarkOnline", "fontName", "string").(string)
    testfontColor, _ := createTestParamValue("PostWatermarkOnline", "fontColor", "string").(string)
    testpassword, _ := createTestParamValue("PostWatermarkOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PostWatermarkOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PostWatermarkOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.CreateWatermarkOnline(testdocument, testshape, testfontHeight, testtext, testfontName, testfontColor, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PostWatermarkOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method
*/
func TestPutChartCategory(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)
    e := initializeTest("PutChartCategory", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid name
*/
func TestPutChartCategoryInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutChartCategory", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartCategory", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid slideIndex
*/
func TestPutChartCategoryInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutChartCategory", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartCategory", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid shapeIndex
*/
func TestPutChartCategoryInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutChartCategory", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartCategory", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid categoryIndex
*/
func TestPutChartCategoryInvalidCategoryIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategoryIndex, "PutChartCategory", "categoryIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testcategoryIndex = nullValue
    } else {
        testcategoryIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartCategory", "categoryIndex", testcategoryIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "categoryIndex", testcategoryIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid category
*/
func TestPutChartCategoryInvalidCategory(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcategory, "PutChartCategory", "category", "ChartCategory")
    if (invalidValue == nil) {
        testcategory = nil
    } else {
        testcategory, _ = invalidValue.(IChartCategory)
    }

    e := initializeTest("PutChartCategory", "category", testcategory)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "category", testcategory, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid password
*/
func TestPutChartCategoryInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutChartCategory", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartCategory", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid folder
*/
func TestPutChartCategoryInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutChartCategory", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartCategory", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a chart category.
   Test for SlidesApi.PutChartCategory method with invalid storage
*/
func TestPutChartCategoryInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutChartCategory", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartCategory", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartCategory", "shapeIndex", "int32").(int32)
    testcategoryIndex, _ := createTestParamValue("PutChartCategory", "categoryIndex", "int32").(int32)
    testcategory, _ := createTestParamValue("PutChartCategory", "category", "ChartCategory").(IChartCategory)
    testpassword, _ := createTestParamValue("PutChartCategory", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartCategory", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartCategory", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutChartCategory", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartCategory", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartCategory(testname, testslideIndex, testshapeIndex, testcategoryIndex, testcategory, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartCategory", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method
*/
func TestPutChartDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)
    e := initializeTest("PutChartDataPoint", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid name
*/
func TestPutChartDataPointInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutChartDataPoint", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartDataPoint", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid slideIndex
*/
func TestPutChartDataPointInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutChartDataPoint", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartDataPoint", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid shapeIndex
*/
func TestPutChartDataPointInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutChartDataPoint", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartDataPoint", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid seriesIndex
*/
func TestPutChartDataPointInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "PutChartDataPoint", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartDataPoint", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid pointIndex
*/
func TestPutChartDataPointInvalidPointIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpointIndex, "PutChartDataPoint", "pointIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testpointIndex = nullValue
    } else {
        testpointIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartDataPoint", "pointIndex", testpointIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "pointIndex", testpointIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid dataPoint
*/
func TestPutChartDataPointInvalidDataPoint(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdataPoint, "PutChartDataPoint", "dataPoint", "DataPoint")
    if (invalidValue == nil) {
        testdataPoint = nil
    } else {
        testdataPoint, _ = invalidValue.(IDataPoint)
    }

    e := initializeTest("PutChartDataPoint", "dataPoint", testdataPoint)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "dataPoint", testdataPoint, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid password
*/
func TestPutChartDataPointInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutChartDataPoint", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartDataPoint", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid folder
*/
func TestPutChartDataPointInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutChartDataPoint", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartDataPoint", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a data point in a chart series.
   Test for SlidesApi.PutChartDataPoint method with invalid storage
*/
func TestPutChartDataPointInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutChartDataPoint", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartDataPoint", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartDataPoint", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartDataPoint", "seriesIndex", "int32").(int32)
    testpointIndex, _ := createTestParamValue("PutChartDataPoint", "pointIndex", "int32").(int32)
    testdataPoint, _ := createTestParamValue("PutChartDataPoint", "dataPoint", "DataPoint").(IDataPoint)
    testpassword, _ := createTestParamValue("PutChartDataPoint", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartDataPoint", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartDataPoint", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutChartDataPoint", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartDataPoint", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartDataPoint(testname, testslideIndex, testshapeIndex, testseriesIndex, testpointIndex, testdataPoint, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartDataPoint", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method
*/
func TestPutChartSeries(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)
    e := initializeTest("PutChartSeries", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid name
*/
func TestPutChartSeriesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutChartSeries", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartSeries", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid slideIndex
*/
func TestPutChartSeriesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutChartSeries", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartSeries", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid shapeIndex
*/
func TestPutChartSeriesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutChartSeries", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartSeries", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid seriesIndex
*/
func TestPutChartSeriesInvalidSeriesIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseriesIndex, "PutChartSeries", "seriesIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testseriesIndex = nullValue
    } else {
        testseriesIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutChartSeries", "seriesIndex", testseriesIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "seriesIndex", testseriesIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid series
*/
func TestPutChartSeriesInvalidSeries(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testseries, "PutChartSeries", "series", "Series")
    if (invalidValue == nil) {
        testseries = nil
    } else {
        testseries, _ = invalidValue.(ISeries)
    }

    e := initializeTest("PutChartSeries", "series", testseries)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "series", testseries, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid password
*/
func TestPutChartSeriesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutChartSeries", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartSeries", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid folder
*/
func TestPutChartSeriesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutChartSeries", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartSeries", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a series in a chart.
   Test for SlidesApi.PutChartSeries method with invalid storage
*/
func TestPutChartSeriesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutChartSeries", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutChartSeries", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutChartSeries", "shapeIndex", "int32").(int32)
    testseriesIndex, _ := createTestParamValue("PutChartSeries", "seriesIndex", "int32").(int32)
    testseries, _ := createTestParamValue("PutChartSeries", "series", "Series").(ISeries)
    testpassword, _ := createTestParamValue("PutChartSeries", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutChartSeries", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutChartSeries", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutChartSeries", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutChartSeries", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateChartSeries(testname, testslideIndex, testshapeIndex, testseriesIndex, testseries, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutChartSeries", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method
*/
func TestPutExportShape(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)
    e := initializeTest("PutExportShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid document
*/
func TestPutExportShapeInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PutExportShape", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PutExportShape", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid slideIndex
*/
func TestPutExportShapeInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutExportShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutExportShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid shapeIndex
*/
func TestPutExportShapeInvalidShapeIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutExportShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutExportShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid format
*/
func TestPutExportShapeInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutExportShape", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid outPath
*/
func TestPutExportShapeInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutExportShape", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid scaleX
*/
func TestPutExportShapeInvalidScaleX(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PutExportShape", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PutExportShape", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid scaleY
*/
func TestPutExportShapeInvalidScaleY(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PutExportShape", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PutExportShape", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid bounds
*/
func TestPutExportShapeInvalidBounds(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PutExportShape", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid password
*/
func TestPutExportShapeInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutExportShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid storage
*/
func TestPutExportShapeInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutExportShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutExportShape method with invalid fontsFolder
*/
func TestPutExportShapeInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportShape", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutExportShape", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportShape", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportShape", "outPath", "string").(string)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutExportShape", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutExportShape", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutExportShape", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutExportShape", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportShape", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportShape", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutExportShape", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportShape", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShapeOnline(testdocument, testslideIndex, testshapeIndex, testformat, testoutPath, testscaleX, testscaleY, testbounds, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportShape", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method
*/
func TestPutExportSlide(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)
    e := initializeTest("PutExportSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid document
*/
func TestPutExportSlideInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PutExportSlide", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PutExportSlide", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid slideIndex
*/
func TestPutExportSlideInvalidSlideIndex(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutExportSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutExportSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid format
*/
func TestPutExportSlideInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutExportSlide", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportSlide", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid outPath
*/
func TestPutExportSlideInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutExportSlide", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportSlide", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid width
*/
func TestPutExportSlideInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PutExportSlide", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PutExportSlide", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid height
*/
func TestPutExportSlideInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PutExportSlide", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PutExportSlide", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid password
*/
func TestPutExportSlideInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutExportSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid storage
*/
func TestPutExportSlideInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutExportSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutExportSlide method with invalid fontsFolder
*/
func TestPutExportSlideInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PutExportSlide", "document", "[]byte").([]byte)
    testslideIndex, _ := createTestParamValue("PutExportSlide", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutExportSlide", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutExportSlide", "outPath", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutExportSlide", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutExportSlide", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutExportSlide", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutExportSlide", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutExportSlide", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutExportSlide", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutExportSlide", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlideOnline(testdocument, testslideIndex, testformat, testoutPath, testwidth, testheight, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutExportSlide", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method
*/
func TestPutLayoutSlide(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)
    e := initializeTest("PutLayoutSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid name
*/
func TestPutLayoutSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutLayoutSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutLayoutSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid slideIndex
*/
func TestPutLayoutSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutLayoutSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutLayoutSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid slideDto
*/
func TestPutLayoutSlideInvalidSlideDto(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideDto, "PutLayoutSlide", "slideDto", "LayoutSlide")
    if (invalidValue == nil) {
        testslideDto = nil
    } else {
        testslideDto, _ = invalidValue.(ILayoutSlide)
    }

    e := initializeTest("PutLayoutSlide", "slideDto", testslideDto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "slideDto", testslideDto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid password
*/
func TestPutLayoutSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutLayoutSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutLayoutSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid folder
*/
func TestPutLayoutSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutLayoutSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutLayoutSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a layoutSlide.
   Test for SlidesApi.PutLayoutSlide method with invalid storage
*/
func TestPutLayoutSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutLayoutSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutLayoutSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutLayoutSlide", "slideDto", "LayoutSlide").(ILayoutSlide)
    testpassword, _ := createTestParamValue("PutLayoutSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutLayoutSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutLayoutSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutLayoutSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutLayoutSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateLayoutSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutLayoutSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method
*/
func TestPutNotesSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("PutNotesSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid name
*/
func TestPutNotesSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutNotesSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid slideIndex
*/
func TestPutNotesSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutNotesSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid dto
*/
func TestPutNotesSlideHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlideHeaderFooter)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid password
*/
func TestPutNotesSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutNotesSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid folder
*/
func TestPutNotesSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutNotesSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set header/footer the notes slide.
   Test for SlidesApi.PutNotesSlideHeaderFooter method with invalid storage
*/
func TestPutNotesSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutNotesSlideHeaderFooter", "dto", "NotesSlideHeaderFooter").(INotesSlideHeaderFooter)
    testpassword, _ := createTestParamValue("PutNotesSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutNotesSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetNotesSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method
*/
func TestPutNotesSlideShapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PutNotesSlideShapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid name
*/
func TestPutNotesSlideShapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutNotesSlideShapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid slideIndex
*/
func TestPutNotesSlideShapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutNotesSlideShapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid shapeIndex
*/
func TestPutNotesSlideShapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutNotesSlideShapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid format
*/
func TestPutNotesSlideShapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutNotesSlideShapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid outPath
*/
func TestPutNotesSlideShapeSaveAsInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutNotesSlideShapeSaveAs", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid options
*/
func TestPutNotesSlideShapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid scaleX
*/
func TestPutNotesSlideShapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid scaleY
*/
func TestPutNotesSlideShapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid bounds
*/
func TestPutNotesSlideShapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PutNotesSlideShapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid password
*/
func TestPutNotesSlideShapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutNotesSlideShapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid folder
*/
func TestPutNotesSlideShapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutNotesSlideShapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid storage
*/
func TestPutNotesSlideShapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutNotesSlideShapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutNotesSlideShapeSaveAs method with invalid fontsFolder
*/
func TestPutNotesSlideShapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutNotesSlideShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutNotesSlideShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutNotesSlideShapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutNotesSlideShapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveNotesSlideShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutNotesSlideShapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method
*/
func TestPutPresentationMerge(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)
    e := initializeTest("PutPresentationMerge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method with invalid name
*/
func TestPutPresentationMergeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutPresentationMerge", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationMerge", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationMerge", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method with invalid request
*/
func TestPutPresentationMergeInvalidRequest(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "PutPresentationMerge", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("PutPresentationMerge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationMerge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method with invalid password
*/
func TestPutPresentationMergeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutPresentationMerge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationMerge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationMerge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method with invalid folder
*/
func TestPutPresentationMergeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutPresentationMerge", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationMerge", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationMerge", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Merge the presentation with other presentations or some of their slides specified in the request parameter.
   Test for SlidesApi.PutPresentationMerge method with invalid storage
*/
func TestPutPresentationMergeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutPresentationMerge", "name", "string").(string)
    testrequest, _ := createTestParamValue("PutPresentationMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutPresentationMerge", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutPresentationMerge", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutPresentationMerge", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationMerge", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.OrderedMerge(testname, testrequest, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationMerge", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method
*/
func TestPutPresentationSplit(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)
    e := initializeTest("PutPresentationSplit", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid document
*/
func TestPutPresentationSplitInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PutPresentationSplit", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PutPresentationSplit", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid format
*/
func TestPutPresentationSplitInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutPresentationSplit", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationSplit", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid destFolder
*/
func TestPutPresentationSplitInvalidDestFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdestFolder, "PutPresentationSplit", "destFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testdestFolder = nullValue
    } else {
        testdestFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationSplit", "destFolder", testdestFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "destFolder", testdestFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid width
*/
func TestPutPresentationSplitInvalidWidth(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PutPresentationSplit", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PutPresentationSplit", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid height
*/
func TestPutPresentationSplitInvalidHeight(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PutPresentationSplit", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PutPresentationSplit", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid from
*/
func TestPutPresentationSplitInvalidFrom(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)
    testfrom = new(int32)

    invalidValue := invalidizeTestParamValue(testfrom, "PutPresentationSplit", "from", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testfrom = nullValue
    } else {
        *testfrom, _ = invalidValue.(int32)
    }

    e := initializeTest("PutPresentationSplit", "from", testfrom)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "from", testfrom, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid to
*/
func TestPutPresentationSplitInvalidTo(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)
    testto = new(int32)

    invalidValue := invalidizeTestParamValue(testto, "PutPresentationSplit", "to", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testto = nullValue
    } else {
        *testto, _ = invalidValue.(int32)
    }

    e := initializeTest("PutPresentationSplit", "to", testto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "to", testto, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid password
*/
func TestPutPresentationSplitInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutPresentationSplit", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationSplit", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid storage
*/
func TestPutPresentationSplitInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutPresentationSplit", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationSplit", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
   Test for SlidesApi.PutPresentationSplit method with invalid fontsFolder
*/
func TestPutPresentationSplitInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PutPresentationSplit", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutPresentationSplit", "format", "string").(string)
    testdestFolder, _ := createTestParamValue("PutPresentationSplit", "destFolder", "string").(string)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutPresentationSplit", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutPresentationSplit", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    var testfrom *int32
    testfromValue := createTestParamValue("PutPresentationSplit", "from", "int32")
    if (testfromValue != nil) {
        testfrom = new(int32)
        *testfrom, _ = testfromValue.(int32)
    }
    var testto *int32
    testtoValue := createTestParamValue("PutPresentationSplit", "to", "int32")
    if (testtoValue != nil) {
        testto = new(int32)
        *testto, _ = testtoValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutPresentationSplit", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutPresentationSplit", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutPresentationSplit", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutPresentationSplit", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutPresentationSplit", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SplitAndSaveOnline(testdocument, testformat, testdestFolder, testwidth, testheight, testfrom, testto, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutPresentationSplit", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method
*/
func TestPutSection(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)
    e := initializeTest("PutSection", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid name
*/
func TestPutSectionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSection", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSection", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid sectionIndex
*/
func TestPutSectionInvalidSectionIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionIndex, "PutSection", "sectionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsectionIndex = nullValue
    } else {
        testsectionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSection", "sectionIndex", testsectionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "sectionIndex", testsectionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid sectionName
*/
func TestPutSectionInvalidSectionName(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsectionName, "PutSection", "sectionName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testsectionName = nullValue
    } else {
        testsectionName, _ = invalidValue.(string)
    }

    e := initializeTest("PutSection", "sectionName", testsectionName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "sectionName", testsectionName, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid password
*/
func TestPutSectionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSection", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSection", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid folder
*/
func TestPutSectionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSection", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSection", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update section name.
   Test for SlidesApi.PutSection method with invalid storage
*/
func TestPutSectionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSection", "name", "string").(string)
    testsectionIndex, _ := createTestParamValue("PutSection", "sectionIndex", "int32").(int32)
    testsectionName, _ := createTestParamValue("PutSection", "sectionName", "string").(string)
    testpassword, _ := createTestParamValue("PutSection", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSection", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSection", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSection", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSection", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSection(testname, testsectionIndex, testsectionName, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSection", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method
*/
func TestPutSections(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)
    e := initializeTest("PutSections", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method with invalid name
*/
func TestPutSectionsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSections", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSections", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSections", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method with invalid sections
*/
func TestPutSectionsInvalidSections(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsections, "PutSections", "sections", "Sections")
    if (invalidValue == nil) {
        testsections = nil
    } else {
        testsections, _ = invalidValue.(ISections)
    }

    e := initializeTest("PutSections", "sections", testsections)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSections", "sections", testsections, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method with invalid password
*/
func TestPutSectionsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSections", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSections", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSections", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method with invalid folder
*/
func TestPutSectionsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSections", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSections", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSections", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Replace existing presentation sections with the ones provided in the sections DTO.
   Test for SlidesApi.PutSections method with invalid storage
*/
func TestPutSectionsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSections", "name", "string").(string)
    testsections, _ := createTestParamValue("PutSections", "sections", "Sections").(ISections)
    testpassword, _ := createTestParamValue("PutSections", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSections", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSections", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSections", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSections", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSections(testname, testsections, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSections", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method
*/
func TestPutSetParagraphPortionProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)
    e := initializeTest("PutSetParagraphPortionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid name
*/
func TestPutSetParagraphPortionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSetParagraphPortionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid slideIndex
*/
func TestPutSetParagraphPortionPropertiesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSetParagraphPortionProperties", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid shapeIndex
*/
func TestPutSetParagraphPortionPropertiesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSetParagraphPortionProperties", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid paragraphIndex
*/
func TestPutSetParagraphPortionPropertiesInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutSetParagraphPortionProperties", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid portionIndex
*/
func TestPutSetParagraphPortionPropertiesInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "PutSetParagraphPortionProperties", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid dto
*/
func TestPutSetParagraphPortionPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSetParagraphPortionProperties", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid password
*/
func TestPutSetParagraphPortionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSetParagraphPortionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid folder
*/
func TestPutSetParagraphPortionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSetParagraphPortionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutSetParagraphPortionProperties method with invalid storage
*/
func TestPutSetParagraphPortionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSetParagraphPortionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphPortionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdatePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphPortionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method
*/
func TestPutSetParagraphProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)
    e := initializeTest("PutSetParagraphProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid name
*/
func TestPutSetParagraphPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSetParagraphProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid slideIndex
*/
func TestPutSetParagraphPropertiesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSetParagraphProperties", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphProperties", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid shapeIndex
*/
func TestPutSetParagraphPropertiesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSetParagraphProperties", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphProperties", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid paragraphIndex
*/
func TestPutSetParagraphPropertiesInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutSetParagraphProperties", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetParagraphProperties", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid dto
*/
func TestPutSetParagraphPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSetParagraphProperties", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PutSetParagraphProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid password
*/
func TestPutSetParagraphPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSetParagraphProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid folder
*/
func TestPutSetParagraphPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSetParagraphProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutSetParagraphProperties method with invalid storage
*/
func TestPutSetParagraphPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSetParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetParagraphProperties", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSetParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSetParagraphProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetParagraphProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetParagraphProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method
*/
func TestPutSetSubshapeParagraphPortionProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)
    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid name
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSetSubshapeParagraphPortionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid slideIndex
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid path
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PutSetSubshapeParagraphPortionProperties", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid shapeIndex
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid paragraphIndex
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid portionIndex
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid dto
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSetSubshapeParagraphPortionProperties", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid password
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSetSubshapeParagraphPortionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid folder
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSetSubshapeParagraphPortionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphPortionProperties method with invalid storage
*/
func TestPutSetSubshapeParagraphPortionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphPortionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSetSubshapeParagraphPortionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphPortionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapePortion(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphPortionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method
*/
func TestPutSetSubshapeParagraphProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)
    e := initializeTest("PutSetSubshapeParagraphProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid name
*/
func TestPutSetSubshapeParagraphPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSetSubshapeParagraphProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid slideIndex
*/
func TestPutSetSubshapeParagraphPropertiesInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSetSubshapeParagraphProperties", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid path
*/
func TestPutSetSubshapeParagraphPropertiesInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PutSetSubshapeParagraphProperties", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid shapeIndex
*/
func TestPutSetSubshapeParagraphPropertiesInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSetSubshapeParagraphProperties", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid paragraphIndex
*/
func TestPutSetSubshapeParagraphPropertiesInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutSetSubshapeParagraphProperties", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid dto
*/
func TestPutSetSubshapeParagraphPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSetSubshapeParagraphProperties", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid password
*/
func TestPutSetSubshapeParagraphPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSetSubshapeParagraphProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid folder
*/
func TestPutSetSubshapeParagraphPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSetSubshapeParagraphProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties (for smart art and group shapes).
   Test for SlidesApi.PutSetSubshapeParagraphProperties method with invalid storage
*/
func TestPutSetSubshapeParagraphPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSetSubshapeParagraphProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSetSubshapeParagraphProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSetSubshapeParagraphProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshapeParagraph(testname, testslideIndex, testpath, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSetSubshapeParagraphProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method
*/
func TestPutShapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PutShapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid name
*/
func TestPutShapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutShapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid slideIndex
*/
func TestPutShapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutShapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutShapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid shapeIndex
*/
func TestPutShapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutShapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutShapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid format
*/
func TestPutShapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutShapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid outPath
*/
func TestPutShapeSaveAsInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutShapeSaveAs", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid options
*/
func TestPutShapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PutShapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PutShapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid scaleX
*/
func TestPutShapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PutShapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PutShapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid scaleY
*/
func TestPutShapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PutShapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PutShapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid bounds
*/
func TestPutShapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PutShapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid password
*/
func TestPutShapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutShapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid folder
*/
func TestPutShapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutShapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid storage
*/
func TestPutShapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutShapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutShapeSaveAs method with invalid fontsFolder
*/
func TestPutShapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutShapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutShapeSaveAs", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutShapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutShapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutShapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutShapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutShapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutShapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutShapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutShapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutShapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutShapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutShapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutShapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutShapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveShape(testname, testslideIndex, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutShapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method
*/
func TestPutSlideAnimation(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)
    e := initializeTest("PutSlideAnimation", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid name
*/
func TestPutSlideAnimationInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideAnimation", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimation", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid slideIndex
*/
func TestPutSlideAnimationInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideAnimation", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimation", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid animation
*/
func TestPutSlideAnimationInvalidAnimation(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testanimation, "PutSlideAnimation", "animation", "SlideAnimation")
    if (invalidValue == nil) {
        testanimation = nil
    } else {
        testanimation, _ = invalidValue.(ISlideAnimation)
    }

    e := initializeTest("PutSlideAnimation", "animation", testanimation)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "animation", testanimation, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid password
*/
func TestPutSlideAnimationInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideAnimation", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimation", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid folder
*/
func TestPutSlideAnimationInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideAnimation", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimation", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set slide animation.
   Test for SlidesApi.PutSlideAnimation method with invalid storage
*/
func TestPutSlideAnimationInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimation", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimation", "slideIndex", "int32").(int32)
    testanimation, _ := createTestParamValue("PutSlideAnimation", "animation", "SlideAnimation").(ISlideAnimation)
    testpassword, _ := createTestParamValue("PutSlideAnimation", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimation", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimation", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideAnimation", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimation", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetAnimation(testname, testslideIndex, testanimation, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimation", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method
*/
func TestPutSlideAnimationEffect(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)
    e := initializeTest("PutSlideAnimationEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid name
*/
func TestPutSlideAnimationEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideAnimationEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid slideIndex
*/
func TestPutSlideAnimationEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideAnimationEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimationEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid effectIndex
*/
func TestPutSlideAnimationEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "PutSlideAnimationEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimationEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid effect
*/
func TestPutSlideAnimationEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "PutSlideAnimationEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("PutSlideAnimationEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid password
*/
func TestPutSlideAnimationEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideAnimationEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid folder
*/
func TestPutSlideAnimationEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideAnimationEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide.
   Test for SlidesApi.PutSlideAnimationEffect method with invalid storage
*/
func TestPutSlideAnimationEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationEffect", "slideIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideAnimationEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationEffect(testname, testslideIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method
*/
func TestPutSlideAnimationInteractiveSequenceEffect(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)
    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid name
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideAnimationInteractiveSequenceEffect", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid slideIndex
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid sequenceIndex
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidSequenceIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testsequenceIndex, "PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testsequenceIndex = nullValue
    } else {
        testsequenceIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", testsequenceIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid effectIndex
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidEffectIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffectIndex, "PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testeffectIndex = nullValue
    } else {
        testeffectIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "effectIndex", testeffectIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid effect
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidEffect(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testeffect, "PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect")
    if (invalidValue == nil) {
        testeffect = nil
    } else {
        testeffect, _ = invalidValue.(IEffect)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "effect", testeffect)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "effect", testeffect, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid password
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideAnimationInteractiveSequenceEffect", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid folder
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideAnimationInteractiveSequenceEffect", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Modify an animation effect for a slide interactive sequence.
   Test for SlidesApi.PutSlideAnimationInteractiveSequenceEffect method with invalid storage
*/
func TestPutSlideAnimationInteractiveSequenceEffectInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "slideIndex", "int32").(int32)
    testsequenceIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "sequenceIndex", "int32").(int32)
    testeffectIndex, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effectIndex", "int32").(int32)
    testeffect, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "effect", "Effect").(IEffect)
    testpassword, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideAnimationInteractiveSequenceEffect", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideAnimationInteractiveSequenceEffect", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideAnimationInteractiveSequenceEffect", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateAnimationInteractiveSequenceEffect(testname, testslideIndex, testsequenceIndex, testeffectIndex, testeffect, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideAnimationInteractiveSequenceEffect", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method
*/
func TestPutSlideHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)
    e := initializeTest("PutSlideHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid name
*/
func TestPutSlideHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid slideIndex
*/
func TestPutSlideHeaderFooterInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideHeaderFooter", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideHeaderFooter", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid dto
*/
func TestPutSlideHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlideHeaderFooter", "dto", "HeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IHeaderFooter)
    }

    e := initializeTest("PutSlideHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid password
*/
func TestPutSlideHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid folder
*/
func TestPutSlideHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footer the slide.
   Test for SlidesApi.PutSlideHeaderFooter method with invalid storage
*/
func TestPutSlideHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideHeaderFooter", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideHeaderFooter", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlideHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideHeaderFooter(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method
*/
func TestPutSlideSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PutSlideSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid name
*/
func TestPutSlideSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid slideIndex
*/
func TestPutSlideSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid format
*/
func TestPutSlideSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutSlideSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid outPath
*/
func TestPutSlideSaveAsInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutSlideSaveAs", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid options
*/
func TestPutSlideSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PutSlideSaveAs", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("PutSlideSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid width
*/
func TestPutSlideSaveAsInvalidWidth(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)
    testwidth = new(int32)

    invalidValue := invalidizeTestParamValue(testwidth, "PutSlideSaveAs", "width", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testwidth = nullValue
    } else {
        *testwidth, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideSaveAs", "width", testwidth)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "width", testwidth, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid height
*/
func TestPutSlideSaveAsInvalidHeight(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)
    testheight = new(int32)

    invalidValue := invalidizeTestParamValue(testheight, "PutSlideSaveAs", "height", "int32")
    if (invalidValue == nil) {
        var nullValue *int32
        testheight = nullValue
    } else {
        *testheight, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideSaveAs", "height", testheight)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "height", testheight, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid password
*/
func TestPutSlideSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid folder
*/
func TestPutSlideSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid storage
*/
func TestPutSlideSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a slide to a specified format.
   Test for SlidesApi.PutSlideSaveAs method with invalid fontsFolder
*/
func TestPutSlideSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSaveAs", "slideIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSlideSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlideSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlideSaveAs", "options", "ExportOptions").(IExportOptions)
    var testwidth *int32
    testwidthValue := createTestParamValue("PutSlideSaveAs", "width", "int32")
    if (testwidthValue != nil) {
        testwidth = new(int32)
        *testwidth, _ = testwidthValue.(int32)
    }
    var testheight *int32
    testheightValue := createTestParamValue("PutSlideSaveAs", "height", "int32")
    if (testheightValue != nil) {
        testheight = new(int32)
        *testheight, _ = testheightValue.(int32)
    }
    testpassword, _ := createTestParamValue("PutSlideSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlideSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutSlideSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSlide(testname, testslideIndex, testformat, testoutPath, testoptions, testwidth, testheight, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method
*/
func TestPutSlideShapeInfo(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)
    e := initializeTest("PutSlideShapeInfo", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid name
*/
func TestPutSlideShapeInfoInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideShapeInfo", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideShapeInfo", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid slideIndex
*/
func TestPutSlideShapeInfoInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideShapeInfo", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideShapeInfo", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid shapeIndex
*/
func TestPutSlideShapeInfoInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSlideShapeInfo", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideShapeInfo", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid dto
*/
func TestPutSlideShapeInfoInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlideShapeInfo", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PutSlideShapeInfo", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid password
*/
func TestPutSlideShapeInfoInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideShapeInfo", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideShapeInfo", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid folder
*/
func TestPutSlideShapeInfoInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideShapeInfo", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideShapeInfo", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutSlideShapeInfo method with invalid storage
*/
func TestPutSlideShapeInfoInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideShapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideShapeInfo", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutSlideShapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideShapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideShapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideShapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideShapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideShapeInfo", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideShapeInfo", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideShapeInfo", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method
*/
func TestPutSlideSubshapeInfo(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)
    e := initializeTest("PutSlideSubshapeInfo", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid name
*/
func TestPutSlideSubshapeInfoInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlideSubshapeInfo", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSubshapeInfo", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid slideIndex
*/
func TestPutSlideSubshapeInfoInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlideSubshapeInfo", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideSubshapeInfo", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid path
*/
func TestPutSlideSubshapeInfoInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PutSlideSubshapeInfo", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSubshapeInfo", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid shapeIndex
*/
func TestPutSlideSubshapeInfoInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSlideSubshapeInfo", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlideSubshapeInfo", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid dto
*/
func TestPutSlideSubshapeInfoInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlideSubshapeInfo", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PutSlideSubshapeInfo", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid password
*/
func TestPutSlideSubshapeInfoInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlideSubshapeInfo", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSubshapeInfo", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid folder
*/
func TestPutSlideSubshapeInfoInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlideSubshapeInfo", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSubshapeInfo", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties (for smart art and group shapes).
   Test for SlidesApi.PutSlideSubshapeInfo method with invalid storage
*/
func TestPutSlideSubshapeInfoInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlideSubshapeInfo", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSlideSubshapeInfo", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSlideSubshapeInfo", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutSlideSubshapeInfo", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutSlideSubshapeInfo", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlideSubshapeInfo", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlideSubshapeInfo", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlideSubshapeInfo", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlideSubshapeInfo", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSubshape(testname, testslideIndex, testpath, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlideSubshapeInfo", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method
*/
func TestPutSlidesConvert(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)
    e := initializeTest("PutSlidesConvert", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid document
*/
func TestPutSlidesConvertInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PutSlidesConvert", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PutSlidesConvert", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid format
*/
func TestPutSlidesConvertInvalidFormat(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutSlidesConvert", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesConvert", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid outPath
*/
func TestPutSlidesConvertInvalidOutPath(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutSlidesConvert", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesConvert", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid password
*/
func TestPutSlidesConvertInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesConvert", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesConvert", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid storage
*/
func TestPutSlidesConvertInvalidStorage(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesConvert", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesConvert", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Convert presentation from request content to format specified.
   Test for SlidesApi.PutSlidesConvert method with invalid fontsFolder
*/
func TestPutSlidesConvertInvalidFontsFolder(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesConvert", "document", "[]byte").([]byte)
    testformat, _ := createTestParamValue("PutSlidesConvert", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesConvert", "outPath", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesConvert", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesConvert", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesConvert", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutSlidesConvert", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesConvert", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.ConvertAndSave(testdocument, testformat, testoutPath, testpassword, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesConvert", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method
*/
func TestPutSlidesHeaderFooter(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)
    e := initializeTest("PutSlidesHeaderFooter", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method with invalid name
*/
func TestPutSlidesHeaderFooterInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesHeaderFooter", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesHeaderFooter", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesHeaderFooter", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method with invalid dto
*/
func TestPutSlidesHeaderFooterInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlidesHeaderFooter", "dto", "HeaderFooter")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IHeaderFooter)
    }

    e := initializeTest("PutSlidesHeaderFooter", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesHeaderFooter", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method with invalid password
*/
func TestPutSlidesHeaderFooterInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesHeaderFooter", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesHeaderFooter", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesHeaderFooter", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method with invalid folder
*/
func TestPutSlidesHeaderFooterInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesHeaderFooter", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesHeaderFooter", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesHeaderFooter", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set footers for all slides in a presentation.
   Test for SlidesApi.PutSlidesHeaderFooter method with invalid storage
*/
func TestPutSlidesHeaderFooterInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesHeaderFooter", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesHeaderFooter", "dto", "HeaderFooter").(IHeaderFooter)
    testpassword, _ := createTestParamValue("PutSlidesHeaderFooter", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesHeaderFooter", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesHeaderFooter", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesHeaderFooter", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesHeaderFooter", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetPresentationHeaderFooter(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesHeaderFooter", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method
*/
func TestPutSlidesMerge(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)
    e := initializeTest("PutSlidesMerge", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method with invalid outPath
*/
func TestPutSlidesMergeInvalidOutPath(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutSlidesMerge", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesMerge", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesMerge", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method with invalid files
*/
func TestPutSlidesMergeInvalidFiles(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfiles, "PutSlidesMerge", "files", "[][]byte")
    if (invalidValue == nil) {
        testfiles = nil
    } else {
        testfiles, _ = invalidValue.([][]byte)
    }

    e := initializeTest("PutSlidesMerge", "files", testfiles)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesMerge", "files", testfiles, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method with invalid request
*/
func TestPutSlidesMergeInvalidRequest(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testrequest, "PutSlidesMerge", "request", "OrderedMergeRequest")
    if (invalidValue == nil) {
        testrequest = nil
    } else {
        testrequest, _ = invalidValue.(IOrderedMergeRequest)
    }

    e := initializeTest("PutSlidesMerge", "request", testrequest)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesMerge", "request", testrequest, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method with invalid password
*/
func TestPutSlidesMergeInvalidPassword(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesMerge", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesMerge", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesMerge", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
   Test for SlidesApi.PutSlidesMerge method with invalid storage
*/
func TestPutSlidesMergeInvalidStorage(t *testing.T) {
    testoutPath, _ := createTestParamValue("PutSlidesMerge", "outPath", "string").(string)
    testfiles, _ := createTestParamValue("PutSlidesMerge", "files", "[][]byte").([][]byte)
    testrequest, _ := createTestParamValue("PutSlidesMerge", "request", "OrderedMergeRequest").(IOrderedMergeRequest)
    testpassword, _ := createTestParamValue("PutSlidesMerge", "password", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesMerge", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesMerge", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesMerge", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.MergeAndSaveOnline(testoutPath, testfiles, testrequest, testpassword, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesMerge", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method
*/
func TestPutSlidesProtectionProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)
    e := initializeTest("PutSlidesProtectionProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method with invalid name
*/
func TestPutSlidesProtectionPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesProtectionProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesProtectionProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method with invalid dto
*/
func TestPutSlidesProtectionPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlidesProtectionProperties", "dto", "ProtectionProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IProtectionProperties)
    }

    e := initializeTest("PutSlidesProtectionProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method with invalid password
*/
func TestPutSlidesProtectionPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesProtectionProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesProtectionProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method with invalid folder
*/
func TestPutSlidesProtectionPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesProtectionProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesProtectionProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Updates presentation protection properties.
   Test for SlidesApi.PutSlidesProtectionProperties method with invalid storage
*/
func TestPutSlidesProtectionPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesProtectionProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesProtectionProperties", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesProtectionProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesProtectionProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesProtectionProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesProtectionProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtection(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.PutSlidesProtectionPropertiesOnline method
*/
func TestPutSlidesProtectionPropertiesOnline(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "password", "string").(string)
    e := initializeTest("PutSlidesProtectionPropertiesOnline", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    r, _, e := c.SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    assertBinaryResponse(r, t)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.PutSlidesProtectionPropertiesOnline method with invalid document
*/
func TestPutSlidesProtectionPropertiesOnlineInvalidDocument(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdocument, "PutSlidesProtectionPropertiesOnline", "document", "[]byte")
    if (invalidValue == nil) {
        testdocument = nil
    } else {
        testdocument, _ = invalidValue.([]byte)
    }

    e := initializeTest("PutSlidesProtectionPropertiesOnline", "document", testdocument)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionPropertiesOnline", "document", testdocument, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.PutSlidesProtectionPropertiesOnline method with invalid dto
*/
func TestPutSlidesProtectionPropertiesOnlineInvalidDto(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlidesProtectionPropertiesOnline", "dto", "ProtectionProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IProtectionProperties)
    }

    e := initializeTest("PutSlidesProtectionPropertiesOnline", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionPropertiesOnline", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Sets presentation protection options. 
   Test for SlidesApi.PutSlidesProtectionPropertiesOnline method with invalid password
*/
func TestPutSlidesProtectionPropertiesOnlineInvalidPassword(t *testing.T) {
    testdocument, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "document", "[]byte").([]byte)
    testdto, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "dto", "ProtectionProperties").(IProtectionProperties)
    testpassword, _ := createTestParamValue("PutSlidesProtectionPropertiesOnline", "password", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesProtectionPropertiesOnline", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesProtectionPropertiesOnline", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetProtectionOnline(testdocument, testdto, testpassword)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesProtectionPropertiesOnline", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method
*/
func TestPutSlidesSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PutSlidesSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid name
*/
func TestPutSlidesSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid format
*/
func TestPutSlidesSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutSlidesSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid outPath
*/
func TestPutSlidesSaveAsInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutSlidesSaveAs", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid options
*/
func TestPutSlidesSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PutSlidesSaveAs", "options", "ExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IExportOptions)
    }

    e := initializeTest("PutSlidesSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid password
*/
func TestPutSlidesSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid folder
*/
func TestPutSlidesSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid storage
*/
func TestPutSlidesSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Save a presentation to a specified format.
   Test for SlidesApi.PutSlidesSaveAs method with invalid fontsFolder
*/
func TestPutSlidesSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSaveAs", "name", "string").(string)
    testformat, _ := createTestParamValue("PutSlidesSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSlidesSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSlidesSaveAs", "options", "ExportOptions").(IExportOptions)
    testpassword, _ := createTestParamValue("PutSlidesSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSlidesSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutSlidesSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SavePresentation(testname, testformat, testoutPath, testoptions, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method
*/
func TestPutSlidesSetDocumentProperty(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)
    e := initializeTest("PutSlidesSetDocumentProperty", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid name
*/
func TestPutSlidesSetDocumentPropertyInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSetDocumentProperty", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid propertyName
*/
func TestPutSlidesSetDocumentPropertyInvalidPropertyName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpropertyName, "PutSlidesSetDocumentProperty", "propertyName", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpropertyName = nullValue
    } else {
        testpropertyName, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "propertyName", testpropertyName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "propertyName", testpropertyName, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid property
*/
func TestPutSlidesSetDocumentPropertyInvalidProperty(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testproperty, "PutSlidesSetDocumentProperty", "property", "DocumentProperty")
    if (invalidValue == nil) {
        testproperty = nil
    } else {
        testproperty, _ = invalidValue.(IDocumentProperty)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "property", testproperty)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "property", testproperty, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid password
*/
func TestPutSlidesSetDocumentPropertyInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSetDocumentProperty", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid folder
*/
func TestPutSlidesSetDocumentPropertyInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSetDocumentProperty", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set document property.
   Test for SlidesApi.PutSlidesSetDocumentProperty method with invalid storage
*/
func TestPutSlidesSetDocumentPropertyInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSetDocumentProperty", "name", "string").(string)
    testpropertyName, _ := createTestParamValue("PutSlidesSetDocumentProperty", "propertyName", "string").(string)
    testproperty, _ := createTestParamValue("PutSlidesSetDocumentProperty", "property", "DocumentProperty").(IDocumentProperty)
    testpassword, _ := createTestParamValue("PutSlidesSetDocumentProperty", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSetDocumentProperty", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSetDocumentProperty", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSetDocumentProperty", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSetDocumentProperty", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetDocumentProperty(testname, testpropertyName, testproperty, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSetDocumentProperty", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method
*/
func TestPutSlidesSlide(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)
    e := initializeTest("PutSlidesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid name
*/
func TestPutSlidesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid slideIndex
*/
func TestPutSlidesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlidesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlidesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid slideDto
*/
func TestPutSlidesSlideInvalidSlideDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideDto, "PutSlidesSlide", "slideDto", "Slide")
    if (invalidValue == nil) {
        testslideDto = nil
    } else {
        testslideDto, _ = invalidValue.(ISlide)
    }

    e := initializeTest("PutSlidesSlide", "slideDto", testslideDto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "slideDto", testslideDto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid password
*/
func TestPutSlidesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid folder
*/
func TestPutSlidesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update a slide.
   Test for SlidesApi.PutSlidesSlide method with invalid storage
*/
func TestPutSlidesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlide", "slideIndex", "int32").(int32)
    testslideDto, _ := createTestParamValue("PutSlidesSlide", "slideDto", "Slide").(ISlide)
    testpassword, _ := createTestParamValue("PutSlidesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateSlide(testname, testslideIndex, testslideDto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method
*/
func TestPutSlidesSlideBackground(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)
    e := initializeTest("PutSlidesSlideBackground", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid name
*/
func TestPutSlidesSlideBackgroundInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSlideBackground", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackground", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid slideIndex
*/
func TestPutSlidesSlideBackgroundInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlidesSlideBackground", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlidesSlideBackground", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid background
*/
func TestPutSlidesSlideBackgroundInvalidBackground(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testbackground, "PutSlidesSlideBackground", "background", "SlideBackground")
    if (invalidValue == nil) {
        testbackground = nil
    } else {
        testbackground, _ = invalidValue.(ISlideBackground)
    }

    e := initializeTest("PutSlidesSlideBackground", "background", testbackground)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "background", testbackground, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid password
*/
func TestPutSlidesSlideBackgroundInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSlideBackground", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackground", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid folder
*/
func TestPutSlidesSlideBackgroundInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSlideBackground", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackground", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background for a slide.
   Test for SlidesApi.PutSlidesSlideBackground method with invalid storage
*/
func TestPutSlidesSlideBackgroundInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackground", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackground", "slideIndex", "int32").(int32)
    testbackground, _ := createTestParamValue("PutSlidesSlideBackground", "background", "SlideBackground").(ISlideBackground)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackground", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackground", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackground", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSlideBackground", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackground", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackground(testname, testslideIndex, testbackground, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackground", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method
*/
func TestPutSlidesSlideBackgroundColor(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)
    e := initializeTest("PutSlidesSlideBackgroundColor", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid name
*/
func TestPutSlidesSlideBackgroundColorInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSlideBackgroundColor", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid slideIndex
*/
func TestPutSlidesSlideBackgroundColorInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSlidesSlideBackgroundColor", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid color
*/
func TestPutSlidesSlideBackgroundColorInvalidColor(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testcolor, "PutSlidesSlideBackgroundColor", "color", "string")
    if (invalidValue == nil) {
        var nullValue string
        testcolor = nullValue
    } else {
        testcolor, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "color", testcolor)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "color", testcolor, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid password
*/
func TestPutSlidesSlideBackgroundColorInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSlideBackgroundColor", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid folder
*/
func TestPutSlidesSlideBackgroundColorInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSlideBackgroundColor", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Set background color for a slide.
   Test for SlidesApi.PutSlidesSlideBackgroundColor method with invalid storage
*/
func TestPutSlidesSlideBackgroundColorInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "slideIndex", "int32").(int32)
    testcolor, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "color", "string").(string)
    testpassword, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideBackgroundColor", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSlideBackgroundColor", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideBackgroundColor", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetBackgroundColor(testname, testslideIndex, testcolor, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideBackgroundColor", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method
*/
func TestPutSlidesSlideProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)
    e := initializeTest("PutSlidesSlideProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method with invalid name
*/
func TestPutSlidesSlidePropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesSlideProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method with invalid dto
*/
func TestPutSlidesSlidePropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlidesSlideProperties", "dto", "SlideProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(ISlideProperties)
    }

    e := initializeTest("PutSlidesSlideProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method with invalid password
*/
func TestPutSlidesSlidePropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesSlideProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method with invalid folder
*/
func TestPutSlidesSlidePropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesSlideProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation slide properties.
   Test for SlidesApi.PutSlidesSlideProperties method with invalid storage
*/
func TestPutSlidesSlidePropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesSlideProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesSlideProperties", "dto", "SlideProperties").(ISlideProperties)
    testpassword, _ := createTestParamValue("PutSlidesSlideProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesSlideProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesSlideProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesSlideProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesSlideProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetSlideProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesSlideProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method
*/
func TestPutSlidesViewProperties(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)
    e := initializeTest("PutSlidesViewProperties", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method with invalid name
*/
func TestPutSlidesViewPropertiesInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSlidesViewProperties", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesViewProperties", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesViewProperties", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method with invalid dto
*/
func TestPutSlidesViewPropertiesInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutSlidesViewProperties", "dto", "ViewProperties")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IViewProperties)
    }

    e := initializeTest("PutSlidesViewProperties", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesViewProperties", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method with invalid password
*/
func TestPutSlidesViewPropertiesInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSlidesViewProperties", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesViewProperties", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesViewProperties", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method with invalid folder
*/
func TestPutSlidesViewPropertiesInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSlidesViewProperties", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesViewProperties", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesViewProperties", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update presentation document properties.
   Test for SlidesApi.PutSlidesViewProperties method with invalid storage
*/
func TestPutSlidesViewPropertiesInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSlidesViewProperties", "name", "string").(string)
    testdto, _ := createTestParamValue("PutSlidesViewProperties", "dto", "ViewProperties").(IViewProperties)
    testpassword, _ := createTestParamValue("PutSlidesViewProperties", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSlidesViewProperties", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSlidesViewProperties", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSlidesViewProperties", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSlidesViewProperties", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.SetViewProperties(testname, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSlidesViewProperties", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method
*/
func TestPutSubshapeSaveAs(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)
    e := initializeTest("PutSubshapeSaveAs", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, e = c.SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid name
*/
func TestPutSubshapeSaveAsInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutSubshapeSaveAs", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid slideIndex
*/
func TestPutSubshapeSaveAsInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutSubshapeSaveAs", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSubshapeSaveAs", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid path
*/
func TestPutSubshapeSaveAsInvalidPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "PutSubshapeSaveAs", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid shapeIndex
*/
func TestPutSubshapeSaveAsInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutSubshapeSaveAs", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutSubshapeSaveAs", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid format
*/
func TestPutSubshapeSaveAsInvalidFormat(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testformat, "PutSubshapeSaveAs", "format", "string")
    if (invalidValue == nil) {
        var nullValue string
        testformat = nullValue
    } else {
        testformat, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "format", testformat)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "format", testformat, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid outPath
*/
func TestPutSubshapeSaveAsInvalidOutPath(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoutPath, "PutSubshapeSaveAs", "outPath", "string")
    if (invalidValue == nil) {
        var nullValue string
        testoutPath = nullValue
    } else {
        testoutPath, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "outPath", testoutPath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "outPath", testoutPath, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid options
*/
func TestPutSubshapeSaveAsInvalidOptions(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testoptions, "PutSubshapeSaveAs", "options", "IShapeExportOptions")
    if (invalidValue == nil) {
        testoptions = nil
    } else {
        testoptions, _ = invalidValue.(IIShapeExportOptions)
    }

    e := initializeTest("PutSubshapeSaveAs", "options", testoptions)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "options", testoptions, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid scaleX
*/
func TestPutSubshapeSaveAsInvalidScaleX(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)
    testscaleX = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleX, "PutSubshapeSaveAs", "scaleX", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleX = nullValue
    } else {
        *testscaleX, _ = invalidValue.(float64)
    }

    e := initializeTest("PutSubshapeSaveAs", "scaleX", testscaleX)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "scaleX", testscaleX, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid scaleY
*/
func TestPutSubshapeSaveAsInvalidScaleY(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)
    testscaleY = new(float64)

    invalidValue := invalidizeTestParamValue(testscaleY, "PutSubshapeSaveAs", "scaleY", "float64")
    if (invalidValue == nil) {
        var nullValue *float64
        testscaleY = nullValue
    } else {
        *testscaleY, _ = invalidValue.(float64)
    }

    e := initializeTest("PutSubshapeSaveAs", "scaleY", testscaleY)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "scaleY", testscaleY, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid bounds
*/
func TestPutSubshapeSaveAsInvalidBounds(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testbounds, "PutSubshapeSaveAs", "bounds", "string")
    if (invalidValue == nil) {
        var nullValue string
        testbounds = nullValue
    } else {
        testbounds, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "bounds", testbounds)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "bounds", testbounds, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid password
*/
func TestPutSubshapeSaveAsInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutSubshapeSaveAs", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid folder
*/
func TestPutSubshapeSaveAsInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutSubshapeSaveAs", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid storage
*/
func TestPutSubshapeSaveAsInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutSubshapeSaveAs", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Render shape to specified picture format.
   Test for SlidesApi.PutSubshapeSaveAs method with invalid fontsFolder
*/
func TestPutSubshapeSaveAsInvalidFontsFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutSubshapeSaveAs", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutSubshapeSaveAs", "slideIndex", "int32").(int32)
    testpath, _ := createTestParamValue("PutSubshapeSaveAs", "path", "string").(string)
    testshapeIndex, _ := createTestParamValue("PutSubshapeSaveAs", "shapeIndex", "int32").(int32)
    testformat, _ := createTestParamValue("PutSubshapeSaveAs", "format", "string").(string)
    testoutPath, _ := createTestParamValue("PutSubshapeSaveAs", "outPath", "string").(string)
    testoptions, _ := createTestParamValue("PutSubshapeSaveAs", "options", "IShapeExportOptions").(IIShapeExportOptions)
    var testscaleX *float64
    testscaleXValue := createTestParamValue("PutSubshapeSaveAs", "scaleX", "float64")
    if (testscaleXValue != nil) {
        testscaleX = new(float64)
        *testscaleX, _ = testscaleXValue.(float64)
    }
    var testscaleY *float64
    testscaleYValue := createTestParamValue("PutSubshapeSaveAs", "scaleY", "float64")
    if (testscaleYValue != nil) {
        testscaleY = new(float64)
        *testscaleY, _ = testscaleYValue.(float64)
    }
    testbounds, _ := createTestParamValue("PutSubshapeSaveAs", "bounds", "string").(string)
    testpassword, _ := createTestParamValue("PutSubshapeSaveAs", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutSubshapeSaveAs", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutSubshapeSaveAs", "storage", "string").(string)
    testfontsFolder, _ := createTestParamValue("PutSubshapeSaveAs", "fontsFolder", "string").(string)

    invalidValue := invalidizeTestParamValue(testfontsFolder, "PutSubshapeSaveAs", "fontsFolder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfontsFolder = nullValue
    } else {
        testfontsFolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutSubshapeSaveAs", "fontsFolder", testfontsFolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    r, e := getTestApiClient().SlidesApi.SaveSubshape(testname, testslideIndex, testpath, testshapeIndex, testformat, testoutPath, testoptions, testscaleX, testscaleY, testbounds, testpassword, testfolder, teststorage, testfontsFolder)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutSubshapeSaveAs", "fontsFolder", testfontsFolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method
*/
func TestPutUpdateNotesSlide(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)
    e := initializeTest("PutUpdateNotesSlide", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid name
*/
func TestPutUpdateNotesSlideInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutUpdateNotesSlide", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlide", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid slideIndex
*/
func TestPutUpdateNotesSlideInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutUpdateNotesSlide", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlide", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid dto
*/
func TestPutUpdateNotesSlideInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutUpdateNotesSlide", "dto", "NotesSlide")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(INotesSlide)
    }

    e := initializeTest("PutUpdateNotesSlide", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid password
*/
func TestPutUpdateNotesSlideInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutUpdateNotesSlide", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlide", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid folder
*/
func TestPutUpdateNotesSlideInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutUpdateNotesSlide", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlide", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update notes slide properties.
   Test for SlidesApi.PutUpdateNotesSlide method with invalid storage
*/
func TestPutUpdateNotesSlideInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlide", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlide", "slideIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlide", "dto", "NotesSlide").(INotesSlide)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlide", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlide", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlide", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutUpdateNotesSlide", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlide", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlide(testname, testslideIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlide", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method
*/
func TestPutUpdateNotesSlideShape(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)
    e := initializeTest("PutUpdateNotesSlideShape", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid name
*/
func TestPutUpdateNotesSlideShapeInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutUpdateNotesSlideShape", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid slideIndex
*/
func TestPutUpdateNotesSlideShapeInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutUpdateNotesSlideShape", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid shapeIndex
*/
func TestPutUpdateNotesSlideShapeInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutUpdateNotesSlideShape", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid dto
*/
func TestPutUpdateNotesSlideShapeInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutUpdateNotesSlideShape", "dto", "ShapeBase")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IShapeBase)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid password
*/
func TestPutUpdateNotesSlideShapeInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutUpdateNotesSlideShape", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid folder
*/
func TestPutUpdateNotesSlideShapeInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutUpdateNotesSlideShape", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update shape properties.
   Test for SlidesApi.PutUpdateNotesSlideShape method with invalid storage
*/
func TestPutUpdateNotesSlideShapeInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShape", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShape", "shapeIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShape", "dto", "ShapeBase").(IShapeBase)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShape", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShape", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShape", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutUpdateNotesSlideShape", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShape", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideShape(testname, testslideIndex, testshapeIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShape", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method
*/
func TestPutUpdateNotesSlideShapeParagraph(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)
    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid name
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutUpdateNotesSlideShapeParagraph", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid slideIndex
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid shapeIndex
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid paragraphIndex
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid dto
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IParagraph)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid password
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutUpdateNotesSlideShapeParagraph", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid folder
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutUpdateNotesSlideShapeParagraph", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update paragraph properties.
   Test for SlidesApi.PutUpdateNotesSlideShapeParagraph method with invalid storage
*/
func TestPutUpdateNotesSlideShapeParagraphInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "paragraphIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "dto", "Paragraph").(IParagraph)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapeParagraph", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutUpdateNotesSlideShapeParagraph", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapeParagraph", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlideParagraph(testname, testslideIndex, testshapeIndex, testparagraphIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapeParagraph", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method
*/
func TestPutUpdateNotesSlideShapePortion(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)
    e := initializeTest("PutUpdateNotesSlideShapePortion", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid name
*/
func TestPutUpdateNotesSlideShapePortionInvalidName(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testname, "PutUpdateNotesSlideShapePortion", "name", "string")
    if (invalidValue == nil) {
        var nullValue string
        testname = nullValue
    } else {
        testname, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "name", testname)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "name", testname, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid slideIndex
*/
func TestPutUpdateNotesSlideShapePortionInvalidSlideIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testslideIndex, "PutUpdateNotesSlideShapePortion", "slideIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testslideIndex = nullValue
    } else {
        testslideIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "slideIndex", testslideIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "slideIndex", testslideIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid shapeIndex
*/
func TestPutUpdateNotesSlideShapePortionInvalidShapeIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testshapeIndex, "PutUpdateNotesSlideShapePortion", "shapeIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testshapeIndex = nullValue
    } else {
        testshapeIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "shapeIndex", testshapeIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "shapeIndex", testshapeIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid paragraphIndex
*/
func TestPutUpdateNotesSlideShapePortionInvalidParagraphIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testparagraphIndex, "PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testparagraphIndex = nullValue
    } else {
        testparagraphIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "paragraphIndex", testparagraphIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "paragraphIndex", testparagraphIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid portionIndex
*/
func TestPutUpdateNotesSlideShapePortionInvalidPortionIndex(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testportionIndex, "PutUpdateNotesSlideShapePortion", "portionIndex", "int32")
    if (invalidValue == nil) {
        var nullValue int32
        testportionIndex = nullValue
    } else {
        testportionIndex, _ = invalidValue.(int32)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "portionIndex", testportionIndex)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "portionIndex", testportionIndex, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid dto
*/
func TestPutUpdateNotesSlideShapePortionInvalidDto(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testdto, "PutUpdateNotesSlideShapePortion", "dto", "Portion")
    if (invalidValue == nil) {
        testdto = nil
    } else {
        testdto, _ = invalidValue.(IPortion)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "dto", testdto)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "dto", testdto, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid password
*/
func TestPutUpdateNotesSlideShapePortionInvalidPassword(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testpassword, "PutUpdateNotesSlideShapePortion", "password", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpassword = nullValue
    } else {
        testpassword, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "password", testpassword)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "password", testpassword, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid folder
*/
func TestPutUpdateNotesSlideShapePortionInvalidFolder(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(testfolder, "PutUpdateNotesSlideShapePortion", "folder", "string")
    if (invalidValue == nil) {
        var nullValue string
        testfolder = nullValue
    } else {
        testfolder, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "folder", testfolder)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "folder", testfolder, int32(statusCode), e)
}

/* SlidesApiServiceTests Update portion properties.
   Test for SlidesApi.PutUpdateNotesSlideShapePortion method with invalid storage
*/
func TestPutUpdateNotesSlideShapePortionInvalidStorage(t *testing.T) {
    testname, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "name", "string").(string)
    testslideIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "slideIndex", "int32").(int32)
    testshapeIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "shapeIndex", "int32").(int32)
    testparagraphIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "paragraphIndex", "int32").(int32)
    testportionIndex, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "portionIndex", "int32").(int32)
    testdto, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "dto", "Portion").(IPortion)
    testpassword, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "password", "string").(string)
    testfolder, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "folder", "string").(string)
    teststorage, _ := createTestParamValue("PutUpdateNotesSlideShapePortion", "storage", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorage, "PutUpdateNotesSlideShapePortion", "storage", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorage = nullValue
    } else {
        teststorage, _ = invalidValue.(string)
    }

    e := initializeTest("PutUpdateNotesSlideShapePortion", "storage", teststorage)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UpdateNotesSlidePortion(testname, testslideIndex, testshapeIndex, testparagraphIndex, testportionIndex, testdto, testpassword, testfolder, teststorage)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "PutUpdateNotesSlideShapePortion", "storage", teststorage, int32(statusCode), e)
}

/* SlidesApiServiceTests Check if storage exists
   Test for SlidesApi.StorageExists method
*/
func TestStorageExists(t *testing.T) {
    teststorageName, _ := createTestParamValue("StorageExists", "storageName", "string").(string)
    e := initializeTest("StorageExists", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.StorageExists(teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Check if storage exists
   Test for SlidesApi.StorageExists method with invalid storageName
*/
func TestStorageExistsInvalidStorageName(t *testing.T) {
    teststorageName, _ := createTestParamValue("StorageExists", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "StorageExists", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("StorageExists", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.StorageExists(teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "StorageExists", "storageName", teststorageName, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method
*/
func TestUploadFile(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)
    e := initializeTest("UploadFile", "", "")
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    c := getTestApiClient()
    _, _, e = c.SlidesApi.UploadFile(testpath, testfile, teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid path
*/
func TestUploadFileInvalidPath(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testpath, "UploadFile", "path", "string")
    if (invalidValue == nil) {
        var nullValue string
        testpath = nullValue
    } else {
        testpath, _ = invalidValue.(string)
    }

    e := initializeTest("UploadFile", "path", testpath)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "path", testpath, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid file
*/
func TestUploadFileInvalidFile(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(testfile, "UploadFile", "file", "[]byte")
    if (invalidValue == nil) {
        testfile = nil
    } else {
        testfile, _ = invalidValue.([]byte)
    }

    e := initializeTest("UploadFile", "file", testfile)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "file", testfile, int32(statusCode), e)
}

/* SlidesApiServiceTests Upload file
   Test for SlidesApi.UploadFile method with invalid storageName
*/
func TestUploadFileInvalidStorageName(t *testing.T) {
    testpath, _ := createTestParamValue("UploadFile", "path", "string").(string)
    testfile, _ := createTestParamValue("UploadFile", "file", "[]byte").([]byte)
    teststorageName, _ := createTestParamValue("UploadFile", "storageName", "string").(string)

    invalidValue := invalidizeTestParamValue(teststorageName, "UploadFile", "storageName", "string")
    if (invalidValue == nil) {
        var nullValue string
        teststorageName = nullValue
    } else {
        teststorageName, _ = invalidValue.(string)
    }

    e := initializeTest("UploadFile", "storageName", teststorageName)
    if e != nil {
       t.Errorf("Error: %v.", e)
       return
    }
    _, r, e := getTestApiClient().SlidesApi.UploadFile(testpath, testfile, teststorageName)
    statusCode := 400
    if r != nil {
        statusCode = r.StatusCode
    }
    assertError(t, "UploadFile", "storageName", teststorageName, int32(statusCode), e)
}
